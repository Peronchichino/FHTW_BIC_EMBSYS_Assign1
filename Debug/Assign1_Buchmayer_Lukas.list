
Assign1_Buchmayer_Lukas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080097a8  080097a8  000197a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d5c  08009d5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d64  08009d64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b8c  200001e0  08009f4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d6c  08009f4c  00023d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7d3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d41  00000000  00000000  0003c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00040728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00041f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002468c  00000000  00000000  000435c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b137  00000000  00000000  00067c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7648  00000000  00000000  00082d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a3cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a0  00000000  00000000  0015a41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800978c 	.word	0x0800978c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800978c 	.word	0x0800978c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <CreatedBubbleSortTask>:
  .priority = (osPriority_t) osPriorityLow,
};

void BubbleSortTask(void *argument);

osThreadId_t CreatedBubbleSortTask(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	return osThreadNew(BubbleSortTask, NULL, &BubbleSort_attributes);
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <CreatedBubbleSortTask+0x14>)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <CreatedBubbleSortTask+0x18>)
 8000eb6:	f003 f96b 	bl	8004190 <osThreadNew>
 8000eba:	4603      	mov	r3, r0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	080098a8 	.word	0x080098a8
 8000ec4:	08000f19 	.word	0x08000f19

08000ec8 <GetBubbleSortTaskAttributes>:

osThreadAttr_t GetBubbleSortTaskAttributes(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	return BubbleSort_attributes;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	2324      	movs	r3, #36	; 0x24
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f005 ff2f 	bl	8006d3c <memset>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <GetBubbleSortTaskAttributes+0x44>)
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <GetBubbleSortTaskAttributes+0x48>)
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	225c      	movs	r2, #92	; 0x5c
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <GetBubbleSortTaskAttributes+0x4c>)
 8000ef4:	611a      	str	r2, [r3, #16]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2208      	movs	r2, #8
 8000f02:	619a      	str	r2, [r3, #24]
}
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080097a8 	.word	0x080097a8
 8000f10:	200009fc 	.word	0x200009fc
 8000f14:	200001fc 	.word	0x200001fc

08000f18 <BubbleSortTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BubbleSortTask */
void BubbleSortTask(void *argument)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BubbleSortTask */
  /* Infinite loop */
  for(;;)
  {
	  int array[10] = {4132,578,4312,36,762,34,5128,356,129,85};
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <BubbleSortTask+0xb4>)
 8000f22:	f107 0408 	add.w	r4, r7, #8
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f34:	e884 0003 	stmia.w	r4, {r0, r1}
	  int size = sizeof(array)/sizeof(array[0]);
 8000f38:	230a      	movs	r3, #10
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34

	  for(int i = 0; i < size - 1; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f40:	e03a      	b.n	8000fb8 <BubbleSortTask+0xa0>
		  for(int j = 0; j < size - i - 1; j++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f46:	e02d      	b.n	8000fa4 <BubbleSortTask+0x8c>
			  if(array[j] > array[i + 1]){
 8000f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	3340      	adds	r3, #64	; 0x40
 8000f4e:	443b      	add	r3, r7
 8000f50:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f56:	3301      	adds	r3, #1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	3340      	adds	r3, #64	; 0x40
 8000f5c:	443b      	add	r3, r7
 8000f5e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dd1b      	ble.n	8000f9e <BubbleSortTask+0x86>
				  int buffer = array[j];
 8000f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	3340      	adds	r3, #64	; 0x40
 8000f6c:	443b      	add	r3, r7
 8000f6e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
				  array[j] = array[j + 1];
 8000f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f76:	3301      	adds	r3, #1
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	3340      	adds	r3, #64	; 0x40
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	3340      	adds	r3, #64	; 0x40
 8000f88:	443b      	add	r3, r7
 8000f8a:	f843 2c38 	str.w	r2, [r3, #-56]
				  array[j + 1] = buffer;
 8000f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f90:	3301      	adds	r3, #1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	3340      	adds	r3, #64	; 0x40
 8000f96:	443b      	add	r3, r7
 8000f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f9a:	f843 2c38 	str.w	r2, [r3, #-56]
		  for(int j = 0; j < size - i - 1; j++){
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbca      	blt.n	8000f48 <BubbleSortTask+0x30>
	  for(int i = 0; i < size - 1; i++){
 8000fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbbf      	blt.n	8000f42 <BubbleSortTask+0x2a>
			  }
		  }
	  }
	  osDelay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f003 f9ae 	bl	8004324 <osDelay>
  {
 8000fc8:	e7aa      	b.n	8000f20 <BubbleSortTask+0x8>
 8000fca:	bf00      	nop
 8000fcc:	080097b4 	.word	0x080097b4

08000fd0 <CreatedReverseStringTask>:
  .priority = (osPriority_t) osPriorityLow,
};

void ReverseStringTask(void *argument);

osThreadId_t CreatedReverseStringTask(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	return osThreadNew(ReverseStringTask, NULL, &ReverseString_attributes);
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <CreatedReverseStringTask+0x14>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <CreatedReverseStringTask+0x18>)
 8000fda:	f003 f8d9 	bl	8004190 <osThreadNew>
 8000fde:	4603      	mov	r3, r0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	080098cc 	.word	0x080098cc
 8000fe8:	0800103d 	.word	0x0800103d

08000fec <GetReverseStringTaskAttributes>:

osThreadAttr_t GetReverseStringTaskAttributes(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return ReverseString_attributes;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	2324      	movs	r3, #36	; 0x24
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f005 fe9d 	bl	8006d3c <memset>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <GetReverseStringTaskAttributes+0x44>)
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <GetReverseStringTaskAttributes+0x48>)
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	225c      	movs	r2, #92	; 0x5c
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <GetReverseStringTaskAttributes+0x4c>)
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2208      	movs	r2, #8
 8001026:	619a      	str	r2, [r3, #24]
}
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080097dc 	.word	0x080097dc
 8001034:	20001258 	.word	0x20001258
 8001038:	20000a58 	.word	0x20000a58

0800103c <ReverseStringTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReverseStringTask */
void ReverseStringTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReverseStringTask */
  /* Infinite loop */
  for(;;)
  {
    char* str = "I am a placeholder string, please excuse me ( ._.), tacocat";
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <ReverseStringTask+0x68>)
 8001046:	60fb      	str	r3, [r7, #12]
    int length = strlen(str)-1;
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff f8c1 	bl	80001d0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	3b01      	subs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < strlen(str)/2; i++){ //manually inverting string because strrev() is not included in this compiler
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	e017      	b.n	800108a <ReverseStringTask+0x4e>
    	char buffer = str[i];
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	72fb      	strb	r3, [r7, #11]
    	str[i] = str[length];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	441a      	add	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	68f9      	ldr	r1, [r7, #12]
 800106e:	440b      	add	r3, r1
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	701a      	strb	r2, [r3, #0]
    	str[length--] = buffer;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	1e5a      	subs	r2, r3, #1
 8001078:	617a      	str	r2, [r7, #20]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	7afa      	ldrb	r2, [r7, #11]
 8001082:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < strlen(str)/2; i++){ //manually inverting string because strrev() is not included in this compiler
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	3301      	adds	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff f8a0 	bl	80001d0 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	085a      	lsrs	r2, r3, #1
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	429a      	cmp	r2, r3
 8001098:	d8df      	bhi.n	800105a <ReverseStringTask+0x1e>
    }
    osDelay(100);
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f003 f942 	bl	8004324 <osDelay>
  {
 80010a0:	e7d0      	b.n	8001044 <ReverseStringTask+0x8>
 80010a2:	bf00      	nop
 80010a4:	080097ec 	.word	0x080097ec

080010a8 <CreatedStoreInArrayTask>:
  .priority = (osPriority_t) osPriorityLow,
};

void StoreInArrayTask(void *argument);

osThreadId_t CreatedStoreInArrayTask(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	return osThreadNew(StoreInArrayTask, NULL, &StoreInArray_attributes);
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <CreatedStoreInArrayTask+0x14>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <CreatedStoreInArrayTask+0x18>)
 80010b2:	f003 f86d 	bl	8004190 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080098f0 	.word	0x080098f0
 80010c0:	08001115 	.word	0x08001115

080010c4 <GetStoreInArrayTaskAttributes>:

osThreadAttr_t GetStoreInArrayTaskAttributes(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return StoreInArray_attributes;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	2324      	movs	r3, #36	; 0x24
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	f005 fe31 	bl	8006d3c <memset>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <GetStoreInArrayTaskAttributes+0x44>)
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <GetStoreInArrayTaskAttributes+0x48>)
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	225c      	movs	r2, #92	; 0x5c
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <GetStoreInArrayTaskAttributes+0x4c>)
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2208      	movs	r2, #8
 80010fe:	619a      	str	r2, [r3, #24]
}
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	08009828 	.word	0x08009828
 800110c:	20001ab4 	.word	0x20001ab4
 8001110:	200012b4 	.word	0x200012b4

08001114 <StoreInArrayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StoreInArrayTask */
void StoreInArrayTask(void *argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0e8      	sub	sp, #416	; 0x1a0
 8001118:	af00      	add	r7, sp, #0
 800111a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800111e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001122:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StoreInArrayTask */
  /* Infinite loop */
  for(;;)
  {
    int num = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    int numArray[100];
    for(int i = 0; i < 100; i++){
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001130:	e00f      	b.n	8001152 <StoreInArrayTask+0x3e>
    	numArray[i] = num + 1;
 8001132:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001136:	1c59      	adds	r1, r3, #1
 8001138:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800113c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001140:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 100; i++){
 8001148:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800114c:	3301      	adds	r3, #1
 800114e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001152:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001156:	2b63      	cmp	r3, #99	; 0x63
 8001158:	ddeb      	ble.n	8001132 <StoreInArrayTask+0x1e>
    }
    osDelay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f003 f8e2 	bl	8004324 <osDelay>
  {
 8001160:	e7e0      	b.n	8001124 <StoreInArrayTask+0x10>
	...

08001164 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 800116c:	1d39      	adds	r1, r7, #4
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	2201      	movs	r2, #1
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <__io_putchar+0x20>)
 8001176:	f002 fb0d 	bl	8003794 <HAL_UART_Transmit>
  return ch;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20001b10 	.word	0x20001b10

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f000 fbc1 	bl	8001912 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 f82c 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f000 f8bc 	bl	8001310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001198:	f000 f88a 	bl	80012b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800119c:	f002 ffae 	bl	80040fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <main+0x4c>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <main+0x50>)
 80011a6:	f002 fff3 	bl	8004190 <osThreadNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <main+0x54>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* creation of BubbleSort */
  BubbleSortHandle = CreatedBubbleSortTask();
 80011b0:	f7ff fe7c 	bl	8000eac <CreatedBubbleSortTask>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <main+0x58>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* creation of StoreInArray */
  StoreInArrayHandle = CreatedStoreInArrayTask();
 80011ba:	f7ff ff75 	bl	80010a8 <CreatedStoreInArrayTask>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <main+0x5c>)
 80011c2:	6013      	str	r3, [r2, #0]

  /* creation of ReverseString */
  ReverseStringHandle = CreatedReverseStringTask();
 80011c4:	f7ff ff04 	bl	8000fd0 <CreatedReverseStringTask>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <main+0x60>)
 80011cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ce:	f002 ffb9 	bl	8004144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <main+0x4a>
 80011d4:	08009914 	.word	0x08009914
 80011d8:	08001489 	.word	0x08001489
 80011dc:	20001ba0 	.word	0x20001ba0
 80011e0:	20001b94 	.word	0x20001b94
 80011e4:	20001b98 	.word	0x20001b98
 80011e8:	20001b9c 	.word	0x20001b9c

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2244      	movs	r2, #68	; 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fd9e 	bl	8006d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001212:	f000 fe39 	bl	8001e88 <HAL_PWREx_ControlVoltageScaling>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800121c:	f000 f952 	bl	80014c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001220:	f000 fe14 	bl	8001e4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <SystemClock_Config+0xc0>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <SystemClock_Config+0xc0>)
 800122c:	f023 0318 	bic.w	r3, r3, #24
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001234:	2314      	movs	r3, #20
 8001236:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001244:	2360      	movs	r3, #96	; 0x60
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800124c:	2301      	movs	r3, #1
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001254:	2310      	movs	r3, #16
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001258:	2307      	movs	r3, #7
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fe63 	bl	8001f34 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001274:	f000 f926 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2303      	movs	r3, #3
 800127e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fa63 	bl	800275c <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800129c:	f000 f912 	bl	80014c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012a0:	f001 fea8 	bl	8002ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a4:	bf00      	nop
 80012a6:	3758      	adds	r7, #88	; 0x58
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_USART2_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012f4:	f002 fa00 	bl	80036f8 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8e1 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20001b10 	.word	0x20001b10
 800130c:	40004400 	.word	0x40004400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_GPIO_Init+0x8c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_GPIO_Init+0x8c>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_GPIO_Init+0x8c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_GPIO_Init+0x8c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <MX_GPIO_Init+0x8c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_GPIO_Init+0x8c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_GPIO_Init+0x8c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <MX_GPIO_Init+0x8c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_GPIO_Init+0x8c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2108      	movs	r1, #8
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MX_GPIO_Init+0x90>)
 8001374:	f000 fd52 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001378:	2308      	movs	r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_GPIO_Init+0x90>)
 8001390:	f000 fbda 	bl	8001b48 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000400 	.word	0x48000400

080013a4 <print_task_stats>:

/* USER CODE BEGIN 4 */
void print_task_stats(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0a4      	sub	sp, #144	; 0x90
 80013a8:	af00      	add	r7, sp, #0
	osThreadId_t activeThreads[] = {BubbleSortHandle, ReverseStringHandle, StoreInArrayHandle};
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <print_task_stats+0xc4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <print_task_stats+0xc8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	677b      	str	r3, [r7, #116]	; 0x74
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <print_task_stats+0xcc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	67bb      	str	r3, [r7, #120]	; 0x78

	osThreadAttr_t activeThreadsAttributes[] = { GetBubbleSortTaskAttributes(), GetReverseStringTaskAttributes(), GetStoreInArrayTaskAttributes() };
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fd82 	bl	8000ec8 <GetBubbleSortTaskAttributes>
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe0f 	bl	8000fec <GetReverseStringTaskAttributes>
 80013ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe76 	bl	80010c4 <GetStoreInArrayTaskAttributes>

	size_t threadCount = sizeof(activeThreads) / sizeof(activeThreads[0]);
 80013d8:	2303      	movs	r3, #3
 80013da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	printf("\r\n%s - %s - %s\n", "Thread Name", "Remaining Stack", "Stack Size");
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <print_task_stats+0xd0>)
 80013e0:	4a25      	ldr	r2, [pc, #148]	; (8001478 <print_task_stats+0xd4>)
 80013e2:	4926      	ldr	r1, [pc, #152]	; (800147c <print_task_stats+0xd8>)
 80013e4:	4826      	ldr	r0, [pc, #152]	; (8001480 <print_task_stats+0xdc>)
 80013e6:	f006 f91b 	bl	8007620 <iprintf>

	for(int i = 0; i < threadCount; i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80013f0:	e02f      	b.n	8001452 <print_task_stats+0xae>
		const char* threadName = osThreadGetName(activeThreads[i]);
 80013f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	3390      	adds	r3, #144	; 0x90
 80013fa:	443b      	add	r3, r7
 80013fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001400:	4618      	mov	r0, r3
 8001402:	f002 ff57 	bl	80042b4 <osThreadGetName>
 8001406:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		uint32_t remainingStackSpace = osThreadGetStackSpace(activeThreads[i]);
 800140a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	3390      	adds	r3, #144	; 0x90
 8001412:	443b      	add	r3, r7
 8001414:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001418:	4618      	mov	r0, r3
 800141a:	f002 ff66 	bl	80042ea <osThreadGetStackSpace>
 800141e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		uint32_t stackSize = activeThreadsAttributes[i].stack_size;
 8001422:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	3390      	adds	r3, #144	; 0x90
 8001430:	443b      	add	r3, r7
 8001432:	3b78      	subs	r3, #120	; 0x78
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	67fb      	str	r3, [r7, #124]	; 0x7c

		printf("\r%s - %lu - %lu\n", threadName, remainingStackSpace, stackSize);
 8001438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800143a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800143e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <print_task_stats+0xe0>)
 8001444:	f006 f8ec 	bl	8007620 <iprintf>
	for(int i = 0; i < threadCount; i++){
 8001448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144c:	3301      	adds	r3, #1
 800144e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001456:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800145a:	429a      	cmp	r2, r3
 800145c:	d8c9      	bhi.n	80013f2 <print_task_stats+0x4e>
	}
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3790      	adds	r7, #144	; 0x90
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20001b94 	.word	0x20001b94
 800146c:	20001b9c 	.word	0x20001b9c
 8001470:	20001b98 	.word	0x20001b98
 8001474:	08009844 	.word	0x08009844
 8001478:	08009850 	.word	0x08009850
 800147c:	08009860 	.word	0x08009860
 8001480:	0800986c 	.word	0x0800986c
 8001484:	0800987c 	.word	0x0800987c

08001488 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  print_task_stats();
 8001490:	f7ff ff88 	bl	80013a4 <print_task_stats>
	  osDelay(1000);
 8001494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001498:	f002 ff44 	bl	8004324 <osDelay>
	  print_task_stats();
 800149c:	e7f8      	b.n	8001490 <StartDefaultTask+0x8>
	...

080014a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b2:	f000 fa47 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40012c00 	.word	0x40012c00

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_MspInit+0x4c>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_MspInit+0x4c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6613      	str	r3, [r2, #96]	; 0x60
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_MspInit+0x4c>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_MspInit+0x4c>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6593      	str	r3, [r2, #88]	; 0x58
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_MspInit+0x4c>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 faf1 	bl	8001af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b09e      	sub	sp, #120	; 0x78
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2254      	movs	r2, #84	; 0x54
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f005 fbfb 	bl	8006d3c <memset>
  if(huart->Instance==USART2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_UART_MspInit+0xcc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d148      	bne.n	80015e2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001550:	2302      	movs	r3, #2
 8001552:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fb53 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff ffac 	bl	80014c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0xd0>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800159c:	2304      	movs	r3, #4
 800159e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ac:	2307      	movs	r3, #7
 80015ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f000 fac5 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015d0:	2303      	movs	r3, #3
 80015d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f000 fab3 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3778      	adds	r7, #120	; 0x78
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_InitTick+0xc8>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	4a2d      	ldr	r2, [pc, #180]	; (80016bc <HAL_InitTick+0xc8>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_InitTick+0xc8>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fa5d 	bl	8002ae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800162a:	f001 fa45 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 800162e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_InitTick+0xcc>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	3b01      	subs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_InitTick+0xd0>)
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_InitTick+0xd4>)
 8001642:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_InitTick+0xd0>)
 8001646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_InitTick+0xd0>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_InitTick+0xd0>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_InitTick+0xd0>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_InitTick+0xd0>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <HAL_InitTick+0xd0>)
 8001666:	f001 fdc7 	bl	80031f8 <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11b      	bne.n	80016b0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <HAL_InitTick+0xd0>)
 800167a:	f001 fe1f 	bl	80032bc <HAL_TIM_Base_Start_IT>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001688:	2b00      	cmp	r3, #0
 800168a:	d111      	bne.n	80016b0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800168c:	2019      	movs	r0, #25
 800168e:	f000 fa4d 	bl	8001b2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d808      	bhi.n	80016aa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	2019      	movs	r0, #25
 800169e:	f000 fa29 	bl	8001af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0xd8>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e002      	b.n	80016b0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3730      	adds	r7, #48	; 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	20002400 	.word	0x20002400
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	20000004 	.word	0x20000004

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001702:	f001 fe2f 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20002400 	.word	0x20002400

08001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_kill>:

int _kill(int pid, int sig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800172a:	f005 facf 	bl	8006ccc <__errno>
 800172e:	4603      	mov	r3, r0
 8001730:	2216      	movs	r2, #22
 8001732:	601a      	str	r2, [r3, #0]
	return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_exit>:

void _exit (int status)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001752:	e7fe      	b.n	8001752 <_exit+0x12>

08001754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e00a      	b.n	800177c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001766:	f3af 8000 	nop.w
 800176a:	4601      	mov	r1, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf0      	blt.n	8001766 <_read+0x12>
	}

return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e009      	b.n	80017b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fcdb 	bl	8001164 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf1      	blt.n	80017a0 <_write+0x12>
	}
	return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_close>:

int _close(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ee:	605a      	str	r2, [r3, #4]
	return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_isatty>:

int _isatty(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f005 fa34 	bl	8006ccc <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20010000 	.word	0x20010000
 8001890:	00000400 	.word	0x00000400
 8001894:	2000244c 	.word	0x2000244c
 8001898:	20003d70 	.word	0x20003d70

0800189c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c4:	f7ff ffea 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <LoopForever+0x6>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <LoopForever+0xe>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	; (800190c <LoopForever+0x16>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f005 f9f3 	bl	8006cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f2:	f7ff fc49 	bl	8001188 <main>

080018f6 <LoopForever>:

LoopForever:
    b LoopForever
 80018f6:	e7fe      	b.n	80018f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001904:	08009d6c 	.word	0x08009d6c
  ldr r2, =_sbss
 8001908:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800190c:	20003d6c 	.word	0x20003d6c

08001910 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_IRQHandler>

08001912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8de 	bl	8001ade <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fe66 	bl	80015f4 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e001      	b.n	8001938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001934:	f7ff fdcc 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	20002450 	.word	0x20002450

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20002450 	.word	0x20002450

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff4c 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b06:	f7ff ff61 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f7ff ffb1 	bl	8001a78 <NVIC_EncodePriority>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff80 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff54 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e148      	b.n	8001dea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 813a 	beq.w	8001de4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x40>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8094 	beq.w	8001de4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_GPIO_Init+0x2c4>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1d4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1d0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1cc>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d14:	2307      	movs	r3, #7
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2e:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2c4>)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d60:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f aeaf 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	48000800 	.word	0x48000800
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000

08001e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e96:	d130      	bne.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea4:	d038      	beq.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9b      	lsrs	r3, r3, #18
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ecc:	e002      	b.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	d102      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f2      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef4:	d110      	bne.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e00f      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d007      	beq.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	431bde83 	.word	0x431bde83

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f000 bc02 	b.w	800274c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80e4 	beq.w	8002132 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4c>
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	f040 808b 	bne.w	800208e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	f040 8087 	bne.w	800208e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f80:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x64>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e3d9      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x7e>
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	e005      	b.n	8001fbe <HAL_RCC_OscConfig+0x8a>
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d223      	bcs.n	800200a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fdbe 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e3ba      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	496d      	ldr	r1, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4968      	ldr	r1, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e025      	b.n	8002056 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4960      	ldr	r1, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	495b      	ldr	r1, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fd7e 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e37a      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002056:	f000 fc81 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4950      	ldr	r1, [pc, #320]	; (80021a8 <HAL_RCC_OscConfig+0x274>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_RCC_OscConfig+0x278>)
 8002074:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002076:	4b4e      	ldr	r3, [pc, #312]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff faba 	bl	80015f4 <HAL_InitTick>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d052      	beq.n	8002130 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	e35e      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d032      	beq.n	80020fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fc63 	bl	800196c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020aa:	f7ff fc5f 	bl	800196c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e347      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4930      	ldr	r1, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	492b      	ldr	r1, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e01a      	b.n	8002132 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc30 	bl	800196c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002110:	f7ff fc2c 	bl	800196c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e314      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1dc>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d073      	beq.n	8002226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x21c>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d10e      	bne.n	8002168 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d063      	beq.n	8002224 <HAL_RCC_OscConfig+0x2f0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d15f      	bne.n	8002224 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e2f1      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x24c>
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e025      	b.n	80021cc <HAL_RCC_OscConfig+0x298>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d114      	bne.n	80021b4 <HAL_RCC_OscConfig+0x280>
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a02      	ldr	r2, [pc, #8]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x298>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08009938 	.word	0x08009938
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004
 80021b4:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a9f      	ldr	r2, [pc, #636]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a9c      	ldr	r2, [pc, #624]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbca 	bl	800196c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fbc6 	bl	800196c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e2ae      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x2a8>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fbb6 	bl	800196c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fbb2 	bl	800196c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e29a      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d0>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d060      	beq.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x310>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d119      	bne.n	8002272 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d116      	bne.n	8002272 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x328>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e277      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	4973      	ldr	r1, [pc, #460]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002270:	e040      	b.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d023      	beq.n	80022c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff fb71 	bl	800196c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fb6d 	bl	800196c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e255      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	495f      	ldr	r1, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	e018      	b.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff fb4d 	bl	800196c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fb49 	bl	800196c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e231      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230e:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fb28 	bl	800196c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fb24 	bl	800196c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e20c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x3ec>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fb0b 	bl	800196c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff fb07 	bl	800196c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1ef      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a6 	beq.w	80024d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d118      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023cc:	f7ff face 	bl	800196c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7ff faca 	bl	800196c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1b2      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x4d8>
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240a:	e029      	b.n	8002460 <HAL_RCC_OscConfig+0x52c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d115      	bne.n	8002440 <HAL_RCC_OscConfig+0x50c>
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x52c>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	4a99      	ldr	r2, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	4a95      	ldr	r2, [pc, #596]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d016      	beq.n	8002496 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7ff fa80 	bl	800196c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fa7c 	bl	800196c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e162      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ed      	beq.n	8002470 <HAL_RCC_OscConfig+0x53c>
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff fa69 	bl	800196c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fa65 	bl	800196c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e14b      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b4:	4b7d      	ldr	r3, [pc, #500]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ed      	bne.n	800249e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03c      	beq.n	800255a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ee:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff fa38 	bl	800196c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002500:	f7ff fa34 	bl	800196c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e11c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCC_OscConfig+0x5cc>
 8002520:	e01b      	b.n	800255a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002528:	4a60      	ldr	r2, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fa1b 	bl	800196c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800253a:	f7ff fa17 	bl	800196c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ff      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800254e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80f3 	beq.w	800274a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	2b02      	cmp	r3, #2
 800256a:	f040 80c9 	bne.w	8002700 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800256e:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	429a      	cmp	r2, r3
 8002580:	d12c      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	3b01      	subs	r3, #1
 800258e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d123      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d11b      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d113      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d06b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d062      	beq.n	80026a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0ac      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fe:	f7ff f9b5 	bl	800196c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff f9b1 	bl	800196c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e099      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x77c>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002634:	3a01      	subs	r2, #1
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263e:	0212      	lsls	r2, r2, #8
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	3a01      	subs	r2, #1
 800264a:	0552      	lsls	r2, r2, #21
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002652:	0852      	lsrs	r2, r2, #1
 8002654:	3a01      	subs	r2, #1
 8002656:	0652      	lsls	r2, r2, #25
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265e:	06d2      	lsls	r2, r2, #27
 8002660:	430a      	orrs	r2, r1
 8002662:	4912      	ldr	r1, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7ff f974 	bl	800196c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f970 	bl	800196c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e058      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a6:	e050      	b.n	800274a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e04f      	b.n	800274c <HAL_RCC_OscConfig+0x818>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d144      	bne.n	800274a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d8:	f7ff f948 	bl	800196c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f944 	bl	800196c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e02c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x7ac>
 80026fe:	e024      	b.n	800274a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d01f      	beq.n	8002746 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800270c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff f92b 	bl	800196c <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7ff f927 	bl	800196c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4905      	ldr	r1, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x824>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e001      	b.n	800274a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	feeefffc 	.word	0xfeeefffc

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0e7      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4970      	ldr	r1, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cf      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d908      	bls.n	80027ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4960      	ldr	r1, [pc, #384]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04c      	beq.n	8002874 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0a6      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d115      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e09a      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e08e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e086      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4943      	ldr	r1, [pc, #268]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7ff f892 	bl	800196c <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7ff f88e 	bl	800196c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	429a      	cmp	r2, r3
 800288e:	d208      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	492b      	ldr	r1, [pc, #172]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d210      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 0207 	bic.w	r2, r3, #7
 80028b8:	4923      	ldr	r1, [pc, #140]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e036      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4910      	ldr	r1, [pc, #64]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002910:	f000 f824 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	490b      	ldr	r1, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1fc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fe5d 	bl	80015f4 <HAL_InitTick>
 800293a:	4603      	mov	r3, r0
 800293c:	72fb      	strb	r3, [r7, #11]

  return status;
 800293e:	7afb      	ldrb	r3, [r7, #11]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	08009938 	.word	0x08009938
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x34>
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d121      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d11e      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d102      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e004      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d134      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa6>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d003      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0xac>
 8002a00:	e005      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a04:	617b      	str	r3, [r7, #20]
      break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0a:	617b      	str	r3, [r7, #20]
      break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	617b      	str	r3, [r7, #20]
      break;
 8002a12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	fb03 f202 	mul.w	r2, r3, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0e5b      	lsrs	r3, r3, #25
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	3301      	adds	r3, #1
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08009950 	.word	0x08009950
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08009948 	.word	0x08009948

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002abc:	f7ff ffda 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08009948 	.word	0x08009948

08002ae4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	220f      	movs	r2, #15
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCC_GetClockConfig+0x60>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0207 	and.w	r2, r3, #7
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40022000 	.word	0x40022000

08002b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b60:	f7ff f984 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002b64:	6178      	str	r0, [r7, #20]
 8002b66:	e014      	b.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b80:	f7ff f974 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002b84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b98:	d10b      	bne.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d919      	bls.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ba4:	d902      	bls.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e013      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e010      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d902      	bls.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bb8:	2303      	movs	r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e00a      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d102      	bne.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	e004      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d101      	bne.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022000 	.word	0x40022000

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c10:	2300      	movs	r3, #0
 8002c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c14:	2300      	movs	r3, #0
 8002c16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d031      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c2c:	d01a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c32:	d814      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c4a:	e00c      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f9de 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	74fb      	strb	r3, [r7, #19]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	494e      	ldr	r1, [pc, #312]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c82:	e001      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 809e 	beq.w	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fe48 	bl	800196c <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fe44 	bl	800196c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8002cf2:	e005      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d15a      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d019      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d4e:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d016      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fe04 	bl	800196c <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d66:	e00b      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fe00 	bl	800196c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d902      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	74fb      	strb	r3, [r7, #19]
            break;
 8002d7e:	e006      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ec      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da2:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002daa:	e009      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	74bb      	strb	r3, [r7, #18]
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc0:	7c7b      	ldrb	r3, [r7, #17]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a89      	ldr	r2, [pc, #548]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dde:	4b84      	ldr	r3, [pc, #528]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f023 0203 	bic.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4980      	ldr	r1, [pc, #512]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e00:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 020c 	bic.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	4978      	ldr	r1, [pc, #480]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e22:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	496f      	ldr	r1, [pc, #444]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	4967      	ldr	r1, [pc, #412]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e66:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	495e      	ldr	r1, [pc, #376]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	4956      	ldr	r1, [pc, #344]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d028      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ecc:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4945      	ldr	r1, [pc, #276]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eea:	d106      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef6:	60d3      	str	r3, [r2, #12]
 8002ef8:	e011      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f882 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	492d      	ldr	r1, [pc, #180]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4a:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a28      	ldr	r2, [pc, #160]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f54:	60d3      	str	r3, [r2, #12]
 8002f56:	e011      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f853 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2102      	movs	r1, #2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f830 	bl	8003014 <RCCEx_PLLSAI1_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003022:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800302e:	4b71      	ldr	r3, [pc, #452]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d10d      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
       ||
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003046:	4b6b      	ldr	r3, [pc, #428]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
       ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d047      	beq.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e044      	b.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d018      	beq.n	800309a <RCCEx_PLLSAI1_Config+0x86>
 8003068:	2b03      	cmp	r3, #3
 800306a:	d825      	bhi.n	80030b8 <RCCEx_PLLSAI1_Config+0xa4>
 800306c:	2b01      	cmp	r3, #1
 800306e:	d002      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0x62>
 8003070:	2b02      	cmp	r3, #2
 8003072:	d009      	beq.n	8003088 <RCCEx_PLLSAI1_Config+0x74>
 8003074:	e020      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003076:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e01a      	b.n	80030be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003088:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e013      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800309a:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030a6:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030b6:	e006      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e004      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	430b      	orrs	r3, r1
 80030e4:	4943      	ldr	r1, [pc, #268]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d17c      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe fc36 	bl	800196c <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003102:	e009      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003104:	f7fe fc32 	bl	800196c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]
        break;
 8003116:	e005      	b.n	8003124 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ef      	bne.n	8003104 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15f      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d110      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003138:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	0211      	lsls	r1, r2, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	06d2      	lsls	r2, r2, #27
 8003148:	430a      	orrs	r2, r1
 800314a:	492a      	ldr	r1, [pc, #168]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
 8003150:	e027      	b.n	80031a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d112      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	0211      	lsls	r1, r2, #8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6912      	ldr	r2, [r2, #16]
 800316e:	0852      	lsrs	r2, r2, #1
 8003170:	3a01      	subs	r2, #1
 8003172:	0552      	lsls	r2, r2, #21
 8003174:	430a      	orrs	r2, r1
 8003176:	491f      	ldr	r1, [pc, #124]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	610b      	str	r3, [r1, #16]
 800317c:	e011      	b.n	80031a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	0211      	lsls	r1, r2, #8
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6952      	ldr	r2, [r2, #20]
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0652      	lsls	r2, r2, #25
 800319a:	430a      	orrs	r2, r1
 800319c:	4915      	ldr	r1, [pc, #84]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fbdd 	bl	800196c <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b4:	e009      	b.n	80031ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b6:	f7fe fbd9 	bl	800196c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d902      	bls.n	80031ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	73fb      	strb	r3, [r7, #15]
          break;
 80031c8:	e005      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ef      	beq.n	80031b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000

080031f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e049      	b.n	800329e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f841 	bl	80032a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f000 f9dc 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e03b      	b.n	800334c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_TIM_Base_Start_IT+0x4e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d004      	beq.n	800330a <HAL_TIM_Base_Start_IT+0x4e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_TIM_Base_Start_IT+0xa0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d115      	bne.n	8003336 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_TIM_Base_Start_IT+0xa4>)
 8003312:	4013      	ands	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d015      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x8c>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d011      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	e008      	b.n	8003348 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e000      	b.n	800334a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003348:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014000 	.word	0x40014000
 8003360:	00010007 	.word	0x00010007

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f905 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8f7 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f908 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8db 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8cd 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8de 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0208 	mvn.w	r2, #8
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8b1 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8a3 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8b4 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0210 	mvn.w	r2, #16
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2208      	movs	r2, #8
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f887 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f879 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f88a 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0201 	mvn.w	r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd ffdc 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8de 	bl	80036d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8d1 	bl	80036e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f838 	bl	80035de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0220 	mvn.w	r2, #32
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f891 	bl	80036bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <TIM_Base_SetConfig+0xbc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0x20>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d108      	bne.n	8003626 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <TIM_Base_SetConfig+0xbc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0x52>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0x52>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <TIM_Base_SetConfig+0xc0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0x52>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_Base_SetConfig+0xc4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <TIM_Base_SetConfig+0xbc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_Base_SetConfig+0xa0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <TIM_Base_SetConfig+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0xa0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <TIM_Base_SetConfig+0xc4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d103      	bne.n	800369c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	615a      	str	r2, [r3, #20]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400

080036bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e040      	b.n	800378c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd ff00 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8c0 	bl	80038bc <UART_SetConfig>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e022      	b.n	800378c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fae0 	bl	8003d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb67 	bl	8003e58 <UART_CheckIdleState>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	f040 8082 	bne.w	80038b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_UART_Transmit+0x26>
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07a      	b.n	80038b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Transmit+0x38>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e073      	b.n	80038b4 <HAL_UART_Transmit+0x120>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2221      	movs	r2, #33	; 0x21
 80037e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e2:	f7fe f8c3 	bl	800196c <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d108      	bne.n	8003814 <HAL_UART_Transmit+0x80>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e003      	b.n	800381c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003824:	e02d      	b.n	8003882 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fb5a 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e039      	b.n	80038b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003852:	b292      	uxth	r2, r2
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3302      	adds	r3, #2
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e008      	b.n	8003870 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b292      	uxth	r2, r2
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1cb      	bne.n	8003826 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2140      	movs	r1, #64	; 0x40
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fb26 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e005      	b.n	80038b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b08a      	sub	sp, #40	; 0x28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	431a      	orrs	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4bb4      	ldr	r3, [pc, #720]	; (8003bbc <UART_SetConfig+0x300>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4aa9      	ldr	r2, [pc, #676]	; (8003bc0 <UART_SetConfig+0x304>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4313      	orrs	r3, r2
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4aa0      	ldr	r2, [pc, #640]	; (8003bc4 <UART_SetConfig+0x308>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d126      	bne.n	8003994 <UART_SetConfig+0xd8>
 8003946:	4ba0      	ldr	r3, [pc, #640]	; (8003bc8 <UART_SetConfig+0x30c>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b03      	cmp	r3, #3
 8003952:	d81b      	bhi.n	800398c <UART_SetConfig+0xd0>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <UART_SetConfig+0xa0>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800397d 	.word	0x0800397d
 8003964:	08003975 	.word	0x08003975
 8003968:	08003985 	.word	0x08003985
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e080      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003974:	2302      	movs	r3, #2
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e07c      	b.n	8003a76 <UART_SetConfig+0x1ba>
 800397c:	2304      	movs	r3, #4
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e078      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003984:	2308      	movs	r3, #8
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e074      	b.n	8003a76 <UART_SetConfig+0x1ba>
 800398c:	2310      	movs	r3, #16
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e070      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8c      	ldr	r2, [pc, #560]	; (8003bcc <UART_SetConfig+0x310>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d138      	bne.n	8003a10 <UART_SetConfig+0x154>
 800399e:	4b8a      	ldr	r3, [pc, #552]	; (8003bc8 <UART_SetConfig+0x30c>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d82d      	bhi.n	8003a08 <UART_SetConfig+0x14c>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0xf8>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003a09 	.word	0x08003a09
 80039c0:	08003a09 	.word	0x08003a09
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	080039f1 	.word	0x080039f1
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e042      	b.n	8003a76 <UART_SetConfig+0x1ba>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e03e      	b.n	8003a76 <UART_SetConfig+0x1ba>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e03a      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e036      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e032      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <UART_SetConfig+0x304>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d12a      	bne.n	8003a70 <UART_SetConfig+0x1b4>
 8003a1a:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <UART_SetConfig+0x30c>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a28:	d01a      	beq.n	8003a60 <UART_SetConfig+0x1a4>
 8003a2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2e:	d81b      	bhi.n	8003a68 <UART_SetConfig+0x1ac>
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a34:	d00c      	beq.n	8003a50 <UART_SetConfig+0x194>
 8003a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3a:	d815      	bhi.n	8003a68 <UART_SetConfig+0x1ac>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <UART_SetConfig+0x18c>
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a44:	d008      	beq.n	8003a58 <UART_SetConfig+0x19c>
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x1ac>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e012      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e00e      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e00a      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e006      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e002      	b.n	8003a76 <UART_SetConfig+0x1ba>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a51      	ldr	r2, [pc, #324]	; (8003bc0 <UART_SetConfig+0x304>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d17a      	bne.n	8003b76 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d824      	bhi.n	8003ad2 <UART_SetConfig+0x216>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <UART_SetConfig+0x1d4>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ac3 	.word	0x08003ac3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ad3 	.word	0x08003ad3
 8003ab0:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe ffea 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003ab8:	61f8      	str	r0, [r7, #28]
        break;
 8003aba:	e010      	b.n	8003ade <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <UART_SetConfig+0x314>)
 8003abe:	61fb      	str	r3, [r7, #28]
        break;
 8003ac0:	e00d      	b.n	8003ade <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe ff4b 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003ac6:	61f8      	str	r0, [r7, #28]
        break;
 8003ac8:	e009      	b.n	8003ade <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	61fb      	str	r3, [r7, #28]
        break;
 8003ad0:	e005      	b.n	8003ade <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8107 	beq.w	8003cf4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d305      	bcc.n	8003b02 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d903      	bls.n	8003b0a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b08:	e0f4      	b.n	8003cf4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	461c      	mov	r4, r3
 8003b10:	4615      	mov	r5, r2
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	022b      	lsls	r3, r5, #8
 8003b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b20:	0222      	lsls	r2, r4, #8
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	6849      	ldr	r1, [r1, #4]
 8003b26:	0849      	lsrs	r1, r1, #1
 8003b28:	2000      	movs	r0, #0
 8003b2a:	4688      	mov	r8, r1
 8003b2c:	4681      	mov	r9, r0
 8003b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8003b32:	eb43 0b09 	adc.w	fp, r3, r9
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b44:	4650      	mov	r0, sl
 8003b46:	4659      	mov	r1, fp
 8003b48:	f7fd f82e 	bl	8000ba8 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5a:	d308      	bcc.n	8003b6e <UART_SetConfig+0x2b2>
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b62:	d204      	bcs.n	8003b6e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e0c2      	b.n	8003cf4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b74:	e0be      	b.n	8003cf4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d16a      	bne.n	8003c56 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d834      	bhi.n	8003bf2 <UART_SetConfig+0x336>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x2d4>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bd5 	.word	0x08003bd5
 8003b98:	08003bdd 	.word	0x08003bdd
 8003b9c:	08003bf3 	.word	0x08003bf3
 8003ba0:	08003be3 	.word	0x08003be3
 8003ba4:	08003bf3 	.word	0x08003bf3
 8003ba8:	08003bf3 	.word	0x08003bf3
 8003bac:	08003bf3 	.word	0x08003bf3
 8003bb0:	08003beb 	.word	0x08003beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe ff6a 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003bb8:	61f8      	str	r0, [r7, #28]
        break;
 8003bba:	e020      	b.n	8003bfe <UART_SetConfig+0x342>
 8003bbc:	efff69f3 	.word	0xefff69f3
 8003bc0:	40008000 	.word	0x40008000
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40004400 	.word	0x40004400
 8003bd0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7fe ff70 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	61f8      	str	r0, [r7, #28]
        break;
 8003bda:	e010      	b.n	8003bfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <UART_SetConfig+0x454>)
 8003bde:	61fb      	str	r3, [r7, #28]
        break;
 8003be0:	e00d      	b.n	8003bfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe febb 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003be6:	61f8      	str	r0, [r7, #28]
        break;
 8003be8:	e009      	b.n	8003bfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bee:	61fb      	str	r3, [r7, #28]
        break;
 8003bf0:	e005      	b.n	8003bfe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d077      	beq.n	8003cf4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005a      	lsls	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d916      	bls.n	8003c4e <UART_SetConfig+0x392>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c26:	d212      	bcs.n	8003c4e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f023 030f 	bic.w	r3, r3, #15
 8003c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	8afb      	ldrh	r3, [r7, #22]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	8afa      	ldrh	r2, [r7, #22]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e052      	b.n	8003cf4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c54:	e04e      	b.n	8003cf4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d827      	bhi.n	8003cae <UART_SetConfig+0x3f2>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x3a8>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe ff00 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e014      	b.n	8003cba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe ff12 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003c94:	61f8      	str	r0, [r7, #28]
        break;
 8003c96:	e010      	b.n	8003cba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <UART_SetConfig+0x454>)
 8003c9a:	61fb      	str	r3, [r7, #28]
        break;
 8003c9c:	e00d      	b.n	8003cba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe fe5d 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003ca2:	61f8      	str	r0, [r7, #28]
        break;
 8003ca4:	e009      	b.n	8003cba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	61fb      	str	r3, [r7, #28]
        break;
 8003cac:	e005      	b.n	8003cba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d019      	beq.n	8003cf4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085a      	lsrs	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	441a      	add	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d909      	bls.n	8003cee <UART_SetConfig+0x432>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d205      	bcs.n	8003cee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e002      	b.n	8003cf4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	00f42400 	.word	0x00f42400

08003d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d10a      	bne.n	8003e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e68:	f7fd fd80 	bl	800196c <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d10e      	bne.n	8003e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f82d 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e023      	b.n	8003ee2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d10e      	bne.n	8003ec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f817 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00d      	b.n	8003ee2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b09c      	sub	sp, #112	; 0x70
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	e0a5      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	f000 80a1 	beq.w	8004048 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fd fd31 	bl	800196c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d13e      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f30:	667b      	str	r3, [r7, #100]	; 0x64
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	663b      	str	r3, [r7, #96]	; 0x60
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e067      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d04f      	beq.n	8004048 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb6:	d147      	bne.n	8004048 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	613b      	str	r3, [r7, #16]
   return(result);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	66bb      	str	r3, [r7, #104]	; 0x68
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004014:	623a      	str	r2, [r7, #32]
 8004016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	61bb      	str	r3, [r7, #24]
   return(result);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e010      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	f43f af4a 	beq.w	8003efc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3770      	adds	r7, #112	; 0x70
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <__NVIC_SetPriority>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	; (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <SysTick_Handler+0x1c>)
 80040ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040d0:	f001 fd92 	bl	8005bf8 <xTaskGetSchedulerState>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040da:	f002 fb7d 	bl	80067d8 <xPortSysTickHandler>
  }
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000e010 	.word	0xe000e010

080040e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040ec:	2100      	movs	r1, #0
 80040ee:	f06f 0004 	mvn.w	r0, #4
 80040f2:	f7ff ffbf 	bl	8004074 <__NVIC_SetPriority>
#endif
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004102:	f3ef 8305 	mrs	r3, IPSR
 8004106:	603b      	str	r3, [r7, #0]
  return(result);
 8004108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800410e:	f06f 0305 	mvn.w	r3, #5
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	e00c      	b.n	8004130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <osKernelInitialize+0x44>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <osKernelInitialize+0x44>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	e002      	b.n	8004130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004130:	687b      	ldr	r3, [r7, #4]
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20002454 	.word	0x20002454

08004144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414a:	f3ef 8305 	mrs	r3, IPSR
 800414e:	603b      	str	r3, [r7, #0]
  return(result);
 8004150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004156:	f06f 0305 	mvn.w	r3, #5
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	e010      	b.n	8004180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <osKernelStart+0x48>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d109      	bne.n	800417a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004166:	f7ff ffbf 	bl	80040e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800416a:	4b08      	ldr	r3, [pc, #32]	; (800418c <osKernelStart+0x48>)
 800416c:	2202      	movs	r2, #2
 800416e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004170:	f001 f89e 	bl	80052b0 <vTaskStartScheduler>
      stat = osOK;
 8004174:	2300      	movs	r3, #0
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e002      	b.n	8004180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004180:	687b      	ldr	r3, [r7, #4]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20002454 	.word	0x20002454

08004190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	; 0x38
 8004194:	af04      	add	r7, sp, #16
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a0:	f3ef 8305 	mrs	r3, IPSR
 80041a4:	617b      	str	r3, [r7, #20]
  return(result);
 80041a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d17e      	bne.n	80042aa <osThreadNew+0x11a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d07b      	beq.n	80042aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041b6:	2318      	movs	r3, #24
 80041b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d045      	beq.n	8004256 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <osThreadNew+0x48>
        name = attr->name;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <osThreadNew+0x6e>
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b38      	cmp	r3, #56	; 0x38
 80041f0:	d805      	bhi.n	80041fe <osThreadNew+0x6e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <osThreadNew+0x72>
        return (NULL);
 80041fe:	2300      	movs	r3, #0
 8004200:	e054      	b.n	80042ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <osThreadNew+0xa8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b5b      	cmp	r3, #91	; 0x5b
 8004220:	d90a      	bls.n	8004238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <osThreadNew+0xa8>
        mem = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	e010      	b.n	800425a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <osThreadNew+0xca>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <osThreadNew+0xca>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <osThreadNew+0xca>
          mem = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e001      	b.n	800425a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d110      	bne.n	8004282 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004268:	9202      	str	r2, [sp, #8]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6a3a      	ldr	r2, [r7, #32]
 8004274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fe44 	bl	8004f04 <xTaskCreateStatic>
 800427c:	4603      	mov	r3, r0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e013      	b.n	80042aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d110      	bne.n	80042aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	b29a      	uxth	r2, r3
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fe8f 	bl	8004fbe <xTaskCreate>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <osThreadNew+0x11a>
            hTask = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042aa:	693b      	ldr	r3, [r7, #16]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c0:	f3ef 8305 	mrs	r3, IPSR
 80042c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042c6:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <osThreadGetName+0x1e>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <osThreadGetName+0x24>
    name = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e003      	b.n	80042e0 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 80042d8:	6938      	ldr	r0, [r7, #16]
 80042da:	f001 f90b 	bl	80054f4 <pcTaskGetName>
 80042de:	6178      	str	r0, [r7, #20]
  }

  return (name);
 80042e0:	697b      	ldr	r3, [r7, #20]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f6:	f3ef 8305 	mrs	r3, IPSR
 80042fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <osThreadGetStackSpace+0x1e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <osThreadGetStackSpace+0x24>
    sz = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e005      	b.n	800431a <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800430e:	6938      	ldr	r0, [r7, #16]
 8004310:	f001 fc06 	bl	8005b20 <uxTaskGetStackHighWaterMark>
 8004314:	4603      	mov	r3, r0
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 800431a:	697b      	ldr	r3, [r7, #20]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800432c:	f3ef 8305 	mrs	r3, IPSR
 8004330:	60bb      	str	r3, [r7, #8]
  return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <osDelay+0x1c>
    stat = osErrorISR;
 8004338:	f06f 0305 	mvn.w	r3, #5
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e007      	b.n	8004350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 ff7c 	bl	8005248 <vTaskDelay>
    }
  }

  return (stat);
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <vApplicationGetIdleTaskMemory+0x2c>)
 800436c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a06      	ldr	r2, [pc, #24]	; (800438c <vApplicationGetIdleTaskMemory+0x30>)
 8004372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20002458 	.word	0x20002458
 800438c:	200024b4 	.word	0x200024b4

08004390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <vApplicationGetTimerTaskMemory+0x2c>)
 80043a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <vApplicationGetTimerTaskMemory+0x30>)
 80043a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	200026b4 	.word	0x200026b4
 80043c0:	20002710 	.word	0x20002710

080043c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f103 0208 	add.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f103 0208 	add.w	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f103 0208 	add.w	r2, r3, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d103      	bne.n	8004486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e00c      	b.n	80044a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3308      	adds	r3, #8
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e002      	b.n	8004494 <vListInsert+0x2e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	d2f6      	bcs.n	800448e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6852      	ldr	r2, [r2, #4]
 80044f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d103      	bne.n	800450c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004556:	f002 f8ad 	bl	80066b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	3b01      	subs	r3, #1
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	441a      	add	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d114      	bne.n	80045d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01a      	beq.n	80045ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3310      	adds	r3, #16
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f927 	bl	800580c <xTaskRemoveFromEventList>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <xQueueGenericReset+0xcc>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	e009      	b.n	80045ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3310      	adds	r3, #16
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fef2 	bl	80043c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3324      	adds	r3, #36	; 0x24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff feed 	bl	80043c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f002 f893 	bl	8006714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ee:	2301      	movs	r3, #1
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	; 0x38
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <xQueueGenericCreateStatic+0x52>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <xQueueGenericCreateStatic+0x56>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGenericCreateStatic+0x58>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	623b      	str	r3, [r7, #32]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <xQueueGenericCreateStatic+0x7e>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <xQueueGenericCreateStatic+0x82>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericCreateStatic+0x84>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61fb      	str	r3, [r7, #28]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800469a:	2350      	movs	r3, #80	; 0x50
 800469c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d00a      	beq.n	80046ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	61bb      	str	r3, [r7, #24]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f805 	bl	80046ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e002      	b.n	800470e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800471a:	2101      	movs	r1, #1
 800471c:	69b8      	ldr	r0, [r7, #24]
 800471e:	f7ff ff05 	bl	800452c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08e      	sub	sp, #56	; 0x38
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004742:	2300      	movs	r3, #0
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericSend+0x32>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <xQueueGenericSend+0x40>
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <xQueueGenericSend+0x44>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <xQueueGenericSend+0x46>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <xQueueGenericSend+0x60>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSend+0x6e>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <xQueueGenericSend+0x72>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <xQueueGenericSend+0x74>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047c2:	f001 fa19 	bl	8005bf8 <xTaskGetSchedulerState>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <xQueueGenericSend+0x9e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSend+0xa2>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSend+0xa4>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	61fb      	str	r3, [r7, #28]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047f2:	f001 ff5f 	bl	80066b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <xQueueGenericSend+0xd4>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d129      	bne.n	800485c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fa0b 	bl	8004c28 <prvCopyDataToQueue>
 8004812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	3324      	adds	r3, #36	; 0x24
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fff3 	bl	800580c <xTaskRemoveFromEventList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800482c:	4b3f      	ldr	r3, [pc, #252]	; (800492c <xQueueGenericSend+0x1f8>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	e00a      	b.n	8004854 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <xQueueGenericSend+0x1f8>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004854:	f001 ff5e 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	e063      	b.n	8004924 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004862:	f001 ff57 	bl	8006714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004866:	2300      	movs	r3, #0
 8004868:	e05c      	b.n	8004924 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f82d 	bl	80058d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487e:	f001 ff49 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004882:	f000 fd7b 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004886:	f001 ff15 	bl	80066b4 <vPortEnterCritical>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004890:	b25b      	sxtb	r3, r3
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d103      	bne.n	80048a0 <xQueueGenericSend+0x16c>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d103      	bne.n	80048b6 <xQueueGenericSend+0x182>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	f001 ff2d 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ba:	1d3a      	adds	r2, r7, #4
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f81c 	bl	8005900 <xTaskCheckForTimeOut>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d124      	bne.n	8004918 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d0:	f000 faa2 	bl	8004e18 <prvIsQueueFull>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	3310      	adds	r3, #16
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ff42 	bl	800576c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ea:	f000 fa2d 	bl	8004d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ee:	f000 fd53 	bl	8005398 <xTaskResumeAll>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af7c 	bne.w	80047f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <xQueueGenericSend+0x1f8>)
 80048fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	e772      	b.n	80047f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490e:	f000 fa1b 	bl	8004d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004912:	f000 fd41 	bl	8005398 <xTaskResumeAll>
 8004916:	e76c      	b.n	80047f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491a:	f000 fa15 	bl	8004d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491e:	f000 fd3b 	bl	8005398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004924:	4618      	mov	r0, r3
 8004926:	3738      	adds	r7, #56	; 0x38
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b090      	sub	sp, #64	; 0x40
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <xQueueGenericSendFromISR+0x3c>
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <xQueueGenericSendFromISR+0x40>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xQueueGenericSendFromISR+0x42>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <xQueueGenericSendFromISR+0x6a>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <xQueueGenericSendFromISR+0x6e>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSendFromISR+0x70>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ba:	f001 ff5d 	bl	8006878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049be:	f3ef 8211 	mrs	r2, BASEPRI
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	61fa      	str	r2, [r7, #28]
 80049d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <xQueueGenericSendFromISR+0xbc>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d12f      	bne.n	8004a4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a02:	f000 f911 	bl	8004c28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d112      	bne.n	8004a36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d016      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fef5 	bl	800580c <xTaskRemoveFromEventList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e007      	b.n	8004a46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	b25a      	sxtb	r2, r3
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a4a:	e001      	b.n	8004a50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3740      	adds	r7, #64	; 0x40
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xQueueReceive+0x30>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	623b      	str	r3, [r7, #32]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <xQueueReceive+0x3e>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <xQueueReceive+0x42>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueueReceive+0x44>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueReceive+0x5e>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	61fb      	str	r3, [r7, #28]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ac6:	f001 f897 	bl	8005bf8 <xTaskGetSchedulerState>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xQueueReceive+0x6e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <xQueueReceive+0x72>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xQueueReceive+0x74>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueueReceive+0x8e>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	61bb      	str	r3, [r7, #24]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004af6:	f001 fddd 	bl	80066b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01f      	beq.n	8004b46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 f8f7 	bl	8004cfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	1e5a      	subs	r2, r3, #1
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	3310      	adds	r3, #16
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fe72 	bl	800580c <xTaskRemoveFromEventList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <xQueueReceive+0x1bc>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b3e:	f001 fde9 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e069      	b.n	8004c1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b4c:	f001 fde2 	bl	8006714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e062      	b.n	8004c1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 feb8 	bl	80058d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b68:	f001 fdd4 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b6c:	f000 fc06 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b70:	f001 fda0 	bl	80066b4 <vPortEnterCritical>
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d103      	bne.n	8004b8a <xQueueReceive+0x122>
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d103      	bne.n	8004ba0 <xQueueReceive+0x138>
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba0:	f001 fdb8 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba4:	1d3a      	adds	r2, r7, #4
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fea7 	bl	8005900 <xTaskCheckForTimeOut>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d123      	bne.n	8004c00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bba:	f000 f917 	bl	8004dec <prvIsQueueEmpty>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d017      	beq.n	8004bf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	3324      	adds	r3, #36	; 0x24
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fdcd 	bl	800576c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd4:	f000 f8b8 	bl	8004d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bd8:	f000 fbde 	bl	8005398 <xTaskResumeAll>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d189      	bne.n	8004af6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <xQueueReceive+0x1bc>)
 8004be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	e780      	b.n	8004af6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf6:	f000 f8a7 	bl	8004d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bfa:	f000 fbcd 	bl	8005398 <xTaskResumeAll>
 8004bfe:	e77a      	b.n	8004af6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f000 f8a1 	bl	8004d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c06:	f000 fbc7 	bl	8005398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0c:	f000 f8ee 	bl	8004dec <prvIsQueueEmpty>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f43f af6f 	beq.w	8004af6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d14d      	bne.n	8004cea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 ffee 	bl	8005c34 <xTaskPriorityDisinherit>
 8004c58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e043      	b.n	8004cea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d119      	bne.n	8004c9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6858      	ldr	r0, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	f002 f854 	bl	8006d20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d32b      	bcc.n	8004cea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	e026      	b.n	8004cea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68d8      	ldr	r0, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	f002 f83a 	bl	8006d20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	425b      	negs	r3, r3
 8004cb6:	441a      	add	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d207      	bcs.n	8004cd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d105      	bne.n	8004cea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cf2:	697b      	ldr	r3, [r7, #20]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d303      	bcc.n	8004d30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68d9      	ldr	r1, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6838      	ldr	r0, [r7, #0]
 8004d3c:	f001 fff0 	bl	8006d20 <memcpy>
	}
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d50:	f001 fcb0 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d5c:	e011      	b.n	8004d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3324      	adds	r3, #36	; 0x24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fd4e 	bl	800580c <xTaskRemoveFromEventList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d76:	f000 fe25 	bl	80059c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dce9      	bgt.n	8004d5e <prvUnlockQueue+0x16>
 8004d8a:	e000      	b.n	8004d8e <prvUnlockQueue+0x46>
					break;
 8004d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d96:	f001 fcbd 	bl	8006714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d9a:	f001 fc8b 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004da6:	e011      	b.n	8004dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3310      	adds	r3, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fd29 	bl	800580c <xTaskRemoveFromEventList>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dc0:	f000 fe00 	bl	80059c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dc4:	7bbb      	ldrb	r3, [r7, #14]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dce9      	bgt.n	8004da8 <prvUnlockQueue+0x60>
 8004dd4:	e000      	b.n	8004dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	22ff      	movs	r2, #255	; 0xff
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004de0:	f001 fc98 	bl	8006714 <vPortExitCritical>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df4:	f001 fc5e 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e001      	b.n	8004e0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e0a:	f001 fc83 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e20:	f001 fc48 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d102      	bne.n	8004e36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e001      	b.n	8004e3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f001 fc6b 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e014      	b.n	8004e82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e58:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e64:	490c      	ldr	r1, [pc, #48]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e7a:	e006      	b.n	8004e8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b07      	cmp	r3, #7
 8004e86:	d9e7      	bls.n	8004e58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20002b10 	.word	0x20002b10

08004e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eac:	f001 fc02 	bl	80066b4 <vPortEnterCritical>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d103      	bne.n	8004ec6 <vQueueWaitForMessageRestricted+0x2a>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d103      	bne.n	8004edc <vQueueWaitForMessageRestricted+0x40>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	f001 fc1a 	bl	8006714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3324      	adds	r3, #36	; 0x24
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fc5f 	bl	80057b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f7ff ff26 	bl	8004d48 <prvUnlockQueue>
	}
 8004efc:	bf00      	nop
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	; 0x38
 8004f08:	af04      	add	r7, sp, #16
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	623b      	str	r3, [r7, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xTaskCreateStatic+0x46>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61fb      	str	r3, [r7, #28]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f4a:	235c      	movs	r3, #92	; 0x5c
 8004f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b5c      	cmp	r3, #92	; 0x5c
 8004f52:	d00a      	beq.n	8004f6a <xTaskCreateStatic+0x66>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61bb      	str	r3, [r7, #24]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01e      	beq.n	8004fb0 <xTaskCreateStatic+0xac>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f850 	bl	8005048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004faa:	f000 f8dd 	bl	8005168 <prvAddNewTaskToReadyList>
 8004fae:	e001      	b.n	8004fb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fb4:	697b      	ldr	r3, [r7, #20]
	}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b08c      	sub	sp, #48	; 0x30
 8004fc2:	af04      	add	r7, sp, #16
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fc90 	bl	80068f8 <pvPortMalloc>
 8004fd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fe0:	205c      	movs	r0, #92	; 0x5c
 8004fe2:	f001 fc89 	bl	80068f8 <pvPortMalloc>
 8004fe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff4:	e005      	b.n	8005002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f001 fd4a 	bl	8006a90 <vPortFree>
 8004ffc:	e001      	b.n	8005002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	2300      	movs	r3, #0
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f80e 	bl	8005048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800502c:	69f8      	ldr	r0, [r7, #28]
 800502e:	f000 f89b 	bl	8005168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	e002      	b.n	800503e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005038:	f04f 33ff 	mov.w	r3, #4294967295
 800503c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800503e:	69bb      	ldr	r3, [r7, #24]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	21a5      	movs	r1, #165	; 0xa5
 8005062:	f001 fe6b 	bl	8006d3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005070:	3b01      	subs	r3, #1
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617b      	str	r3, [r7, #20]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01f      	beq.n	80050e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e012      	b.n	80050d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	7819      	ldrb	r1, [r3, #0]
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	3334      	adds	r3, #52	; 0x34
 80050bc:	460a      	mov	r2, r1
 80050be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d9e9      	bls.n	80050ac <prvInitialiseNewTask+0x64>
 80050d8:	e000      	b.n	80050dc <prvInitialiseNewTask+0x94>
			{
				break;
 80050da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e4:	e003      	b.n	80050ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	2b37      	cmp	r3, #55	; 0x37
 80050f2:	d901      	bls.n	80050f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050f4:	2337      	movs	r3, #55	; 0x37
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f978 	bl	8004404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	3318      	adds	r3, #24
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff f973 	bl	8004404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	69b8      	ldr	r0, [r7, #24]
 8005148:	f001 f984 	bl	8006454 <pxPortInitialiseStack>
 800514c:	4602      	mov	r2, r0
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515e:	bf00      	nop
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005170:	f001 faa0 	bl	80066b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005174:	4b2d      	ldr	r3, [pc, #180]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4a2c      	ldr	r2, [pc, #176]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 800517c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800517e:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800518c:	4b27      	ldr	r3, [pc, #156]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d110      	bne.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005194:	f000 fc3a 	bl	8005a0c <prvInitialiseTaskLists>
 8005198:	e00d      	b.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <prvAddNewTaskToReadyList+0xcc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d802      	bhi.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051b0:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <prvAddNewTaskToReadyList+0xd4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d903      	bls.n	80051dc <prvAddNewTaskToReadyList+0x74>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a18      	ldr	r2, [pc, #96]	; (800523c <prvAddNewTaskToReadyList+0xd4>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <prvAddNewTaskToReadyList+0xd8>)
 80051ea:	441a      	add	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7ff f913 	bl	800441e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051f8:	f001 fa8c 	bl	8006714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <prvAddNewTaskToReadyList+0xcc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00e      	beq.n	8005222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d207      	bcs.n	8005222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <prvAddNewTaskToReadyList+0xdc>)
 8005214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20003024 	.word	0x20003024
 8005230:	20002b50 	.word	0x20002b50
 8005234:	20003030 	.word	0x20003030
 8005238:	20003040 	.word	0x20003040
 800523c:	2000302c 	.word	0x2000302c
 8005240:	20002b54 	.word	0x20002b54
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d017      	beq.n	800528a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <vTaskDelay+0x60>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <vTaskDelay+0x30>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60bb      	str	r3, [r7, #8]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005278:	f000 f880 	bl	800537c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800527c:	2100      	movs	r1, #0
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fd46 	bl	8005d10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005284:	f000 f888 	bl	8005398 <xTaskResumeAll>
 8005288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <vTaskDelay+0x64>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2000304c 	.word	0x2000304c
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052be:	463a      	mov	r2, r7
 80052c0:	1d39      	adds	r1, r7, #4
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f848 	bl	800435c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	9202      	str	r2, [sp, #8]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	460a      	mov	r2, r1
 80052de:	4921      	ldr	r1, [pc, #132]	; (8005364 <vTaskStartScheduler+0xb4>)
 80052e0:	4821      	ldr	r0, [pc, #132]	; (8005368 <vTaskStartScheduler+0xb8>)
 80052e2:	f7ff fe0f 	bl	8004f04 <xTaskCreateStatic>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a20      	ldr	r2, [pc, #128]	; (800536c <vTaskStartScheduler+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052ec:	4b1f      	ldr	r3, [pc, #124]	; (800536c <vTaskStartScheduler+0xbc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e001      	b.n	80052fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005304:	f000 fd58 	bl	8005db8 <xTimerCreateTimerTask>
 8005308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d116      	bne.n	800533e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
}
 8005322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <vTaskStartScheduler+0xc0>)
 8005326:	f04f 32ff 	mov.w	r2, #4294967295
 800532a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <vTaskStartScheduler+0xc4>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <vTaskStartScheduler+0xc8>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005338:	f001 f91a 	bl	8006570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800533c:	e00e      	b.n	800535c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d10a      	bne.n	800535c <vTaskStartScheduler+0xac>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60fb      	str	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <vTaskStartScheduler+0xaa>
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08009890 	.word	0x08009890
 8005368:	080059dd 	.word	0x080059dd
 800536c:	20003048 	.word	0x20003048
 8005370:	20003044 	.word	0x20003044
 8005374:	20003030 	.word	0x20003030
 8005378:	20003028 	.word	0x20003028

0800537c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <vTaskSuspendAll+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a03      	ldr	r2, [pc, #12]	; (8005394 <vTaskSuspendAll+0x18>)
 8005388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	2000304c 	.word	0x2000304c

08005398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <xTaskResumeAll+0x118>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053c4:	f001 f976 	bl	80066b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <xTaskResumeAll+0x118>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d162      	bne.n	80054a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05e      	beq.n	80054a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e2:	e02f      	b.n	8005444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <xTaskResumeAll+0x120>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3318      	adds	r3, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f871 	bl	80044d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f86c 	bl	80044d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <xTaskResumeAll+0x124>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <xTaskResumeAll+0x7c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <xTaskResumeAll+0x124>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <xTaskResumeAll+0x128>)
 8005422:	441a      	add	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fff7 	bl	800441e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <xTaskResumeAll+0x12c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <xTaskResumeAll+0x130>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <xTaskResumeAll+0x120>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1cb      	bne.n	80053e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005452:	f000 fbb1 	bl	8005bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <xTaskResumeAll+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005462:	f000 f86b 	bl	800553c <xTaskIncrementTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800546c:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <xTaskResumeAll+0x130>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3b01      	subs	r3, #1
 8005476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <xTaskResumeAll+0x134>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xTaskResumeAll+0x130>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <xTaskResumeAll+0x138>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f001 f938 	bl	8006714 <vPortExitCritical>

	return xAlreadyYielded;
 80054a4:	68bb      	ldr	r3, [r7, #8]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	2000304c 	.word	0x2000304c
 80054b4:	20003024 	.word	0x20003024
 80054b8:	20002fe4 	.word	0x20002fe4
 80054bc:	2000302c 	.word	0x2000302c
 80054c0:	20002b54 	.word	0x20002b54
 80054c4:	20002b50 	.word	0x20002b50
 80054c8:	20003038 	.word	0x20003038
 80054cc:	20003034 	.word	0x20003034
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <xTaskGetTickCount+0x1c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054e0:	687b      	ldr	r3, [r7, #4]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20003028 	.word	0x20003028

080054f4 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <pcTaskGetName+0x14>
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <pcTaskGetName+0x44>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	e000      	b.n	800550a <pcTaskGetName+0x16>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <pcTaskGetName+0x34>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60bb      	str	r3, [r7, #8]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3334      	adds	r3, #52	; 0x34
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20002b50 	.word	0x20002b50

0800553c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005546:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <xTaskIncrementTick+0x148>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 808f 	bne.w	800566e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005550:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <xTaskIncrementTick+0x14c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005558:	4a4b      	ldr	r2, [pc, #300]	; (8005688 <xTaskIncrementTick+0x14c>)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d120      	bne.n	80055a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005564:	4b49      	ldr	r3, [pc, #292]	; (800568c <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <xTaskIncrementTick+0x48>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xTaskIncrementTick+0x46>
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <xTaskIncrementTick+0x150>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <xTaskIncrementTick+0x154>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a3f      	ldr	r2, [pc, #252]	; (800568c <xTaskIncrementTick+0x150>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <xTaskIncrementTick+0x154>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b3e      	ldr	r3, [pc, #248]	; (8005694 <xTaskIncrementTick+0x158>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <xTaskIncrementTick+0x158>)
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	f000 fb09 	bl	8005bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055a6:	4b3c      	ldr	r3, [pc, #240]	; (8005698 <xTaskIncrementTick+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d349      	bcc.n	8005644 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b0:	4b36      	ldr	r3, [pc, #216]	; (800568c <xTaskIncrementTick+0x150>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ba:	4b37      	ldr	r3, [pc, #220]	; (8005698 <xTaskIncrementTick+0x15c>)
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	601a      	str	r2, [r3, #0]
					break;
 80055c2:	e03f      	b.n	8005644 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <xTaskIncrementTick+0x150>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d203      	bcs.n	80055e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055dc:	4a2e      	ldr	r2, [pc, #184]	; (8005698 <xTaskIncrementTick+0x15c>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e2:	e02f      	b.n	8005644 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe ff75 	bl	80044d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3318      	adds	r3, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe ff6c 	bl	80044d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <xTaskIncrementTick+0x160>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <xTaskIncrementTick+0xd8>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a22      	ldr	r2, [pc, #136]	; (800569c <xTaskIncrementTick+0x160>)
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <xTaskIncrementTick+0x164>)
 8005622:	441a      	add	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fe fef7 	bl	800441e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <xTaskIncrementTick+0x168>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	429a      	cmp	r2, r3
 800563c:	d3b8      	bcc.n	80055b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800563e:	2301      	movs	r3, #1
 8005640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005642:	e7b5      	b.n	80055b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005644:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <xTaskIncrementTick+0x168>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4915      	ldr	r1, [pc, #84]	; (80056a0 <xTaskIncrementTick+0x164>)
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d901      	bls.n	8005660 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <xTaskIncrementTick+0x16c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e004      	b.n	8005678 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <xTaskIncrementTick+0x170>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <xTaskIncrementTick+0x170>)
 8005676:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005678:	697b      	ldr	r3, [r7, #20]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000304c 	.word	0x2000304c
 8005688:	20003028 	.word	0x20003028
 800568c:	20002fdc 	.word	0x20002fdc
 8005690:	20002fe0 	.word	0x20002fe0
 8005694:	2000303c 	.word	0x2000303c
 8005698:	20003044 	.word	0x20003044
 800569c:	2000302c 	.word	0x2000302c
 80056a0:	20002b54 	.word	0x20002b54
 80056a4:	20002b50 	.word	0x20002b50
 80056a8:	20003038 	.word	0x20003038
 80056ac:	20003034 	.word	0x20003034

080056b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <vTaskSwitchContext+0xa8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056be:	4b27      	ldr	r3, [pc, #156]	; (800575c <vTaskSwitchContext+0xac>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056c4:	e041      	b.n	800574a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056c6:	4b25      	ldr	r3, [pc, #148]	; (800575c <vTaskSwitchContext+0xac>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056cc:	4b24      	ldr	r3, [pc, #144]	; (8005760 <vTaskSwitchContext+0xb0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e010      	b.n	80056f6 <vTaskSwitchContext+0x46>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	607b      	str	r3, [r7, #4]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <vTaskSwitchContext+0x3e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	491b      	ldr	r1, [pc, #108]	; (8005764 <vTaskSwitchContext+0xb4>)
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0e4      	beq.n	80056d4 <vTaskSwitchContext+0x24>
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <vTaskSwitchContext+0xb4>)
 8005716:	4413      	add	r3, r2
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3308      	adds	r3, #8
 800572c:	429a      	cmp	r2, r3
 800572e:	d104      	bne.n	800573a <vTaskSwitchContext+0x8a>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a09      	ldr	r2, [pc, #36]	; (8005768 <vTaskSwitchContext+0xb8>)
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4a06      	ldr	r2, [pc, #24]	; (8005760 <vTaskSwitchContext+0xb0>)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	2000304c 	.word	0x2000304c
 800575c:	20003038 	.word	0x20003038
 8005760:	2000302c 	.word	0x2000302c
 8005764:	20002b54 	.word	0x20002b54
 8005768:	20002b50 	.word	0x20002b50

0800576c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <vTaskPlaceOnEventList+0x44>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3318      	adds	r3, #24
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe fe63 	bl	8004466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057a0:	2101      	movs	r1, #1
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f000 fab4 	bl	8005d10 <prvAddCurrentTaskToDelayedList>
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20002b50 	.word	0x20002b50

080057b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	617b      	str	r3, [r7, #20]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <vTaskPlaceOnEventListRestricted+0x54>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7fe fe1a 	bl	800441e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	f000 fa89 	bl	8005d10 <prvAddCurrentTaskToDelayedList>
	}
 80057fe:	bf00      	nop
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20002b50 	.word	0x20002b50

0800580c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60fb      	str	r3, [r7, #12]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3318      	adds	r3, #24
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fe4b 	bl	80044d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <xTaskRemoveFromEventList+0xb0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d11d      	bne.n	8005886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fe42 	bl	80044d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <xTaskRemoveFromEventList+0xb4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d903      	bls.n	8005868 <xTaskRemoveFromEventList+0x5c>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <xTaskRemoveFromEventList+0xb4>)
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <xTaskRemoveFromEventList+0xb8>)
 8005876:	441a      	add	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f7fe fdcd 	bl	800441e <vListInsertEnd>
 8005884:	e005      	b.n	8005892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3318      	adds	r3, #24
 800588a:	4619      	mov	r1, r3
 800588c:	480e      	ldr	r0, [pc, #56]	; (80058c8 <xTaskRemoveFromEventList+0xbc>)
 800588e:	f7fe fdc6 	bl	800441e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <xTaskRemoveFromEventList+0xc0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d905      	bls.n	80058ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <xTaskRemoveFromEventList+0xc4>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e001      	b.n	80058b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000304c 	.word	0x2000304c
 80058c0:	2000302c 	.word	0x2000302c
 80058c4:	20002b54 	.word	0x20002b54
 80058c8:	20002fe4 	.word	0x20002fe4
 80058cc:	20002b50 	.word	0x20002b50
 80058d0:	20003038 	.word	0x20003038

080058d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <vTaskInternalSetTimeOutState+0x24>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <vTaskInternalSetTimeOutState+0x28>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	2000303c 	.word	0x2000303c
 80058fc:	20003028 	.word	0x20003028

08005900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005942:	f000 feb7 	bl	80066b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <xTaskCheckForTimeOut+0xbc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d102      	bne.n	8005966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e023      	b.n	80059ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <xTaskCheckForTimeOut+0xc0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d007      	beq.n	8005982 <xTaskCheckForTimeOut+0x82>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e015      	b.n	80059ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	429a      	cmp	r2, r3
 800598a:	d20b      	bcs.n	80059a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1ad2      	subs	r2, r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ff9b 	bl	80058d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e004      	b.n	80059ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f000 feb1 	bl	8006714 <vPortExitCritical>

	return xReturn;
 80059b2:	69fb      	ldr	r3, [r7, #28]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20003028 	.word	0x20003028
 80059c0:	2000303c 	.word	0x2000303c

080059c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <vTaskMissedYield+0x14>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20003038 	.word	0x20003038

080059dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e4:	f000 f852 	bl	8005a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <prvIdleTask+0x28>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d9f9      	bls.n	80059e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <prvIdleTask+0x2c>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a00:	e7f0      	b.n	80059e4 <prvIdleTask+0x8>
 8005a02:	bf00      	nop
 8005a04:	20002b54 	.word	0x20002b54
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	e00c      	b.n	8005a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <prvInitialiseTaskLists+0x60>)
 8005a24:	4413      	add	r3, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fccc 	bl	80043c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b37      	cmp	r3, #55	; 0x37
 8005a36:	d9ef      	bls.n	8005a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a38:	480d      	ldr	r0, [pc, #52]	; (8005a70 <prvInitialiseTaskLists+0x64>)
 8005a3a:	f7fe fcc3 	bl	80043c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a3e:	480d      	ldr	r0, [pc, #52]	; (8005a74 <prvInitialiseTaskLists+0x68>)
 8005a40:	f7fe fcc0 	bl	80043c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a44:	480c      	ldr	r0, [pc, #48]	; (8005a78 <prvInitialiseTaskLists+0x6c>)
 8005a46:	f7fe fcbd 	bl	80043c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a4a:	480c      	ldr	r0, [pc, #48]	; (8005a7c <prvInitialiseTaskLists+0x70>)
 8005a4c:	f7fe fcba 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a50:	480b      	ldr	r0, [pc, #44]	; (8005a80 <prvInitialiseTaskLists+0x74>)
 8005a52:	f7fe fcb7 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <prvInitialiseTaskLists+0x78>)
 8005a58:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <prvInitialiseTaskLists+0x64>)
 8005a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <prvInitialiseTaskLists+0x7c>)
 8005a5e:	4a05      	ldr	r2, [pc, #20]	; (8005a74 <prvInitialiseTaskLists+0x68>)
 8005a60:	601a      	str	r2, [r3, #0]
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20002b54 	.word	0x20002b54
 8005a70:	20002fb4 	.word	0x20002fb4
 8005a74:	20002fc8 	.word	0x20002fc8
 8005a78:	20002fe4 	.word	0x20002fe4
 8005a7c:	20002ff8 	.word	0x20002ff8
 8005a80:	20003010 	.word	0x20003010
 8005a84:	20002fdc 	.word	0x20002fdc
 8005a88:	20002fe0 	.word	0x20002fe0

08005a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a92:	e019      	b.n	8005ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a94:	f000 fe0e 	bl	80066b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <prvCheckTasksWaitingTermination+0x50>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe fd17 	bl	80044d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <prvCheckTasksWaitingTermination+0x54>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <prvCheckTasksWaitingTermination+0x54>)
 8005ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005abe:	f000 fe29 	bl	8006714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f848 	bl	8005b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e1      	bne.n	8005a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20002ff8 	.word	0x20002ff8
 8005ae0:	20003024 	.word	0x20003024
 8005ae4:	2000300c 	.word	0x2000300c

08005ae8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005af4:	e005      	b.n	8005b02 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3301      	adds	r3, #1
 8005afa:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2ba5      	cmp	r3, #165	; 0xa5
 8005b08:	d0f5      	beq.n	8005af6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	089b      	lsrs	r3, r3, #2
 8005b0e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	b29b      	uxth	r3, r3
	}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <uxTaskGetStackHighWaterMark+0x14>
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <uxTaskGetStackHighWaterMark+0x34>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	e000      	b.n	8005b36 <uxTaskGetStackHighWaterMark+0x16>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005b3e:	6938      	ldr	r0, [r7, #16]
 8005b40:	f7ff ffd2 	bl	8005ae8 <prvTaskCheckFreeStackSpace>
 8005b44:	4603      	mov	r3, r0
 8005b46:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005b48:	68fb      	ldr	r3, [r7, #12]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20002b50 	.word	0x20002b50

08005b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 ff8e 	bl	8006a90 <vPortFree>
				vPortFree( pxTCB );
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 ff8b 	bl	8006a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b7a:	e018      	b.n	8005bae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d103      	bne.n	8005b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 ff82 	bl	8006a90 <vPortFree>
	}
 8005b8c:	e00f      	b.n	8005bae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d00a      	beq.n	8005bae <prvDeleteTCB+0x56>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60fb      	str	r3, [r7, #12]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <prvDeleteTCB+0x54>
	}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <prvResetNextTaskUnblockTime+0x38>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bd0:	e008      	b.n	8005be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <prvResetNextTaskUnblockTime+0x38>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20002fdc 	.word	0x20002fdc
 8005bf4:	20003044 	.word	0x20003044

08005bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <xTaskGetSchedulerState+0x34>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c06:	2301      	movs	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	e008      	b.n	8005c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <xTaskGetSchedulerState+0x38>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c14:	2302      	movs	r3, #2
 8005c16:	607b      	str	r3, [r7, #4]
 8005c18:	e001      	b.n	8005c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c1e:	687b      	ldr	r3, [r7, #4]
	}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20003030 	.word	0x20003030
 8005c30:	2000304c 	.word	0x2000304c

08005c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d056      	beq.n	8005cf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <xTaskPriorityDisinherit+0xd0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d00a      	beq.n	8005c6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d02c      	beq.n	8005cf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d128      	bne.n	8005cf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fc14 	bl	80044d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <xTaskPriorityDisinherit+0xd4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d903      	bls.n	8005cd8 <xTaskPriorityDisinherit+0xa4>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	4a0c      	ldr	r2, [pc, #48]	; (8005d08 <xTaskPriorityDisinherit+0xd4>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <xTaskPriorityDisinherit+0xd8>)
 8005ce6:	441a      	add	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fe fb95 	bl	800441e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cf8:	697b      	ldr	r3, [r7, #20]
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20002b50 	.word	0x20002b50
 8005d08:	2000302c 	.word	0x2000302c
 8005d0c:	20002b54 	.word	0x20002b54

08005d10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d1a:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d20:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe fbd6 	bl	80044d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d10a      	bne.n	8005d4a <prvAddCurrentTaskToDelayedList+0x3a>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4819      	ldr	r0, [pc, #100]	; (8005da8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d44:	f7fe fb6b 	bl	800441e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d48:	e026      	b.n	8005d98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d209      	bcs.n	8005d76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fe fb79 	bl	8004466 <vListInsert>
}
 8005d74:	e010      	b.n	8005d98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7fe fb6f 	bl	8004466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d202      	bcs.n	8005d98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d92:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20003028 	.word	0x20003028
 8005da4:	20002b50 	.word	0x20002b50
 8005da8:	20003010 	.word	0x20003010
 8005dac:	20002fe0 	.word	0x20002fe0
 8005db0:	20002fdc 	.word	0x20002fdc
 8005db4:	20003044 	.word	0x20003044

08005db8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dc2:	f000 fb07 	bl	80063d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <xTimerCreateTimerTask+0x80>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d021      	beq.n	8005e12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0108 	add.w	r1, r7, #8
 8005ddc:	f107 030c 	add.w	r3, r7, #12
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fad5 	bl	8004390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	9202      	str	r2, [sp, #8]
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	2302      	movs	r3, #2
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	460a      	mov	r2, r1
 8005df8:	4910      	ldr	r1, [pc, #64]	; (8005e3c <xTimerCreateTimerTask+0x84>)
 8005dfa:	4811      	ldr	r0, [pc, #68]	; (8005e40 <xTimerCreateTimerTask+0x88>)
 8005dfc:	f7ff f882 	bl	8004f04 <xTaskCreateStatic>
 8005e00:	4603      	mov	r3, r0
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <xTimerCreateTimerTask+0x8c>)
 8005e04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <xTimerCreateTimerTask+0x8c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20003080 	.word	0x20003080
 8005e3c:	08009898 	.word	0x08009898
 8005e40:	08005f7d 	.word	0x08005f7d
 8005e44:	20003084 	.word	0x20003084

08005e48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e76:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <xTimerGenericCommand+0x98>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02a      	beq.n	8005ed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	dc18      	bgt.n	8005ec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e90:	f7ff feb2 	bl	8005bf8 <xTaskGetSchedulerState>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d109      	bne.n	8005eae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <xTimerGenericCommand+0x98>)
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f107 0110 	add.w	r1, r7, #16
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	f7fe fc45 	bl	8004734 <xQueueGenericSend>
 8005eaa:	6278      	str	r0, [r7, #36]	; 0x24
 8005eac:	e012      	b.n	8005ed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <xTimerGenericCommand+0x98>)
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	f107 0110 	add.w	r1, r7, #16
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f7fe fc3b 	bl	8004734 <xQueueGenericSend>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec0:	e008      	b.n	8005ed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <xTimerGenericCommand+0x98>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	f107 0110 	add.w	r1, r7, #16
 8005eca:	2300      	movs	r3, #0
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f7fe fd2f 	bl	8004930 <xQueueGenericSendFromISR>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20003080 	.word	0x20003080

08005ee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <prvProcessExpiredTimer+0x94>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe faeb 	bl	80044d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d022      	beq.n	8005f56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	18d1      	adds	r1, r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f000 f8d1 	bl	80060c4 <prvInsertTimerInActiveList>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01f      	beq.n	8005f68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f7ff ff88 	bl	8005e48 <xTimerGenericCommand>
 8005f38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d113      	bne.n	8005f68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	4798      	blx	r3
}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20003078 	.word	0x20003078

08005f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f857 	bl	800603c <prvGetNextExpireTime>
 8005f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4619      	mov	r1, r3
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f803 	bl	8005fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f9a:	f000 f8d5 	bl	8006148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f9e:	e7f1      	b.n	8005f84 <prvTimerTask+0x8>

08005fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005faa:	f7ff f9e7 	bl	800537c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f866 	bl	8006084 <prvSampleTimeNow>
 8005fb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d130      	bne.n	8006022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <prvProcessTimerOrBlockTask+0x3c>
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d806      	bhi.n	8005fdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fce:	f7ff f9e3 	bl	8005398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ff85 	bl	8005ee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fda:	e024      	b.n	8006026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <prvProcessTimerOrBlockTask+0x90>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <prvProcessTimerOrBlockTask+0x50>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <prvProcessTimerOrBlockTask+0x52>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <prvProcessTimerOrBlockTask+0x94>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	f7fe ff4b 	bl	8004e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006006:	f7ff f9c7 	bl	8005398 <xTaskResumeAll>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <prvProcessTimerOrBlockTask+0x98>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
}
 8006020:	e001      	b.n	8006026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006022:	f7ff f9b9 	bl	8005398 <xTaskResumeAll>
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	2000307c 	.word	0x2000307c
 8006034:	20003080 	.word	0x20003080
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <prvGetNextExpireTime+0x44>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <prvGetNextExpireTime+0x16>
 800604e:	2201      	movs	r2, #1
 8006050:	e000      	b.n	8006054 <prvGetNextExpireTime+0x18>
 8006052:	2200      	movs	r2, #0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvGetNextExpireTime+0x44>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e001      	b.n	8006070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006070:	68fb      	ldr	r3, [r7, #12]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20003078 	.word	0x20003078

08006084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800608c:	f7ff fa22 	bl	80054d4 <xTaskGetTickCount>
 8006090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <prvSampleTimeNow+0x3c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	429a      	cmp	r2, r3
 800609a:	d205      	bcs.n	80060a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800609c:	f000 f936 	bl	800630c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e002      	b.n	80060ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060ae:	4a04      	ldr	r2, [pc, #16]	; (80060c0 <prvSampleTimeNow+0x3c>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20003088 	.word	0x20003088

080060c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d812      	bhi.n	8006110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d302      	bcc.n	80060fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e01b      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <prvInsertTimerInActiveList+0x7c>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7fe f9ac 	bl	8004466 <vListInsert>
 800610e:	e012      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d206      	bcs.n	8006126 <prvInsertTimerInActiveList+0x62>
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e007      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <prvInsertTimerInActiveList+0x80>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe f998 	bl	8004466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006136:	697b      	ldr	r3, [r7, #20]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	2000307c 	.word	0x2000307c
 8006144:	20003078 	.word	0x20003078

08006148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800614e:	e0ca      	b.n	80062e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da18      	bge.n	8006188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	3304      	adds	r3, #4
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	6850      	ldr	r0, [r2, #4]
 8006180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	4611      	mov	r1, r2
 8006186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f2c0 80aa 	blt.w	80062e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	3304      	adds	r3, #4
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe f999 	bl	80044d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061a6:	463b      	mov	r3, r7
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff6b 	bl	8006084 <prvSampleTimeNow>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	f200 8097 	bhi.w	80062e6 <prvProcessReceivedCommands+0x19e>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <prvProcessReceivedCommands+0x78>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061e9 	.word	0x080061e9
 80061cc:	0800625d 	.word	0x0800625d
 80061d0:	08006271 	.word	0x08006271
 80061d4:	080062bb 	.word	0x080062bb
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061e9 	.word	0x080061e9
 80061e0:	0800625d 	.word	0x0800625d
 80061e4:	08006271 	.word	0x08006271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	18d1      	adds	r1, r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006208:	f7ff ff5c 	bl	80060c4 <prvInsertTimerInActiveList>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d069      	beq.n	80062e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05e      	beq.n	80062e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	441a      	add	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	2100      	movs	r1, #0
 8006238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623a:	f7ff fe05 	bl	8005e48 <xTimerGenericCommand>
 800623e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d14f      	bne.n	80062e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	61bb      	str	r3, [r7, #24]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800626e:	e03a      	b.n	80062e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	617b      	str	r3, [r7, #20]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	18d1      	adds	r1, r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b4:	f7ff ff06 	bl	80060c4 <prvInsertTimerInActiveList>
					break;
 80062b8:	e015      	b.n	80062e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f000 fbe1 	bl	8006a90 <vPortFree>
 80062ce:	e00a      	b.n	80062e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062e2:	e000      	b.n	80062e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <prvProcessReceivedCommands+0x1c0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	1d39      	adds	r1, r7, #4
 80062ec:	2200      	movs	r2, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fbba 	bl	8004a68 <xQueueReceive>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f47f af2a 	bne.w	8006150 <prvProcessReceivedCommands+0x8>
	}
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	3730      	adds	r7, #48	; 0x30
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20003080 	.word	0x20003080

0800630c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006312:	e048      	b.n	80063a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <prvSwitchTimerLists+0xc0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <prvSwitchTimerLists+0xc0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe f8d3 	bl	80044d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d02e      	beq.n	80063a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	429a      	cmp	r2, r3
 8006358:	d90e      	bls.n	8006378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <prvSwitchTimerLists+0xc0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7fe f878 	bl	8004466 <vListInsert>
 8006376:	e016      	b.n	80063a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006378:	2300      	movs	r3, #0
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2300      	movs	r3, #0
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	2100      	movs	r1, #0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fd60 	bl	8005e48 <xTimerGenericCommand>
 8006388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	603b      	str	r3, [r7, #0]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <prvSwitchTimerLists+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1b1      	bne.n	8006314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <prvSwitchTimerLists+0xc0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <prvSwitchTimerLists+0xc4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a04      	ldr	r2, [pc, #16]	; (80063cc <prvSwitchTimerLists+0xc0>)
 80063bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063be:	4a04      	ldr	r2, [pc, #16]	; (80063d0 <prvSwitchTimerLists+0xc4>)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6013      	str	r3, [r2, #0]
}
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20003078 	.word	0x20003078
 80063d0:	2000307c 	.word	0x2000307c

080063d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063da:	f000 f96b 	bl	80066b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <prvCheckForValidListAndQueue+0x60>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d120      	bne.n	8006428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063e6:	4814      	ldr	r0, [pc, #80]	; (8006438 <prvCheckForValidListAndQueue+0x64>)
 80063e8:	f7fd ffec 	bl	80043c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063ec:	4813      	ldr	r0, [pc, #76]	; (800643c <prvCheckForValidListAndQueue+0x68>)
 80063ee:	f7fd ffe9 	bl	80043c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <prvCheckForValidListAndQueue+0x6c>)
 80063f4:	4a10      	ldr	r2, [pc, #64]	; (8006438 <prvCheckForValidListAndQueue+0x64>)
 80063f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063f8:	4b12      	ldr	r3, [pc, #72]	; (8006444 <prvCheckForValidListAndQueue+0x70>)
 80063fa:	4a10      	ldr	r2, [pc, #64]	; (800643c <prvCheckForValidListAndQueue+0x68>)
 80063fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <prvCheckForValidListAndQueue+0x74>)
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <prvCheckForValidListAndQueue+0x78>)
 8006406:	2110      	movs	r1, #16
 8006408:	200a      	movs	r0, #10
 800640a:	f7fe f8f7 	bl	80045fc <xQueueGenericCreateStatic>
 800640e:	4603      	mov	r3, r0
 8006410:	4a08      	ldr	r2, [pc, #32]	; (8006434 <prvCheckForValidListAndQueue+0x60>)
 8006412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <prvCheckForValidListAndQueue+0x60>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <prvCheckForValidListAndQueue+0x60>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	490b      	ldr	r1, [pc, #44]	; (8006450 <prvCheckForValidListAndQueue+0x7c>)
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fd10 	bl	8004e48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006428:	f000 f974 	bl	8006714 <vPortExitCritical>
}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20003080 	.word	0x20003080
 8006438:	20003050 	.word	0x20003050
 800643c:	20003064 	.word	0x20003064
 8006440:	20003078 	.word	0x20003078
 8006444:	2000307c 	.word	0x2000307c
 8006448:	2000312c 	.word	0x2000312c
 800644c:	2000308c 	.word	0x2000308c
 8006450:	080098a0 	.word	0x080098a0

08006454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3b04      	subs	r3, #4
 8006464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b04      	subs	r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b04      	subs	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006484:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <pxPortInitialiseStack+0x64>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b14      	subs	r3, #20
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b04      	subs	r3, #4
 800649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f06f 0202 	mvn.w	r2, #2
 80064a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3b20      	subs	r3, #32
 80064a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	080064bd 	.word	0x080064bd

080064bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <prvTaskExitError+0x54>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d00a      	beq.n	80064e6 <prvTaskExitError+0x2a>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <prvTaskExitError+0x28>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	60bb      	str	r3, [r7, #8]
}
 80064f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064fa:	bf00      	nop
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0fc      	beq.n	80064fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	2000000c 	.word	0x2000000c
	...

08006520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <pxCurrentTCBConst2>)
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f380 8809 	msr	PSP, r0
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	4770      	bx	lr
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst2>:
 8006540:	20002b50 	.word	0x20002b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006548:	4808      	ldr	r0, [pc, #32]	; (800656c <prvPortStartFirstTask+0x24>)
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f380 8808 	msr	MSP, r0
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8814 	msr	CONTROL, r0
 800655a:	b662      	cpsie	i
 800655c:	b661      	cpsie	f
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	df00      	svc	0
 8006568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800656a:	bf00      	nop
 800656c:	e000ed08 	.word	0xe000ed08

08006570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006576:	4b46      	ldr	r3, [pc, #280]	; (8006690 <xPortStartScheduler+0x120>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a46      	ldr	r2, [pc, #280]	; (8006694 <xPortStartScheduler+0x124>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10a      	bne.n	8006596 <xPortStartScheduler+0x26>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	613b      	str	r3, [r7, #16]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006596:	4b3e      	ldr	r3, [pc, #248]	; (8006690 <xPortStartScheduler+0x120>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3f      	ldr	r2, [pc, #252]	; (8006698 <xPortStartScheduler+0x128>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10a      	bne.n	80065b6 <xPortStartScheduler+0x46>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065b6:	4b39      	ldr	r3, [pc, #228]	; (800669c <xPortStartScheduler+0x12c>)
 80065b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <xPortStartScheduler+0x130>)
 80065dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065de:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <xPortStartScheduler+0x134>)
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e4:	e009      	b.n	80065fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <xPortStartScheduler+0x134>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <xPortStartScheduler+0x134>)
 80065ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d0ef      	beq.n	80065e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <xPortStartScheduler+0x134>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1c3 0307 	rsb	r3, r3, #7
 800660e:	2b04      	cmp	r3, #4
 8006610:	d00a      	beq.n	8006628 <xPortStartScheduler+0xb8>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	60bb      	str	r3, [r7, #8]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <xPortStartScheduler+0x134>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <xPortStartScheduler+0x134>)
 8006630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <xPortStartScheduler+0x134>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800663a:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <xPortStartScheduler+0x134>)
 800663c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006646:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <xPortStartScheduler+0x138>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <xPortStartScheduler+0x138>)
 800664c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <xPortStartScheduler+0x138>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <xPortStartScheduler+0x138>)
 8006658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800665c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800665e:	f000 f8dd 	bl	800681c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <xPortStartScheduler+0x13c>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006668:	f000 f8fc 	bl	8006864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <xPortStartScheduler+0x140>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0f      	ldr	r2, [pc, #60]	; (80066b0 <xPortStartScheduler+0x140>)
 8006672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006678:	f7ff ff66 	bl	8006548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800667c:	f7ff f818 	bl	80056b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006680:	f7ff ff1c 	bl	80064bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	e000ed00 	.word	0xe000ed00
 8006694:	410fc271 	.word	0x410fc271
 8006698:	410fc270 	.word	0x410fc270
 800669c:	e000e400 	.word	0xe000e400
 80066a0:	2000317c 	.word	0x2000317c
 80066a4:	20003180 	.word	0x20003180
 80066a8:	e000ed20 	.word	0xe000ed20
 80066ac:	2000000c 	.word	0x2000000c
 80066b0:	e000ef34 	.word	0xe000ef34

080066b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	607b      	str	r3, [r7, #4]
}
 80066cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <vPortEnterCritical+0x58>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <vPortEnterCritical+0x58>)
 80066d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <vPortEnterCritical+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10f      	bne.n	8006700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortEnterCritical+0x5c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <vPortEnterCritical+0x4c>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	603b      	str	r3, [r7, #0]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vPortEnterCritical+0x4a>
	}
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	2000000c 	.word	0x2000000c
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <vPortExitCritical+0x50>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vPortExitCritical+0x24>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	607b      	str	r3, [r7, #4]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vPortExitCritical+0x50>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <vPortExitCritical+0x50>)
 8006740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <vPortExitCritical+0x42>
 800674a:	2300      	movs	r3, #0
 800674c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f383 8811 	msr	BASEPRI, r3
}
 8006754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2000000c 	.word	0x2000000c
	...

08006770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f7fe ff86 	bl	80056b0 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	20002b50 	.word	0x20002b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067f2:	f7fe fea3 	bl	800553c <xTaskIncrementTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <xPortSysTickHandler+0x40>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <vPortSetupTimerInterrupt+0x38>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <vPortSetupTimerInterrupt+0x3c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <vPortSetupTimerInterrupt+0x40>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <vPortSetupTimerInterrupt+0x44>)
 800683a:	3b01      	subs	r3, #1
 800683c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e010 	.word	0xe000e010
 8006854:	e000e018 	.word	0xe000e018
 8006858:	20000000 	.word	0x20000000
 800685c:	10624dd3 	.word	0x10624dd3
 8006860:	e000e014 	.word	0xe000e014

08006864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006874 <vPortEnableVFP+0x10>
 8006868:	6801      	ldr	r1, [r0, #0]
 800686a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686e:	6001      	str	r1, [r0, #0]
 8006870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006872:	bf00      	nop
 8006874:	e000ed88 	.word	0xe000ed88

08006878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800687e:	f3ef 8305 	mrs	r3, IPSR
 8006882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d914      	bls.n	80068b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <vPortValidateInterruptPriority+0x70>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006894:	4b15      	ldr	r3, [pc, #84]	; (80068ec <vPortValidateInterruptPriority+0x74>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7afa      	ldrb	r2, [r7, #11]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20a      	bcs.n	80068b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068b4:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <vPortValidateInterruptPriority+0x78>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <vPortValidateInterruptPriority+0x7c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d90a      	bls.n	80068da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	603b      	str	r3, [r7, #0]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <vPortValidateInterruptPriority+0x60>
	}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000e3f0 	.word	0xe000e3f0
 80068ec:	2000317c 	.word	0x2000317c
 80068f0:	e000ed0c 	.word	0xe000ed0c
 80068f4:	20003180 	.word	0x20003180

080068f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006904:	f7fe fd3a 	bl	800537c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006908:	4b5b      	ldr	r3, [pc, #364]	; (8006a78 <pvPortMalloc+0x180>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006910:	f000 f920 	bl	8006b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006914:	4b59      	ldr	r3, [pc, #356]	; (8006a7c <pvPortMalloc+0x184>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 8093 	bne.w	8006a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01d      	beq.n	8006964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006928:	2208      	movs	r2, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d014      	beq.n	8006964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	3308      	adds	r3, #8
 8006942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <pvPortMalloc+0x6c>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	617b      	str	r3, [r7, #20]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d06e      	beq.n	8006a48 <pvPortMalloc+0x150>
 800696a:	4b45      	ldr	r3, [pc, #276]	; (8006a80 <pvPortMalloc+0x188>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d869      	bhi.n	8006a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <pvPortMalloc+0x18c>)
 8006976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006978:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <pvPortMalloc+0x18c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697e:	e004      	b.n	800698a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d903      	bls.n	800699c <pvPortMalloc+0xa4>
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f1      	bne.n	8006980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800699c:	4b36      	ldr	r3, [pc, #216]	; (8006a78 <pvPortMalloc+0x180>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d050      	beq.n	8006a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2208      	movs	r2, #8
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	2308      	movs	r3, #8
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d91f      	bls.n	8006a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <pvPortMalloc+0xf8>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	613b      	str	r3, [r7, #16]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f000 f908 	bl	8006c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <pvPortMalloc+0x188>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a1b      	ldr	r2, [pc, #108]	; (8006a80 <pvPortMalloc+0x188>)
 8006a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a16:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <pvPortMalloc+0x188>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b1b      	ldr	r3, [pc, #108]	; (8006a88 <pvPortMalloc+0x190>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d203      	bcs.n	8006a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <pvPortMalloc+0x188>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a18      	ldr	r2, [pc, #96]	; (8006a88 <pvPortMalloc+0x190>)
 8006a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <pvPortMalloc+0x184>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <pvPortMalloc+0x194>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	4a11      	ldr	r2, [pc, #68]	; (8006a8c <pvPortMalloc+0x194>)
 8006a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a48:	f7fe fca6 	bl	8005398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <pvPortMalloc+0x174>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <pvPortMalloc+0x172>
	return pvReturn;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20003d44 	.word	0x20003d44
 8006a7c:	20003d58 	.word	0x20003d58
 8006a80:	20003d48 	.word	0x20003d48
 8006a84:	20003d3c 	.word	0x20003d3c
 8006a88:	20003d4c 	.word	0x20003d4c
 8006a8c:	20003d50 	.word	0x20003d50

08006a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d04d      	beq.n	8006b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	4b24      	ldr	r3, [pc, #144]	; (8006b48 <vPortFree+0xb8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <vPortFree+0x44>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60fb      	str	r3, [r7, #12]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <vPortFree+0x62>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60bb      	str	r3, [r7, #8]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <vPortFree+0xb8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01e      	beq.n	8006b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11a      	bne.n	8006b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <vPortFree+0xb8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	401a      	ands	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b18:	f7fe fc30 	bl	800537c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <vPortFree+0xbc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <vPortFree+0xbc>)
 8006b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b2a:	6938      	ldr	r0, [r7, #16]
 8006b2c:	f000 f874 	bl	8006c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <vPortFree+0xc0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	4a06      	ldr	r2, [pc, #24]	; (8006b50 <vPortFree+0xc0>)
 8006b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b3a:	f7fe fc2d 	bl	8005398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b3e:	bf00      	nop
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20003d58 	.word	0x20003d58
 8006b4c:	20003d48 	.word	0x20003d48
 8006b50:	20003d54 	.word	0x20003d54

08006b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <prvHeapInit+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3307      	adds	r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0307 	bic.w	r3, r3, #7
 8006b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <prvHeapInit+0xac>)
 8006b84:	4413      	add	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <prvHeapInit+0xb0>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b92:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <prvHeapInit+0xb0>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <prvHeapInit+0xb4>)
 8006bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <prvHeapInit+0xb4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <prvHeapInit+0xb4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvHeapInit+0xb4>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <prvHeapInit+0xb8>)
 8006be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <prvHeapInit+0xbc>)
 8006bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <prvHeapInit+0xc0>)
 8006bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20003184 	.word	0x20003184
 8006c04:	20003d3c 	.word	0x20003d3c
 8006c08:	20003d44 	.word	0x20003d44
 8006c0c:	20003d4c 	.word	0x20003d4c
 8006c10:	20003d48 	.word	0x20003d48
 8006c14:	20003d58 	.word	0x20003d58

08006c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c20:	4b28      	ldr	r3, [pc, #160]	; (8006cc4 <prvInsertBlockIntoFreeList+0xac>)
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	e002      	b.n	8006c2c <prvInsertBlockIntoFreeList+0x14>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d8f7      	bhi.n	8006c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d108      	bne.n	8006c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d118      	bne.n	8006ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d00d      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	441a      	add	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e008      	b.n	8006ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e003      	b.n	8006ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d002      	beq.n	8006cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20003d3c 	.word	0x20003d3c
 8006cc8:	20003d44 	.word	0x20003d44

08006ccc <__errno>:
 8006ccc:	4b01      	ldr	r3, [pc, #4]	; (8006cd4 <__errno+0x8>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000010 	.word	0x20000010

08006cd8 <__libc_init_array>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4d0d      	ldr	r5, [pc, #52]	; (8006d10 <__libc_init_array+0x38>)
 8006cdc:	4c0d      	ldr	r4, [pc, #52]	; (8006d14 <__libc_init_array+0x3c>)
 8006cde:	1b64      	subs	r4, r4, r5
 8006ce0:	10a4      	asrs	r4, r4, #2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	42a6      	cmp	r6, r4
 8006ce6:	d109      	bne.n	8006cfc <__libc_init_array+0x24>
 8006ce8:	4d0b      	ldr	r5, [pc, #44]	; (8006d18 <__libc_init_array+0x40>)
 8006cea:	4c0c      	ldr	r4, [pc, #48]	; (8006d1c <__libc_init_array+0x44>)
 8006cec:	f002 fd4e 	bl	800978c <_init>
 8006cf0:	1b64      	subs	r4, r4, r5
 8006cf2:	10a4      	asrs	r4, r4, #2
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	42a6      	cmp	r6, r4
 8006cf8:	d105      	bne.n	8006d06 <__libc_init_array+0x2e>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d00:	4798      	blx	r3
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7ee      	b.n	8006ce4 <__libc_init_array+0xc>
 8006d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0a:	4798      	blx	r3
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	e7f2      	b.n	8006cf6 <__libc_init_array+0x1e>
 8006d10:	08009d64 	.word	0x08009d64
 8006d14:	08009d64 	.word	0x08009d64
 8006d18:	08009d64 	.word	0x08009d64
 8006d1c:	08009d68 	.word	0x08009d68

08006d20 <memcpy>:
 8006d20:	440a      	add	r2, r1
 8006d22:	4291      	cmp	r1, r2
 8006d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d28:	d100      	bne.n	8006d2c <memcpy+0xc>
 8006d2a:	4770      	bx	lr
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d36:	4291      	cmp	r1, r2
 8006d38:	d1f9      	bne.n	8006d2e <memcpy+0xe>
 8006d3a:	bd10      	pop	{r4, pc}

08006d3c <memset>:
 8006d3c:	4402      	add	r2, r0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d100      	bne.n	8006d46 <memset+0xa>
 8006d44:	4770      	bx	lr
 8006d46:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4a:	e7f9      	b.n	8006d40 <memset+0x4>

08006d4c <__cvt>:
 8006d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	ec55 4b10 	vmov	r4, r5, d0
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	460e      	mov	r6, r1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	bfbb      	ittet	lt
 8006d5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d62:	461d      	movlt	r5, r3
 8006d64:	2300      	movge	r3, #0
 8006d66:	232d      	movlt	r3, #45	; 0x2d
 8006d68:	700b      	strb	r3, [r1, #0]
 8006d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d70:	4691      	mov	r9, r2
 8006d72:	f023 0820 	bic.w	r8, r3, #32
 8006d76:	bfbc      	itt	lt
 8006d78:	4622      	movlt	r2, r4
 8006d7a:	4614      	movlt	r4, r2
 8006d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d80:	d005      	beq.n	8006d8e <__cvt+0x42>
 8006d82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d86:	d100      	bne.n	8006d8a <__cvt+0x3e>
 8006d88:	3601      	adds	r6, #1
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	e000      	b.n	8006d90 <__cvt+0x44>
 8006d8e:	2103      	movs	r1, #3
 8006d90:	ab03      	add	r3, sp, #12
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	ab02      	add	r3, sp, #8
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	ec45 4b10 	vmov	d0, r4, r5
 8006d9c:	4653      	mov	r3, sl
 8006d9e:	4632      	mov	r2, r6
 8006da0:	f000 fce2 	bl	8007768 <_dtoa_r>
 8006da4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006da8:	4607      	mov	r7, r0
 8006daa:	d102      	bne.n	8006db2 <__cvt+0x66>
 8006dac:	f019 0f01 	tst.w	r9, #1
 8006db0:	d022      	beq.n	8006df8 <__cvt+0xac>
 8006db2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006db6:	eb07 0906 	add.w	r9, r7, r6
 8006dba:	d110      	bne.n	8006dde <__cvt+0x92>
 8006dbc:	783b      	ldrb	r3, [r7, #0]
 8006dbe:	2b30      	cmp	r3, #48	; 0x30
 8006dc0:	d10a      	bne.n	8006dd8 <__cvt+0x8c>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dce:	b918      	cbnz	r0, 8006dd8 <__cvt+0x8c>
 8006dd0:	f1c6 0601 	rsb	r6, r6, #1
 8006dd4:	f8ca 6000 	str.w	r6, [sl]
 8006dd8:	f8da 3000 	ldr.w	r3, [sl]
 8006ddc:	4499      	add	r9, r3
 8006dde:	2200      	movs	r2, #0
 8006de0:	2300      	movs	r3, #0
 8006de2:	4620      	mov	r0, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	f7f9 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dea:	b108      	cbz	r0, 8006df0 <__cvt+0xa4>
 8006dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006df0:	2230      	movs	r2, #48	; 0x30
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	454b      	cmp	r3, r9
 8006df6:	d307      	bcc.n	8006e08 <__cvt+0xbc>
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dfc:	1bdb      	subs	r3, r3, r7
 8006dfe:	4638      	mov	r0, r7
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	b004      	add	sp, #16
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	9103      	str	r1, [sp, #12]
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e7f0      	b.n	8006df2 <__cvt+0xa6>

08006e10 <__exponent>:
 8006e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e12:	4603      	mov	r3, r0
 8006e14:	2900      	cmp	r1, #0
 8006e16:	bfb8      	it	lt
 8006e18:	4249      	neglt	r1, r1
 8006e1a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e1e:	bfb4      	ite	lt
 8006e20:	222d      	movlt	r2, #45	; 0x2d
 8006e22:	222b      	movge	r2, #43	; 0x2b
 8006e24:	2909      	cmp	r1, #9
 8006e26:	7042      	strb	r2, [r0, #1]
 8006e28:	dd2a      	ble.n	8006e80 <__exponent+0x70>
 8006e2a:	f10d 0407 	add.w	r4, sp, #7
 8006e2e:	46a4      	mov	ip, r4
 8006e30:	270a      	movs	r7, #10
 8006e32:	46a6      	mov	lr, r4
 8006e34:	460a      	mov	r2, r1
 8006e36:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e3a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e3e:	3530      	adds	r5, #48	; 0x30
 8006e40:	2a63      	cmp	r2, #99	; 0x63
 8006e42:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	dcf1      	bgt.n	8006e32 <__exponent+0x22>
 8006e4e:	3130      	adds	r1, #48	; 0x30
 8006e50:	f1ae 0502 	sub.w	r5, lr, #2
 8006e54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e58:	1c44      	adds	r4, r0, #1
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4561      	cmp	r1, ip
 8006e5e:	d30a      	bcc.n	8006e76 <__exponent+0x66>
 8006e60:	f10d 0209 	add.w	r2, sp, #9
 8006e64:	eba2 020e 	sub.w	r2, r2, lr
 8006e68:	4565      	cmp	r5, ip
 8006e6a:	bf88      	it	hi
 8006e6c:	2200      	movhi	r2, #0
 8006e6e:	4413      	add	r3, r2
 8006e70:	1a18      	subs	r0, r3, r0
 8006e72:	b003      	add	sp, #12
 8006e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e7e:	e7ed      	b.n	8006e5c <__exponent+0x4c>
 8006e80:	2330      	movs	r3, #48	; 0x30
 8006e82:	3130      	adds	r1, #48	; 0x30
 8006e84:	7083      	strb	r3, [r0, #2]
 8006e86:	70c1      	strb	r1, [r0, #3]
 8006e88:	1d03      	adds	r3, r0, #4
 8006e8a:	e7f1      	b.n	8006e70 <__exponent+0x60>

08006e8c <_printf_float>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	ed2d 8b02 	vpush	{d8}
 8006e94:	b08d      	sub	sp, #52	; 0x34
 8006e96:	460c      	mov	r4, r1
 8006e98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	f001 fb45 	bl	8008530 <_localeconv_r>
 8006ea6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7f9 f990 	bl	80001d0 <strlen>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	9305      	str	r3, [sp, #20]
 8006eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	f103 0208 	add.w	r2, r3, #8
 8006eca:	f8c8 2000 	str.w	r2, [r8]
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ed6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ee4:	ee08 0a10 	vmov	s16, r0
 8006ee8:	4b9f      	ldr	r3, [pc, #636]	; (8007168 <_printf_float+0x2dc>)
 8006eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	f7f9 fe1b 	bl	8000b2c <__aeabi_dcmpun>
 8006ef6:	bb88      	cbnz	r0, 8006f5c <_printf_float+0xd0>
 8006ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efc:	4b9a      	ldr	r3, [pc, #616]	; (8007168 <_printf_float+0x2dc>)
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	f7f9 fdf5 	bl	8000af0 <__aeabi_dcmple>
 8006f06:	bb48      	cbnz	r0, 8006f5c <_printf_float+0xd0>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4649      	mov	r1, r9
 8006f10:	f7f9 fde4 	bl	8000adc <__aeabi_dcmplt>
 8006f14:	b110      	cbz	r0, 8006f1c <_printf_float+0x90>
 8006f16:	232d      	movs	r3, #45	; 0x2d
 8006f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1c:	4b93      	ldr	r3, [pc, #588]	; (800716c <_printf_float+0x2e0>)
 8006f1e:	4894      	ldr	r0, [pc, #592]	; (8007170 <_printf_float+0x2e4>)
 8006f20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f24:	bf94      	ite	ls
 8006f26:	4698      	movls	r8, r3
 8006f28:	4680      	movhi	r8, r0
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	9b05      	ldr	r3, [sp, #20]
 8006f30:	f023 0204 	bic.w	r2, r3, #4
 8006f34:	6022      	str	r2, [r4, #0]
 8006f36:	f04f 0900 	mov.w	r9, #0
 8006f3a:	9700      	str	r7, [sp, #0]
 8006f3c:	4633      	mov	r3, r6
 8006f3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f9d8 	bl	80072f8 <_printf_common>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f040 8090 	bne.w	800706e <_printf_float+0x1e2>
 8006f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f52:	b00d      	add	sp, #52	; 0x34
 8006f54:	ecbd 8b02 	vpop	{d8}
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	4640      	mov	r0, r8
 8006f62:	4649      	mov	r1, r9
 8006f64:	f7f9 fde2 	bl	8000b2c <__aeabi_dcmpun>
 8006f68:	b140      	cbz	r0, 8006f7c <_printf_float+0xf0>
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bfbc      	itt	lt
 8006f70:	232d      	movlt	r3, #45	; 0x2d
 8006f72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f76:	487f      	ldr	r0, [pc, #508]	; (8007174 <_printf_float+0x2e8>)
 8006f78:	4b7f      	ldr	r3, [pc, #508]	; (8007178 <_printf_float+0x2ec>)
 8006f7a:	e7d1      	b.n	8006f20 <_printf_float+0x94>
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f82:	9206      	str	r2, [sp, #24]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	d13f      	bne.n	8007008 <_printf_float+0x17c>
 8006f88:	2306      	movs	r3, #6
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	9b05      	ldr	r3, [sp, #20]
 8006f8e:	6861      	ldr	r1, [r4, #4]
 8006f90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f94:	2300      	movs	r3, #0
 8006f96:	9303      	str	r3, [sp, #12]
 8006f98:	ab0a      	add	r3, sp, #40	; 0x28
 8006f9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f9e:	ab09      	add	r3, sp, #36	; 0x24
 8006fa0:	ec49 8b10 	vmov	d0, r8, r9
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fac:	4628      	mov	r0, r5
 8006fae:	f7ff fecd 	bl	8006d4c <__cvt>
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fb6:	2b47      	cmp	r3, #71	; 0x47
 8006fb8:	4680      	mov	r8, r0
 8006fba:	d108      	bne.n	8006fce <_printf_float+0x142>
 8006fbc:	1cc8      	adds	r0, r1, #3
 8006fbe:	db02      	blt.n	8006fc6 <_printf_float+0x13a>
 8006fc0:	6863      	ldr	r3, [r4, #4]
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	dd41      	ble.n	800704a <_printf_float+0x1be>
 8006fc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006fca:	fa5f fb8b 	uxtb.w	fp, fp
 8006fce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fd2:	d820      	bhi.n	8007016 <_printf_float+0x18a>
 8006fd4:	3901      	subs	r1, #1
 8006fd6:	465a      	mov	r2, fp
 8006fd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fdc:	9109      	str	r1, [sp, #36]	; 0x24
 8006fde:	f7ff ff17 	bl	8006e10 <__exponent>
 8006fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe4:	1813      	adds	r3, r2, r0
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	4681      	mov	r9, r0
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	dc02      	bgt.n	8006ff4 <_printf_float+0x168>
 8006fee:	6822      	ldr	r2, [r4, #0]
 8006ff0:	07d2      	lsls	r2, r2, #31
 8006ff2:	d501      	bpl.n	8006ff8 <_printf_float+0x16c>
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d09c      	beq.n	8006f3a <_printf_float+0xae>
 8007000:	232d      	movs	r3, #45	; 0x2d
 8007002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007006:	e798      	b.n	8006f3a <_printf_float+0xae>
 8007008:	9a06      	ldr	r2, [sp, #24]
 800700a:	2a47      	cmp	r2, #71	; 0x47
 800700c:	d1be      	bne.n	8006f8c <_printf_float+0x100>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1bc      	bne.n	8006f8c <_printf_float+0x100>
 8007012:	2301      	movs	r3, #1
 8007014:	e7b9      	b.n	8006f8a <_printf_float+0xfe>
 8007016:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800701a:	d118      	bne.n	800704e <_printf_float+0x1c2>
 800701c:	2900      	cmp	r1, #0
 800701e:	6863      	ldr	r3, [r4, #4]
 8007020:	dd0b      	ble.n	800703a <_printf_float+0x1ae>
 8007022:	6121      	str	r1, [r4, #16]
 8007024:	b913      	cbnz	r3, 800702c <_printf_float+0x1a0>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	07d0      	lsls	r0, r2, #31
 800702a:	d502      	bpl.n	8007032 <_printf_float+0x1a6>
 800702c:	3301      	adds	r3, #1
 800702e:	440b      	add	r3, r1
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	65a1      	str	r1, [r4, #88]	; 0x58
 8007034:	f04f 0900 	mov.w	r9, #0
 8007038:	e7de      	b.n	8006ff8 <_printf_float+0x16c>
 800703a:	b913      	cbnz	r3, 8007042 <_printf_float+0x1b6>
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	07d2      	lsls	r2, r2, #31
 8007040:	d501      	bpl.n	8007046 <_printf_float+0x1ba>
 8007042:	3302      	adds	r3, #2
 8007044:	e7f4      	b.n	8007030 <_printf_float+0x1a4>
 8007046:	2301      	movs	r3, #1
 8007048:	e7f2      	b.n	8007030 <_printf_float+0x1a4>
 800704a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800704e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007050:	4299      	cmp	r1, r3
 8007052:	db05      	blt.n	8007060 <_printf_float+0x1d4>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	6121      	str	r1, [r4, #16]
 8007058:	07d8      	lsls	r0, r3, #31
 800705a:	d5ea      	bpl.n	8007032 <_printf_float+0x1a6>
 800705c:	1c4b      	adds	r3, r1, #1
 800705e:	e7e7      	b.n	8007030 <_printf_float+0x1a4>
 8007060:	2900      	cmp	r1, #0
 8007062:	bfd4      	ite	le
 8007064:	f1c1 0202 	rsble	r2, r1, #2
 8007068:	2201      	movgt	r2, #1
 800706a:	4413      	add	r3, r2
 800706c:	e7e0      	b.n	8007030 <_printf_float+0x1a4>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	055a      	lsls	r2, r3, #21
 8007072:	d407      	bmi.n	8007084 <_printf_float+0x1f8>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	4642      	mov	r2, r8
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	d12c      	bne.n	80070dc <_printf_float+0x250>
 8007082:	e764      	b.n	8006f4e <_printf_float+0xc2>
 8007084:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007088:	f240 80e0 	bls.w	800724c <_printf_float+0x3c0>
 800708c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	f7f9 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007098:	2800      	cmp	r0, #0
 800709a:	d034      	beq.n	8007106 <_printf_float+0x27a>
 800709c:	4a37      	ldr	r2, [pc, #220]	; (800717c <_printf_float+0x2f0>)
 800709e:	2301      	movs	r3, #1
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f af51 	beq.w	8006f4e <_printf_float+0xc2>
 80070ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b0:	429a      	cmp	r2, r3
 80070b2:	db02      	blt.n	80070ba <_printf_float+0x22e>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	07d8      	lsls	r0, r3, #31
 80070b8:	d510      	bpl.n	80070dc <_printf_float+0x250>
 80070ba:	ee18 3a10 	vmov	r3, s16
 80070be:	4652      	mov	r2, sl
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f af41 	beq.w	8006f4e <_printf_float+0xc2>
 80070cc:	f04f 0800 	mov.w	r8, #0
 80070d0:	f104 091a 	add.w	r9, r4, #26
 80070d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	4543      	cmp	r3, r8
 80070da:	dc09      	bgt.n	80070f0 <_printf_float+0x264>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	079b      	lsls	r3, r3, #30
 80070e0:	f100 8105 	bmi.w	80072ee <_printf_float+0x462>
 80070e4:	68e0      	ldr	r0, [r4, #12]
 80070e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e8:	4298      	cmp	r0, r3
 80070ea:	bfb8      	it	lt
 80070ec:	4618      	movlt	r0, r3
 80070ee:	e730      	b.n	8006f52 <_printf_float+0xc6>
 80070f0:	2301      	movs	r3, #1
 80070f2:	464a      	mov	r2, r9
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af27 	beq.w	8006f4e <_printf_float+0xc2>
 8007100:	f108 0801 	add.w	r8, r8, #1
 8007104:	e7e6      	b.n	80070d4 <_printf_float+0x248>
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	dc39      	bgt.n	8007180 <_printf_float+0x2f4>
 800710c:	4a1b      	ldr	r2, [pc, #108]	; (800717c <_printf_float+0x2f0>)
 800710e:	2301      	movs	r3, #1
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af19 	beq.w	8006f4e <_printf_float+0xc2>
 800711c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007120:	4313      	orrs	r3, r2
 8007122:	d102      	bne.n	800712a <_printf_float+0x29e>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	07d9      	lsls	r1, r3, #31
 8007128:	d5d8      	bpl.n	80070dc <_printf_float+0x250>
 800712a:	ee18 3a10 	vmov	r3, s16
 800712e:	4652      	mov	r2, sl
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af09 	beq.w	8006f4e <_printf_float+0xc2>
 800713c:	f04f 0900 	mov.w	r9, #0
 8007140:	f104 0a1a 	add.w	sl, r4, #26
 8007144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007146:	425b      	negs	r3, r3
 8007148:	454b      	cmp	r3, r9
 800714a:	dc01      	bgt.n	8007150 <_printf_float+0x2c4>
 800714c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714e:	e792      	b.n	8007076 <_printf_float+0x1ea>
 8007150:	2301      	movs	r3, #1
 8007152:	4652      	mov	r2, sl
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f aef7 	beq.w	8006f4e <_printf_float+0xc2>
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	e7ee      	b.n	8007144 <_printf_float+0x2b8>
 8007166:	bf00      	nop
 8007168:	7fefffff 	.word	0x7fefffff
 800716c:	08009984 	.word	0x08009984
 8007170:	08009988 	.word	0x08009988
 8007174:	08009990 	.word	0x08009990
 8007178:	0800998c 	.word	0x0800998c
 800717c:	08009994 	.word	0x08009994
 8007180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007184:	429a      	cmp	r2, r3
 8007186:	bfa8      	it	ge
 8007188:	461a      	movge	r2, r3
 800718a:	2a00      	cmp	r2, #0
 800718c:	4691      	mov	r9, r2
 800718e:	dc37      	bgt.n	8007200 <_printf_float+0x374>
 8007190:	f04f 0b00 	mov.w	fp, #0
 8007194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007198:	f104 021a 	add.w	r2, r4, #26
 800719c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	eba3 0309 	sub.w	r3, r3, r9
 80071a4:	455b      	cmp	r3, fp
 80071a6:	dc33      	bgt.n	8007210 <_printf_float+0x384>
 80071a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ac:	429a      	cmp	r2, r3
 80071ae:	db3b      	blt.n	8007228 <_printf_float+0x39c>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07da      	lsls	r2, r3, #31
 80071b4:	d438      	bmi.n	8007228 <_printf_float+0x39c>
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	9a05      	ldr	r2, [sp, #20]
 80071ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071bc:	1a9a      	subs	r2, r3, r2
 80071be:	eba3 0901 	sub.w	r9, r3, r1
 80071c2:	4591      	cmp	r9, r2
 80071c4:	bfa8      	it	ge
 80071c6:	4691      	movge	r9, r2
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	dc35      	bgt.n	800723a <_printf_float+0x3ae>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d6:	f104 0a1a 	add.w	sl, r4, #26
 80071da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	eba3 0309 	sub.w	r3, r3, r9
 80071e4:	4543      	cmp	r3, r8
 80071e6:	f77f af79 	ble.w	80070dc <_printf_float+0x250>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f aeaa 	beq.w	8006f4e <_printf_float+0xc2>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	e7ec      	b.n	80071da <_printf_float+0x34e>
 8007200:	4613      	mov	r3, r2
 8007202:	4631      	mov	r1, r6
 8007204:	4642      	mov	r2, r8
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d1c0      	bne.n	8007190 <_printf_float+0x304>
 800720e:	e69e      	b.n	8006f4e <_printf_float+0xc2>
 8007210:	2301      	movs	r3, #1
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	9205      	str	r2, [sp, #20]
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f ae97 	beq.w	8006f4e <_printf_float+0xc2>
 8007220:	9a05      	ldr	r2, [sp, #20]
 8007222:	f10b 0b01 	add.w	fp, fp, #1
 8007226:	e7b9      	b.n	800719c <_printf_float+0x310>
 8007228:	ee18 3a10 	vmov	r3, s16
 800722c:	4652      	mov	r2, sl
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	d1be      	bne.n	80071b6 <_printf_float+0x32a>
 8007238:	e689      	b.n	8006f4e <_printf_float+0xc2>
 800723a:	9a05      	ldr	r2, [sp, #20]
 800723c:	464b      	mov	r3, r9
 800723e:	4442      	add	r2, r8
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	d1c1      	bne.n	80071ce <_printf_float+0x342>
 800724a:	e680      	b.n	8006f4e <_printf_float+0xc2>
 800724c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724e:	2a01      	cmp	r2, #1
 8007250:	dc01      	bgt.n	8007256 <_printf_float+0x3ca>
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d538      	bpl.n	80072c8 <_printf_float+0x43c>
 8007256:	2301      	movs	r3, #1
 8007258:	4642      	mov	r2, r8
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f ae74 	beq.w	8006f4e <_printf_float+0xc2>
 8007266:	ee18 3a10 	vmov	r3, s16
 800726a:	4652      	mov	r2, sl
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f ae6b 	beq.w	8006f4e <_printf_float+0xc2>
 8007278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800727c:	2200      	movs	r2, #0
 800727e:	2300      	movs	r3, #0
 8007280:	f7f9 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007284:	b9d8      	cbnz	r0, 80072be <_printf_float+0x432>
 8007286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007288:	f108 0201 	add.w	r2, r8, #1
 800728c:	3b01      	subs	r3, #1
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	d10e      	bne.n	80072b6 <_printf_float+0x42a>
 8007298:	e659      	b.n	8006f4e <_printf_float+0xc2>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae52 	beq.w	8006f4e <_printf_float+0xc2>
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4543      	cmp	r3, r8
 80072b4:	dcf1      	bgt.n	800729a <_printf_float+0x40e>
 80072b6:	464b      	mov	r3, r9
 80072b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072bc:	e6dc      	b.n	8007078 <_printf_float+0x1ec>
 80072be:	f04f 0800 	mov.w	r8, #0
 80072c2:	f104 0a1a 	add.w	sl, r4, #26
 80072c6:	e7f2      	b.n	80072ae <_printf_float+0x422>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4642      	mov	r2, r8
 80072cc:	e7df      	b.n	800728e <_printf_float+0x402>
 80072ce:	2301      	movs	r3, #1
 80072d0:	464a      	mov	r2, r9
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	f43f ae38 	beq.w	8006f4e <_printf_float+0xc2>
 80072de:	f108 0801 	add.w	r8, r8, #1
 80072e2:	68e3      	ldr	r3, [r4, #12]
 80072e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072e6:	1a5b      	subs	r3, r3, r1
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dcf0      	bgt.n	80072ce <_printf_float+0x442>
 80072ec:	e6fa      	b.n	80070e4 <_printf_float+0x258>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	f104 0919 	add.w	r9, r4, #25
 80072f6:	e7f4      	b.n	80072e2 <_printf_float+0x456>

080072f8 <_printf_common>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	4616      	mov	r6, r2
 80072fe:	4699      	mov	r9, r3
 8007300:	688a      	ldr	r2, [r1, #8]
 8007302:	690b      	ldr	r3, [r1, #16]
 8007304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007308:	4293      	cmp	r3, r2
 800730a:	bfb8      	it	lt
 800730c:	4613      	movlt	r3, r2
 800730e:	6033      	str	r3, [r6, #0]
 8007310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007314:	4607      	mov	r7, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b10a      	cbz	r2, 800731e <_printf_common+0x26>
 800731a:	3301      	adds	r3, #1
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	0699      	lsls	r1, r3, #26
 8007322:	bf42      	ittt	mi
 8007324:	6833      	ldrmi	r3, [r6, #0]
 8007326:	3302      	addmi	r3, #2
 8007328:	6033      	strmi	r3, [r6, #0]
 800732a:	6825      	ldr	r5, [r4, #0]
 800732c:	f015 0506 	ands.w	r5, r5, #6
 8007330:	d106      	bne.n	8007340 <_printf_common+0x48>
 8007332:	f104 0a19 	add.w	sl, r4, #25
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	6832      	ldr	r2, [r6, #0]
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	42ab      	cmp	r3, r5
 800733e:	dc26      	bgt.n	800738e <_printf_common+0x96>
 8007340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007344:	1e13      	subs	r3, r2, #0
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	2301      	movne	r3, #1
 800734c:	0692      	lsls	r2, r2, #26
 800734e:	d42b      	bmi.n	80073a8 <_printf_common+0xb0>
 8007350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007354:	4649      	mov	r1, r9
 8007356:	4638      	mov	r0, r7
 8007358:	47c0      	blx	r8
 800735a:	3001      	adds	r0, #1
 800735c:	d01e      	beq.n	800739c <_printf_common+0xa4>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	68e5      	ldr	r5, [r4, #12]
 8007362:	6832      	ldr	r2, [r6, #0]
 8007364:	f003 0306 	and.w	r3, r3, #6
 8007368:	2b04      	cmp	r3, #4
 800736a:	bf08      	it	eq
 800736c:	1aad      	subeq	r5, r5, r2
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	bf0c      	ite	eq
 8007374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007378:	2500      	movne	r5, #0
 800737a:	4293      	cmp	r3, r2
 800737c:	bfc4      	itt	gt
 800737e:	1a9b      	subgt	r3, r3, r2
 8007380:	18ed      	addgt	r5, r5, r3
 8007382:	2600      	movs	r6, #0
 8007384:	341a      	adds	r4, #26
 8007386:	42b5      	cmp	r5, r6
 8007388:	d11a      	bne.n	80073c0 <_printf_common+0xc8>
 800738a:	2000      	movs	r0, #0
 800738c:	e008      	b.n	80073a0 <_printf_common+0xa8>
 800738e:	2301      	movs	r3, #1
 8007390:	4652      	mov	r2, sl
 8007392:	4649      	mov	r1, r9
 8007394:	4638      	mov	r0, r7
 8007396:	47c0      	blx	r8
 8007398:	3001      	adds	r0, #1
 800739a:	d103      	bne.n	80073a4 <_printf_common+0xac>
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a4:	3501      	adds	r5, #1
 80073a6:	e7c6      	b.n	8007336 <_printf_common+0x3e>
 80073a8:	18e1      	adds	r1, r4, r3
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	2030      	movs	r0, #48	; 0x30
 80073ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b2:	4422      	add	r2, r4
 80073b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073bc:	3302      	adds	r3, #2
 80073be:	e7c7      	b.n	8007350 <_printf_common+0x58>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4622      	mov	r2, r4
 80073c4:	4649      	mov	r1, r9
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	3001      	adds	r0, #1
 80073cc:	d0e6      	beq.n	800739c <_printf_common+0xa4>
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7d9      	b.n	8007386 <_printf_common+0x8e>
	...

080073d4 <_printf_i>:
 80073d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	7e0f      	ldrb	r7, [r1, #24]
 80073da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073dc:	2f78      	cmp	r7, #120	; 0x78
 80073de:	4691      	mov	r9, r2
 80073e0:	4680      	mov	r8, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	469a      	mov	sl, r3
 80073e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ea:	d807      	bhi.n	80073fc <_printf_i+0x28>
 80073ec:	2f62      	cmp	r7, #98	; 0x62
 80073ee:	d80a      	bhi.n	8007406 <_printf_i+0x32>
 80073f0:	2f00      	cmp	r7, #0
 80073f2:	f000 80d8 	beq.w	80075a6 <_printf_i+0x1d2>
 80073f6:	2f58      	cmp	r7, #88	; 0x58
 80073f8:	f000 80a3 	beq.w	8007542 <_printf_i+0x16e>
 80073fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007404:	e03a      	b.n	800747c <_printf_i+0xa8>
 8007406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800740a:	2b15      	cmp	r3, #21
 800740c:	d8f6      	bhi.n	80073fc <_printf_i+0x28>
 800740e:	a101      	add	r1, pc, #4	; (adr r1, 8007414 <_printf_i+0x40>)
 8007410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007414:	0800746d 	.word	0x0800746d
 8007418:	08007481 	.word	0x08007481
 800741c:	080073fd 	.word	0x080073fd
 8007420:	080073fd 	.word	0x080073fd
 8007424:	080073fd 	.word	0x080073fd
 8007428:	080073fd 	.word	0x080073fd
 800742c:	08007481 	.word	0x08007481
 8007430:	080073fd 	.word	0x080073fd
 8007434:	080073fd 	.word	0x080073fd
 8007438:	080073fd 	.word	0x080073fd
 800743c:	080073fd 	.word	0x080073fd
 8007440:	0800758d 	.word	0x0800758d
 8007444:	080074b1 	.word	0x080074b1
 8007448:	0800756f 	.word	0x0800756f
 800744c:	080073fd 	.word	0x080073fd
 8007450:	080073fd 	.word	0x080073fd
 8007454:	080075af 	.word	0x080075af
 8007458:	080073fd 	.word	0x080073fd
 800745c:	080074b1 	.word	0x080074b1
 8007460:	080073fd 	.word	0x080073fd
 8007464:	080073fd 	.word	0x080073fd
 8007468:	08007577 	.word	0x08007577
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	1d1a      	adds	r2, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	602a      	str	r2, [r5, #0]
 8007474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800747c:	2301      	movs	r3, #1
 800747e:	e0a3      	b.n	80075c8 <_printf_i+0x1f4>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	6829      	ldr	r1, [r5, #0]
 8007484:	0606      	lsls	r6, r0, #24
 8007486:	f101 0304 	add.w	r3, r1, #4
 800748a:	d50a      	bpl.n	80074a2 <_printf_i+0xce>
 800748c:	680e      	ldr	r6, [r1, #0]
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	2e00      	cmp	r6, #0
 8007492:	da03      	bge.n	800749c <_printf_i+0xc8>
 8007494:	232d      	movs	r3, #45	; 0x2d
 8007496:	4276      	negs	r6, r6
 8007498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749c:	485e      	ldr	r0, [pc, #376]	; (8007618 <_printf_i+0x244>)
 800749e:	230a      	movs	r3, #10
 80074a0:	e019      	b.n	80074d6 <_printf_i+0x102>
 80074a2:	680e      	ldr	r6, [r1, #0]
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074aa:	bf18      	it	ne
 80074ac:	b236      	sxthne	r6, r6
 80074ae:	e7ef      	b.n	8007490 <_printf_i+0xbc>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	6820      	ldr	r0, [r4, #0]
 80074b4:	1d19      	adds	r1, r3, #4
 80074b6:	6029      	str	r1, [r5, #0]
 80074b8:	0601      	lsls	r1, r0, #24
 80074ba:	d501      	bpl.n	80074c0 <_printf_i+0xec>
 80074bc:	681e      	ldr	r6, [r3, #0]
 80074be:	e002      	b.n	80074c6 <_printf_i+0xf2>
 80074c0:	0646      	lsls	r6, r0, #25
 80074c2:	d5fb      	bpl.n	80074bc <_printf_i+0xe8>
 80074c4:	881e      	ldrh	r6, [r3, #0]
 80074c6:	4854      	ldr	r0, [pc, #336]	; (8007618 <_printf_i+0x244>)
 80074c8:	2f6f      	cmp	r7, #111	; 0x6f
 80074ca:	bf0c      	ite	eq
 80074cc:	2308      	moveq	r3, #8
 80074ce:	230a      	movne	r3, #10
 80074d0:	2100      	movs	r1, #0
 80074d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d6:	6865      	ldr	r5, [r4, #4]
 80074d8:	60a5      	str	r5, [r4, #8]
 80074da:	2d00      	cmp	r5, #0
 80074dc:	bfa2      	ittt	ge
 80074de:	6821      	ldrge	r1, [r4, #0]
 80074e0:	f021 0104 	bicge.w	r1, r1, #4
 80074e4:	6021      	strge	r1, [r4, #0]
 80074e6:	b90e      	cbnz	r6, 80074ec <_printf_i+0x118>
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	d04d      	beq.n	8007588 <_printf_i+0x1b4>
 80074ec:	4615      	mov	r5, r2
 80074ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80074f2:	fb03 6711 	mls	r7, r3, r1, r6
 80074f6:	5dc7      	ldrb	r7, [r0, r7]
 80074f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074fc:	4637      	mov	r7, r6
 80074fe:	42bb      	cmp	r3, r7
 8007500:	460e      	mov	r6, r1
 8007502:	d9f4      	bls.n	80074ee <_printf_i+0x11a>
 8007504:	2b08      	cmp	r3, #8
 8007506:	d10b      	bne.n	8007520 <_printf_i+0x14c>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	07de      	lsls	r6, r3, #31
 800750c:	d508      	bpl.n	8007520 <_printf_i+0x14c>
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	6861      	ldr	r1, [r4, #4]
 8007512:	4299      	cmp	r1, r3
 8007514:	bfde      	ittt	le
 8007516:	2330      	movle	r3, #48	; 0x30
 8007518:	f805 3c01 	strble.w	r3, [r5, #-1]
 800751c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007520:	1b52      	subs	r2, r2, r5
 8007522:	6122      	str	r2, [r4, #16]
 8007524:	f8cd a000 	str.w	sl, [sp]
 8007528:	464b      	mov	r3, r9
 800752a:	aa03      	add	r2, sp, #12
 800752c:	4621      	mov	r1, r4
 800752e:	4640      	mov	r0, r8
 8007530:	f7ff fee2 	bl	80072f8 <_printf_common>
 8007534:	3001      	adds	r0, #1
 8007536:	d14c      	bne.n	80075d2 <_printf_i+0x1fe>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	b004      	add	sp, #16
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007542:	4835      	ldr	r0, [pc, #212]	; (8007618 <_printf_i+0x244>)
 8007544:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007548:	6829      	ldr	r1, [r5, #0]
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007550:	6029      	str	r1, [r5, #0]
 8007552:	061d      	lsls	r5, r3, #24
 8007554:	d514      	bpl.n	8007580 <_printf_i+0x1ac>
 8007556:	07df      	lsls	r7, r3, #31
 8007558:	bf44      	itt	mi
 800755a:	f043 0320 	orrmi.w	r3, r3, #32
 800755e:	6023      	strmi	r3, [r4, #0]
 8007560:	b91e      	cbnz	r6, 800756a <_printf_i+0x196>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	f023 0320 	bic.w	r3, r3, #32
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	2310      	movs	r3, #16
 800756c:	e7b0      	b.n	80074d0 <_printf_i+0xfc>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	f043 0320 	orr.w	r3, r3, #32
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	2378      	movs	r3, #120	; 0x78
 8007578:	4828      	ldr	r0, [pc, #160]	; (800761c <_printf_i+0x248>)
 800757a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800757e:	e7e3      	b.n	8007548 <_printf_i+0x174>
 8007580:	0659      	lsls	r1, r3, #25
 8007582:	bf48      	it	mi
 8007584:	b2b6      	uxthmi	r6, r6
 8007586:	e7e6      	b.n	8007556 <_printf_i+0x182>
 8007588:	4615      	mov	r5, r2
 800758a:	e7bb      	b.n	8007504 <_printf_i+0x130>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	6826      	ldr	r6, [r4, #0]
 8007590:	6961      	ldr	r1, [r4, #20]
 8007592:	1d18      	adds	r0, r3, #4
 8007594:	6028      	str	r0, [r5, #0]
 8007596:	0635      	lsls	r5, r6, #24
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0x1cc>
 800759c:	6019      	str	r1, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0x1d2>
 80075a0:	0670      	lsls	r0, r6, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0x1c8>
 80075a4:	8019      	strh	r1, [r3, #0]
 80075a6:	2300      	movs	r3, #0
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	4615      	mov	r5, r2
 80075ac:	e7ba      	b.n	8007524 <_printf_i+0x150>
 80075ae:	682b      	ldr	r3, [r5, #0]
 80075b0:	1d1a      	adds	r2, r3, #4
 80075b2:	602a      	str	r2, [r5, #0]
 80075b4:	681d      	ldr	r5, [r3, #0]
 80075b6:	6862      	ldr	r2, [r4, #4]
 80075b8:	2100      	movs	r1, #0
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7f8 fe10 	bl	80001e0 <memchr>
 80075c0:	b108      	cbz	r0, 80075c6 <_printf_i+0x1f2>
 80075c2:	1b40      	subs	r0, r0, r5
 80075c4:	6060      	str	r0, [r4, #4]
 80075c6:	6863      	ldr	r3, [r4, #4]
 80075c8:	6123      	str	r3, [r4, #16]
 80075ca:	2300      	movs	r3, #0
 80075cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d0:	e7a8      	b.n	8007524 <_printf_i+0x150>
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	462a      	mov	r2, r5
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	47d0      	blx	sl
 80075dc:	3001      	adds	r0, #1
 80075de:	d0ab      	beq.n	8007538 <_printf_i+0x164>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	079b      	lsls	r3, r3, #30
 80075e4:	d413      	bmi.n	800760e <_printf_i+0x23a>
 80075e6:	68e0      	ldr	r0, [r4, #12]
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	4298      	cmp	r0, r3
 80075ec:	bfb8      	it	lt
 80075ee:	4618      	movlt	r0, r3
 80075f0:	e7a4      	b.n	800753c <_printf_i+0x168>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4632      	mov	r2, r6
 80075f6:	4649      	mov	r1, r9
 80075f8:	4640      	mov	r0, r8
 80075fa:	47d0      	blx	sl
 80075fc:	3001      	adds	r0, #1
 80075fe:	d09b      	beq.n	8007538 <_printf_i+0x164>
 8007600:	3501      	adds	r5, #1
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	9903      	ldr	r1, [sp, #12]
 8007606:	1a5b      	subs	r3, r3, r1
 8007608:	42ab      	cmp	r3, r5
 800760a:	dcf2      	bgt.n	80075f2 <_printf_i+0x21e>
 800760c:	e7eb      	b.n	80075e6 <_printf_i+0x212>
 800760e:	2500      	movs	r5, #0
 8007610:	f104 0619 	add.w	r6, r4, #25
 8007614:	e7f5      	b.n	8007602 <_printf_i+0x22e>
 8007616:	bf00      	nop
 8007618:	08009996 	.word	0x08009996
 800761c:	080099a7 	.word	0x080099a7

08007620 <iprintf>:
 8007620:	b40f      	push	{r0, r1, r2, r3}
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <iprintf+0x2c>)
 8007624:	b513      	push	{r0, r1, r4, lr}
 8007626:	681c      	ldr	r4, [r3, #0]
 8007628:	b124      	cbz	r4, 8007634 <iprintf+0x14>
 800762a:	69a3      	ldr	r3, [r4, #24]
 800762c:	b913      	cbnz	r3, 8007634 <iprintf+0x14>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fee0 	bl	80083f4 <__sinit>
 8007634:	ab05      	add	r3, sp, #20
 8007636:	9a04      	ldr	r2, [sp, #16]
 8007638:	68a1      	ldr	r1, [r4, #8]
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	4620      	mov	r0, r4
 800763e:	f001 fc2b 	bl	8008e98 <_vfiprintf_r>
 8007642:	b002      	add	sp, #8
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	b004      	add	sp, #16
 800764a:	4770      	bx	lr
 800764c:	20000010 	.word	0x20000010

08007650 <quorem>:
 8007650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	6903      	ldr	r3, [r0, #16]
 8007656:	690c      	ldr	r4, [r1, #16]
 8007658:	42a3      	cmp	r3, r4
 800765a:	4607      	mov	r7, r0
 800765c:	f2c0 8081 	blt.w	8007762 <quorem+0x112>
 8007660:	3c01      	subs	r4, #1
 8007662:	f101 0814 	add.w	r8, r1, #20
 8007666:	f100 0514 	add.w	r5, r0, #20
 800766a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007678:	3301      	adds	r3, #1
 800767a:	429a      	cmp	r2, r3
 800767c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007684:	fbb2 f6f3 	udiv	r6, r2, r3
 8007688:	d331      	bcc.n	80076ee <quorem+0x9e>
 800768a:	f04f 0e00 	mov.w	lr, #0
 800768e:	4640      	mov	r0, r8
 8007690:	46ac      	mov	ip, r5
 8007692:	46f2      	mov	sl, lr
 8007694:	f850 2b04 	ldr.w	r2, [r0], #4
 8007698:	b293      	uxth	r3, r2
 800769a:	fb06 e303 	mla	r3, r6, r3, lr
 800769e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ebaa 0303 	sub.w	r3, sl, r3
 80076a8:	f8dc a000 	ldr.w	sl, [ip]
 80076ac:	0c12      	lsrs	r2, r2, #16
 80076ae:	fa13 f38a 	uxtah	r3, r3, sl
 80076b2:	fb06 e202 	mla	r2, r6, r2, lr
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	9b00      	ldr	r3, [sp, #0]
 80076ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076be:	b292      	uxth	r2, r2
 80076c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076cc:	4581      	cmp	r9, r0
 80076ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d2:	f84c 3b04 	str.w	r3, [ip], #4
 80076d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076da:	d2db      	bcs.n	8007694 <quorem+0x44>
 80076dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80076e0:	b92b      	cbnz	r3, 80076ee <quorem+0x9e>
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	429d      	cmp	r5, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	d32e      	bcc.n	800774a <quorem+0xfa>
 80076ec:	613c      	str	r4, [r7, #16]
 80076ee:	4638      	mov	r0, r7
 80076f0:	f001 f9b0 	bl	8008a54 <__mcmp>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	db24      	blt.n	8007742 <quorem+0xf2>
 80076f8:	3601      	adds	r6, #1
 80076fa:	4628      	mov	r0, r5
 80076fc:	f04f 0c00 	mov.w	ip, #0
 8007700:	f858 2b04 	ldr.w	r2, [r8], #4
 8007704:	f8d0 e000 	ldr.w	lr, [r0]
 8007708:	b293      	uxth	r3, r2
 800770a:	ebac 0303 	sub.w	r3, ip, r3
 800770e:	0c12      	lsrs	r2, r2, #16
 8007710:	fa13 f38e 	uxtah	r3, r3, lr
 8007714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007722:	45c1      	cmp	r9, r8
 8007724:	f840 3b04 	str.w	r3, [r0], #4
 8007728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800772c:	d2e8      	bcs.n	8007700 <quorem+0xb0>
 800772e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007736:	b922      	cbnz	r2, 8007742 <quorem+0xf2>
 8007738:	3b04      	subs	r3, #4
 800773a:	429d      	cmp	r5, r3
 800773c:	461a      	mov	r2, r3
 800773e:	d30a      	bcc.n	8007756 <quorem+0x106>
 8007740:	613c      	str	r4, [r7, #16]
 8007742:	4630      	mov	r0, r6
 8007744:	b003      	add	sp, #12
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	3b04      	subs	r3, #4
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1cc      	bne.n	80076ec <quorem+0x9c>
 8007752:	3c01      	subs	r4, #1
 8007754:	e7c7      	b.n	80076e6 <quorem+0x96>
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	3b04      	subs	r3, #4
 800775a:	2a00      	cmp	r2, #0
 800775c:	d1f0      	bne.n	8007740 <quorem+0xf0>
 800775e:	3c01      	subs	r4, #1
 8007760:	e7eb      	b.n	800773a <quorem+0xea>
 8007762:	2000      	movs	r0, #0
 8007764:	e7ee      	b.n	8007744 <quorem+0xf4>
	...

08007768 <_dtoa_r>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b04 	vpush	{d8-d9}
 8007770:	ec57 6b10 	vmov	r6, r7, d0
 8007774:	b093      	sub	sp, #76	; 0x4c
 8007776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800777c:	9106      	str	r1, [sp, #24]
 800777e:	ee10 aa10 	vmov	sl, s0
 8007782:	4604      	mov	r4, r0
 8007784:	9209      	str	r2, [sp, #36]	; 0x24
 8007786:	930c      	str	r3, [sp, #48]	; 0x30
 8007788:	46bb      	mov	fp, r7
 800778a:	b975      	cbnz	r5, 80077aa <_dtoa_r+0x42>
 800778c:	2010      	movs	r0, #16
 800778e:	f000 fed7 	bl	8008540 <malloc>
 8007792:	4602      	mov	r2, r0
 8007794:	6260      	str	r0, [r4, #36]	; 0x24
 8007796:	b920      	cbnz	r0, 80077a2 <_dtoa_r+0x3a>
 8007798:	4ba7      	ldr	r3, [pc, #668]	; (8007a38 <_dtoa_r+0x2d0>)
 800779a:	21ea      	movs	r1, #234	; 0xea
 800779c:	48a7      	ldr	r0, [pc, #668]	; (8007a3c <_dtoa_r+0x2d4>)
 800779e:	f001 fdd1 	bl	8009344 <__assert_func>
 80077a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077a6:	6005      	str	r5, [r0, #0]
 80077a8:	60c5      	str	r5, [r0, #12]
 80077aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	b151      	cbz	r1, 80077c6 <_dtoa_r+0x5e>
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	604a      	str	r2, [r1, #4]
 80077b4:	2301      	movs	r3, #1
 80077b6:	4093      	lsls	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 ff08 	bl	80085d0 <_Bfree>
 80077c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	1e3b      	subs	r3, r7, #0
 80077c8:	bfaa      	itet	ge
 80077ca:	2300      	movge	r3, #0
 80077cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077d0:	f8c8 3000 	strge.w	r3, [r8]
 80077d4:	4b9a      	ldr	r3, [pc, #616]	; (8007a40 <_dtoa_r+0x2d8>)
 80077d6:	bfbc      	itt	lt
 80077d8:	2201      	movlt	r2, #1
 80077da:	f8c8 2000 	strlt.w	r2, [r8]
 80077de:	ea33 030b 	bics.w	r3, r3, fp
 80077e2:	d11b      	bne.n	800781c <_dtoa_r+0xb4>
 80077e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f0:	4333      	orrs	r3, r6
 80077f2:	f000 8592 	beq.w	800831a <_dtoa_r+0xbb2>
 80077f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f8:	b963      	cbnz	r3, 8007814 <_dtoa_r+0xac>
 80077fa:	4b92      	ldr	r3, [pc, #584]	; (8007a44 <_dtoa_r+0x2dc>)
 80077fc:	e022      	b.n	8007844 <_dtoa_r+0xdc>
 80077fe:	4b92      	ldr	r3, [pc, #584]	; (8007a48 <_dtoa_r+0x2e0>)
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	3308      	adds	r3, #8
 8007804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	b013      	add	sp, #76	; 0x4c
 800780c:	ecbd 8b04 	vpop	{d8-d9}
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	4b8b      	ldr	r3, [pc, #556]	; (8007a44 <_dtoa_r+0x2dc>)
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	3303      	adds	r3, #3
 800781a:	e7f3      	b.n	8007804 <_dtoa_r+0x9c>
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	4650      	mov	r0, sl
 8007822:	4659      	mov	r1, fp
 8007824:	f7f9 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8007828:	ec4b ab19 	vmov	d9, sl, fp
 800782c:	4680      	mov	r8, r0
 800782e:	b158      	cbz	r0, 8007848 <_dtoa_r+0xe0>
 8007830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007832:	2301      	movs	r3, #1
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 856b 	beq.w	8008314 <_dtoa_r+0xbac>
 800783e:	4883      	ldr	r0, [pc, #524]	; (8007a4c <_dtoa_r+0x2e4>)
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	1e43      	subs	r3, r0, #1
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	e7df      	b.n	8007808 <_dtoa_r+0xa0>
 8007848:	ec4b ab10 	vmov	d0, sl, fp
 800784c:	aa10      	add	r2, sp, #64	; 0x40
 800784e:	a911      	add	r1, sp, #68	; 0x44
 8007850:	4620      	mov	r0, r4
 8007852:	f001 f9a5 	bl	8008ba0 <__d2b>
 8007856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800785a:	ee08 0a10 	vmov	s16, r0
 800785e:	2d00      	cmp	r5, #0
 8007860:	f000 8084 	beq.w	800796c <_dtoa_r+0x204>
 8007864:	ee19 3a90 	vmov	r3, s19
 8007868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007870:	4656      	mov	r6, sl
 8007872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800787e:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <_dtoa_r+0x2e8>)
 8007880:	2200      	movs	r2, #0
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcff 	bl	8000288 <__aeabi_dsub>
 800788a:	a365      	add	r3, pc, #404	; (adr r3, 8007a20 <_dtoa_r+0x2b8>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 feb2 	bl	80005f8 <__aeabi_dmul>
 8007894:	a364      	add	r3, pc, #400	; (adr r3, 8007a28 <_dtoa_r+0x2c0>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 fcf7 	bl	800028c <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	4628      	mov	r0, r5
 80078a2:	460f      	mov	r7, r1
 80078a4:	f7f8 fe3e 	bl	8000524 <__aeabi_i2d>
 80078a8:	a361      	add	r3, pc, #388	; (adr r3, 8007a30 <_dtoa_r+0x2c8>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f8 fce7 	bl	800028c <__adddf3>
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	f7f9 f949 	bl	8000b58 <__aeabi_d2iz>
 80078c6:	2200      	movs	r2, #0
 80078c8:	9000      	str	r0, [sp, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	4630      	mov	r0, r6
 80078ce:	4639      	mov	r1, r7
 80078d0:	f7f9 f904 	bl	8000adc <__aeabi_dcmplt>
 80078d4:	b150      	cbz	r0, 80078ec <_dtoa_r+0x184>
 80078d6:	9800      	ldr	r0, [sp, #0]
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	f7f9 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e4:	b910      	cbnz	r0, 80078ec <_dtoa_r+0x184>
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	2b16      	cmp	r3, #22
 80078f0:	d85a      	bhi.n	80079a8 <_dtoa_r+0x240>
 80078f2:	9a00      	ldr	r2, [sp, #0]
 80078f4:	4b57      	ldr	r3, [pc, #348]	; (8007a54 <_dtoa_r+0x2ec>)
 80078f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	ec51 0b19 	vmov	r0, r1, d9
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d050      	beq.n	80079ac <_dtoa_r+0x244>
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	3b01      	subs	r3, #1
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	930b      	str	r3, [sp, #44]	; 0x2c
 8007914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007916:	1b5d      	subs	r5, r3, r5
 8007918:	1e6b      	subs	r3, r5, #1
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	bf45      	ittet	mi
 800791e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007922:	9304      	strmi	r3, [sp, #16]
 8007924:	2300      	movpl	r3, #0
 8007926:	2300      	movmi	r3, #0
 8007928:	bf4c      	ite	mi
 800792a:	9305      	strmi	r3, [sp, #20]
 800792c:	9304      	strpl	r3, [sp, #16]
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	db3d      	blt.n	80079b0 <_dtoa_r+0x248>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	9a00      	ldr	r2, [sp, #0]
 8007938:	920a      	str	r2, [sp, #40]	; 0x28
 800793a:	4413      	add	r3, r2
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	2300      	movs	r3, #0
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	2b09      	cmp	r3, #9
 8007946:	f200 8089 	bhi.w	8007a5c <_dtoa_r+0x2f4>
 800794a:	2b05      	cmp	r3, #5
 800794c:	bfc4      	itt	gt
 800794e:	3b04      	subgt	r3, #4
 8007950:	9306      	strgt	r3, [sp, #24]
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	f1a3 0302 	sub.w	r3, r3, #2
 8007958:	bfcc      	ite	gt
 800795a:	2500      	movgt	r5, #0
 800795c:	2501      	movle	r5, #1
 800795e:	2b03      	cmp	r3, #3
 8007960:	f200 8087 	bhi.w	8007a72 <_dtoa_r+0x30a>
 8007964:	e8df f003 	tbb	[pc, r3]
 8007968:	59383a2d 	.word	0x59383a2d
 800796c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007970:	441d      	add	r5, r3
 8007972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007976:	2b20      	cmp	r3, #32
 8007978:	bfc1      	itttt	gt
 800797a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800797e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007982:	fa0b f303 	lslgt.w	r3, fp, r3
 8007986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800798a:	bfda      	itte	le
 800798c:	f1c3 0320 	rsble	r3, r3, #32
 8007990:	fa06 f003 	lslle.w	r0, r6, r3
 8007994:	4318      	orrgt	r0, r3
 8007996:	f7f8 fdb5 	bl	8000504 <__aeabi_ui2d>
 800799a:	2301      	movs	r3, #1
 800799c:	4606      	mov	r6, r0
 800799e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079a2:	3d01      	subs	r5, #1
 80079a4:	930e      	str	r3, [sp, #56]	; 0x38
 80079a6:	e76a      	b.n	800787e <_dtoa_r+0x116>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e7b2      	b.n	8007912 <_dtoa_r+0x1aa>
 80079ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80079ae:	e7b1      	b.n	8007914 <_dtoa_r+0x1ac>
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	9a00      	ldr	r2, [sp, #0]
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	4253      	negs	r3, r2
 80079ba:	9307      	str	r3, [sp, #28]
 80079bc:	2300      	movs	r3, #0
 80079be:	930a      	str	r3, [sp, #40]	; 0x28
 80079c0:	e7bf      	b.n	8007942 <_dtoa_r+0x1da>
 80079c2:	2300      	movs	r3, #0
 80079c4:	9308      	str	r3, [sp, #32]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc55      	bgt.n	8007a78 <_dtoa_r+0x310>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079d2:	461a      	mov	r2, r3
 80079d4:	9209      	str	r2, [sp, #36]	; 0x24
 80079d6:	e00c      	b.n	80079f2 <_dtoa_r+0x28a>
 80079d8:	2301      	movs	r3, #1
 80079da:	e7f3      	b.n	80079c4 <_dtoa_r+0x25c>
 80079dc:	2300      	movs	r3, #0
 80079de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	4413      	add	r3, r2
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	3301      	adds	r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	bfb8      	it	lt
 80079f0:	2301      	movlt	r3, #1
 80079f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079f4:	2200      	movs	r2, #0
 80079f6:	6042      	str	r2, [r0, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f102 0614 	add.w	r6, r2, #20
 80079fe:	429e      	cmp	r6, r3
 8007a00:	6841      	ldr	r1, [r0, #4]
 8007a02:	d93d      	bls.n	8007a80 <_dtoa_r+0x318>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fda3 	bl	8008550 <_Balloc>
 8007a0a:	9001      	str	r0, [sp, #4]
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d13b      	bne.n	8007a88 <_dtoa_r+0x320>
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <_dtoa_r+0x2f0>)
 8007a12:	4602      	mov	r2, r0
 8007a14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a18:	e6c0      	b.n	800779c <_dtoa_r+0x34>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e7df      	b.n	80079de <_dtoa_r+0x276>
 8007a1e:	bf00      	nop
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	080099c5 	.word	0x080099c5
 8007a3c:	080099dc 	.word	0x080099dc
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	080099c1 	.word	0x080099c1
 8007a48:	080099b8 	.word	0x080099b8
 8007a4c:	08009995 	.word	0x08009995
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009b30 	.word	0x08009b30
 8007a58:	08009a37 	.word	0x08009a37
 8007a5c:	2501      	movs	r5, #1
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9306      	str	r3, [sp, #24]
 8007a62:	9508      	str	r5, [sp, #32]
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295
 8007a68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2312      	movs	r3, #18
 8007a70:	e7b0      	b.n	80079d4 <_dtoa_r+0x26c>
 8007a72:	2301      	movs	r3, #1
 8007a74:	9308      	str	r3, [sp, #32]
 8007a76:	e7f5      	b.n	8007a64 <_dtoa_r+0x2fc>
 8007a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7e:	e7b8      	b.n	80079f2 <_dtoa_r+0x28a>
 8007a80:	3101      	adds	r1, #1
 8007a82:	6041      	str	r1, [r0, #4]
 8007a84:	0052      	lsls	r2, r2, #1
 8007a86:	e7b8      	b.n	80079fa <_dtoa_r+0x292>
 8007a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8a:	9a01      	ldr	r2, [sp, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	2b0e      	cmp	r3, #14
 8007a92:	f200 809d 	bhi.w	8007bd0 <_dtoa_r+0x468>
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	f000 809a 	beq.w	8007bd0 <_dtoa_r+0x468>
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd32      	ble.n	8007b08 <_dtoa_r+0x3a0>
 8007aa2:	4ab7      	ldr	r2, [pc, #732]	; (8007d80 <_dtoa_r+0x618>)
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	05d8      	lsls	r0, r3, #23
 8007ab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ab8:	d516      	bpl.n	8007ae8 <_dtoa_r+0x380>
 8007aba:	4bb2      	ldr	r3, [pc, #712]	; (8007d84 <_dtoa_r+0x61c>)
 8007abc:	ec51 0b19 	vmov	r0, r1, d9
 8007ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ac4:	f7f8 fec2 	bl	800084c <__aeabi_ddiv>
 8007ac8:	f007 070f 	and.w	r7, r7, #15
 8007acc:	4682      	mov	sl, r0
 8007ace:	468b      	mov	fp, r1
 8007ad0:	2503      	movs	r5, #3
 8007ad2:	4eac      	ldr	r6, [pc, #688]	; (8007d84 <_dtoa_r+0x61c>)
 8007ad4:	b957      	cbnz	r7, 8007aec <_dtoa_r+0x384>
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	464b      	mov	r3, r9
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 feb5 	bl	800084c <__aeabi_ddiv>
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	e028      	b.n	8007b3a <_dtoa_r+0x3d2>
 8007ae8:	2502      	movs	r5, #2
 8007aea:	e7f2      	b.n	8007ad2 <_dtoa_r+0x36a>
 8007aec:	07f9      	lsls	r1, r7, #31
 8007aee:	d508      	bpl.n	8007b02 <_dtoa_r+0x39a>
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af8:	f7f8 fd7e 	bl	80005f8 <__aeabi_dmul>
 8007afc:	3501      	adds	r5, #1
 8007afe:	4680      	mov	r8, r0
 8007b00:	4689      	mov	r9, r1
 8007b02:	107f      	asrs	r7, r7, #1
 8007b04:	3608      	adds	r6, #8
 8007b06:	e7e5      	b.n	8007ad4 <_dtoa_r+0x36c>
 8007b08:	f000 809b 	beq.w	8007c42 <_dtoa_r+0x4da>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	4f9d      	ldr	r7, [pc, #628]	; (8007d84 <_dtoa_r+0x61c>)
 8007b10:	425e      	negs	r6, r3
 8007b12:	4b9b      	ldr	r3, [pc, #620]	; (8007d80 <_dtoa_r+0x618>)
 8007b14:	f006 020f 	and.w	r2, r6, #15
 8007b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	ec51 0b19 	vmov	r0, r1, d9
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	4682      	mov	sl, r0
 8007b2c:	468b      	mov	fp, r1
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2502      	movs	r5, #2
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d17a      	bne.n	8007c2c <_dtoa_r+0x4c4>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1d3      	bne.n	8007ae2 <_dtoa_r+0x37a>
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8082 	beq.w	8007c46 <_dtoa_r+0x4de>
 8007b42:	4b91      	ldr	r3, [pc, #580]	; (8007d88 <_dtoa_r+0x620>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	4650      	mov	r0, sl
 8007b48:	4659      	mov	r1, fp
 8007b4a:	f7f8 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d079      	beq.n	8007c46 <_dtoa_r+0x4de>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d076      	beq.n	8007c46 <_dtoa_r+0x4de>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd36      	ble.n	8007bcc <_dtoa_r+0x464>
 8007b5e:	9b00      	ldr	r3, [sp, #0]
 8007b60:	4650      	mov	r0, sl
 8007b62:	4659      	mov	r1, fp
 8007b64:	1e5f      	subs	r7, r3, #1
 8007b66:	2200      	movs	r2, #0
 8007b68:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <_dtoa_r+0x624>)
 8007b6a:	f7f8 fd45 	bl	80005f8 <__aeabi_dmul>
 8007b6e:	9e02      	ldr	r6, [sp, #8]
 8007b70:	4682      	mov	sl, r0
 8007b72:	468b      	mov	fp, r1
 8007b74:	3501      	adds	r5, #1
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7f8 fcd4 	bl	8000524 <__aeabi_i2d>
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	465b      	mov	r3, fp
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	4b82      	ldr	r3, [pc, #520]	; (8007d90 <_dtoa_r+0x628>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	f7f8 fb80 	bl	800028c <__adddf3>
 8007b8c:	46d0      	mov	r8, sl
 8007b8e:	46d9      	mov	r9, fp
 8007b90:	4682      	mov	sl, r0
 8007b92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d158      	bne.n	8007c4c <_dtoa_r+0x4e4>
 8007b9a:	4b7e      	ldr	r3, [pc, #504]	; (8007d94 <_dtoa_r+0x62c>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	f7f8 fb71 	bl	8000288 <__aeabi_dsub>
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	465b      	mov	r3, fp
 8007baa:	4680      	mov	r8, r0
 8007bac:	4689      	mov	r9, r1
 8007bae:	f7f8 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f040 8295 	bne.w	80080e2 <_dtoa_r+0x97a>
 8007bb8:	4652      	mov	r2, sl
 8007bba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f040 8289 	bne.w	80080de <_dtoa_r+0x976>
 8007bcc:	ec5b ab19 	vmov	sl, fp, d9
 8007bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f2c0 8148 	blt.w	8007e68 <_dtoa_r+0x700>
 8007bd8:	9a00      	ldr	r2, [sp, #0]
 8007bda:	2a0e      	cmp	r2, #14
 8007bdc:	f300 8144 	bgt.w	8007e68 <_dtoa_r+0x700>
 8007be0:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <_dtoa_r+0x618>)
 8007be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f280 80d5 	bge.w	8007d9c <_dtoa_r+0x634>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f300 80d1 	bgt.w	8007d9c <_dtoa_r+0x634>
 8007bfa:	f040 826f 	bne.w	80080dc <_dtoa_r+0x974>
 8007bfe:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <_dtoa_r+0x62c>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	f7f8 fcf7 	bl	80005f8 <__aeabi_dmul>
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	f7f8 ff79 	bl	8000b04 <__aeabi_dcmpge>
 8007c12:	9e03      	ldr	r6, [sp, #12]
 8007c14:	4637      	mov	r7, r6
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f040 8245 	bne.w	80080a6 <_dtoa_r+0x93e>
 8007c1c:	9d01      	ldr	r5, [sp, #4]
 8007c1e:	2331      	movs	r3, #49	; 0x31
 8007c20:	f805 3b01 	strb.w	r3, [r5], #1
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	e240      	b.n	80080ae <_dtoa_r+0x946>
 8007c2c:	07f2      	lsls	r2, r6, #31
 8007c2e:	d505      	bpl.n	8007c3c <_dtoa_r+0x4d4>
 8007c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c34:	f7f8 fce0 	bl	80005f8 <__aeabi_dmul>
 8007c38:	3501      	adds	r5, #1
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	1076      	asrs	r6, r6, #1
 8007c3e:	3708      	adds	r7, #8
 8007c40:	e777      	b.n	8007b32 <_dtoa_r+0x3ca>
 8007c42:	2502      	movs	r5, #2
 8007c44:	e779      	b.n	8007b3a <_dtoa_r+0x3d2>
 8007c46:	9f00      	ldr	r7, [sp, #0]
 8007c48:	9e03      	ldr	r6, [sp, #12]
 8007c4a:	e794      	b.n	8007b76 <_dtoa_r+0x40e>
 8007c4c:	9901      	ldr	r1, [sp, #4]
 8007c4e:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <_dtoa_r+0x618>)
 8007c50:	4431      	add	r1, r6
 8007c52:	910d      	str	r1, [sp, #52]	; 0x34
 8007c54:	9908      	ldr	r1, [sp, #32]
 8007c56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d043      	beq.n	8007cea <_dtoa_r+0x582>
 8007c62:	494d      	ldr	r1, [pc, #308]	; (8007d98 <_dtoa_r+0x630>)
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7f8 fdf1 	bl	800084c <__aeabi_ddiv>
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	9d01      	ldr	r5, [sp, #4]
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7f8 ff6c 	bl	8000b58 <__aeabi_d2iz>
 8007c80:	4606      	mov	r6, r0
 8007c82:	f7f8 fc4f 	bl	8000524 <__aeabi_i2d>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fafb 	bl	8000288 <__aeabi_dsub>
 8007c92:	3630      	adds	r6, #48	; 0x30
 8007c94:	f805 6b01 	strb.w	r6, [r5], #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	f7f8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d163      	bne.n	8007d70 <_dtoa_r+0x608>
 8007ca8:	4642      	mov	r2, r8
 8007caa:	464b      	mov	r3, r9
 8007cac:	4936      	ldr	r1, [pc, #216]	; (8007d88 <_dtoa_r+0x620>)
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f7f8 faea 	bl	8000288 <__aeabi_dsub>
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	f7f8 ff10 	bl	8000adc <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f040 80b5 	bne.w	8007e2c <_dtoa_r+0x6c4>
 8007cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc4:	429d      	cmp	r5, r3
 8007cc6:	d081      	beq.n	8007bcc <_dtoa_r+0x464>
 8007cc8:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <_dtoa_r+0x624>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	f7f8 fc92 	bl	80005f8 <__aeabi_dmul>
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <_dtoa_r+0x624>)
 8007cd6:	4682      	mov	sl, r0
 8007cd8:	468b      	mov	fp, r1
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f7f8 fc8a 	bl	80005f8 <__aeabi_dmul>
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	e7c6      	b.n	8007c78 <_dtoa_r+0x510>
 8007cea:	4650      	mov	r0, sl
 8007cec:	4659      	mov	r1, fp
 8007cee:	f7f8 fc83 	bl	80005f8 <__aeabi_dmul>
 8007cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf4:	9d01      	ldr	r5, [sp, #4]
 8007cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	468b      	mov	fp, r1
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7f8 ff2a 	bl	8000b58 <__aeabi_d2iz>
 8007d04:	4606      	mov	r6, r0
 8007d06:	f7f8 fc0d 	bl	8000524 <__aeabi_i2d>
 8007d0a:	3630      	adds	r6, #48	; 0x30
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fab8 	bl	8000288 <__aeabi_dsub>
 8007d18:	f805 6b01 	strb.w	r6, [r5], #1
 8007d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	4680      	mov	r8, r0
 8007d22:	4689      	mov	r9, r1
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	d124      	bne.n	8007d74 <_dtoa_r+0x60c>
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <_dtoa_r+0x630>)
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	4659      	mov	r1, fp
 8007d30:	f7f8 faac 	bl	800028c <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	f7f8 feec 	bl	8000b18 <__aeabi_dcmpgt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d173      	bne.n	8007e2c <_dtoa_r+0x6c4>
 8007d44:	4652      	mov	r2, sl
 8007d46:	465b      	mov	r3, fp
 8007d48:	4913      	ldr	r1, [pc, #76]	; (8007d98 <_dtoa_r+0x630>)
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fec0 	bl	8000adc <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f43f af35 	beq.w	8007bcc <_dtoa_r+0x464>
 8007d62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d64:	1e6b      	subs	r3, r5, #1
 8007d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d0f8      	beq.n	8007d62 <_dtoa_r+0x5fa>
 8007d70:	9700      	str	r7, [sp, #0]
 8007d72:	e049      	b.n	8007e08 <_dtoa_r+0x6a0>
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <_dtoa_r+0x624>)
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	e7bd      	b.n	8007cfc <_dtoa_r+0x594>
 8007d80:	08009b30 	.word	0x08009b30
 8007d84:	08009b08 	.word	0x08009b08
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	40240000 	.word	0x40240000
 8007d90:	401c0000 	.word	0x401c0000
 8007d94:	40140000 	.word	0x40140000
 8007d98:	3fe00000 	.word	0x3fe00000
 8007d9c:	9d01      	ldr	r5, [sp, #4]
 8007d9e:	4656      	mov	r6, sl
 8007da0:	465f      	mov	r7, fp
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	4630      	mov	r0, r6
 8007da8:	4639      	mov	r1, r7
 8007daa:	f7f8 fd4f 	bl	800084c <__aeabi_ddiv>
 8007dae:	f7f8 fed3 	bl	8000b58 <__aeabi_d2iz>
 8007db2:	4682      	mov	sl, r0
 8007db4:	f7f8 fbb6 	bl	8000524 <__aeabi_i2d>
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	f7f8 fc1c 	bl	80005f8 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dcc:	f7f8 fa5c 	bl	8000288 <__aeabi_dsub>
 8007dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8007dd4:	9e01      	ldr	r6, [sp, #4]
 8007dd6:	9f03      	ldr	r7, [sp, #12]
 8007dd8:	1bae      	subs	r6, r5, r6
 8007dda:	42b7      	cmp	r7, r6
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	d135      	bne.n	8007e4e <_dtoa_r+0x6e6>
 8007de2:	f7f8 fa53 	bl	800028c <__adddf3>
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	f7f8 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8007df2:	b9d0      	cbnz	r0, 8007e2a <_dtoa_r+0x6c2>
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e00:	b110      	cbz	r0, 8007e08 <_dtoa_r+0x6a0>
 8007e02:	f01a 0f01 	tst.w	sl, #1
 8007e06:	d110      	bne.n	8007e2a <_dtoa_r+0x6c2>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	ee18 1a10 	vmov	r1, s16
 8007e0e:	f000 fbdf 	bl	80085d0 <_Bfree>
 8007e12:	2300      	movs	r3, #0
 8007e14:	9800      	ldr	r0, [sp, #0]
 8007e16:	702b      	strb	r3, [r5, #0]
 8007e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	6018      	str	r0, [r3, #0]
 8007e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f43f acf1 	beq.w	8007808 <_dtoa_r+0xa0>
 8007e26:	601d      	str	r5, [r3, #0]
 8007e28:	e4ee      	b.n	8007808 <_dtoa_r+0xa0>
 8007e2a:	9f00      	ldr	r7, [sp, #0]
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	461d      	mov	r5, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a39      	cmp	r2, #57	; 0x39
 8007e36:	d106      	bne.n	8007e46 <_dtoa_r+0x6de>
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d1f7      	bne.n	8007e2e <_dtoa_r+0x6c6>
 8007e3e:	9901      	ldr	r1, [sp, #4]
 8007e40:	2230      	movs	r2, #48	; 0x30
 8007e42:	3701      	adds	r7, #1
 8007e44:	700a      	strb	r2, [r1, #0]
 8007e46:	781a      	ldrb	r2, [r3, #0]
 8007e48:	3201      	adds	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e790      	b.n	8007d70 <_dtoa_r+0x608>
 8007e4e:	4ba6      	ldr	r3, [pc, #664]	; (80080e8 <_dtoa_r+0x980>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	f7f8 fbd1 	bl	80005f8 <__aeabi_dmul>
 8007e56:	2200      	movs	r2, #0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	f7f8 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d09d      	beq.n	8007da2 <_dtoa_r+0x63a>
 8007e66:	e7cf      	b.n	8007e08 <_dtoa_r+0x6a0>
 8007e68:	9a08      	ldr	r2, [sp, #32]
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	f000 80d7 	beq.w	800801e <_dtoa_r+0x8b6>
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	2a01      	cmp	r2, #1
 8007e74:	f300 80ba 	bgt.w	8007fec <_dtoa_r+0x884>
 8007e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80b2 	beq.w	8007fe4 <_dtoa_r+0x87c>
 8007e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e84:	9e07      	ldr	r6, [sp, #28]
 8007e86:	9d04      	ldr	r5, [sp, #16]
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	9204      	str	r2, [sp, #16]
 8007e8e:	9a05      	ldr	r2, [sp, #20]
 8007e90:	2101      	movs	r1, #1
 8007e92:	441a      	add	r2, r3
 8007e94:	4620      	mov	r0, r4
 8007e96:	9205      	str	r2, [sp, #20]
 8007e98:	f000 fc52 	bl	8008740 <__i2b>
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	dd0c      	ble.n	8007ebc <_dtoa_r+0x754>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd09      	ble.n	8007ebc <_dtoa_r+0x754>
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	9a04      	ldr	r2, [sp, #16]
 8007eac:	bfa8      	it	ge
 8007eae:	462b      	movge	r3, r5
 8007eb0:	1ad2      	subs	r2, r2, r3
 8007eb2:	9204      	str	r2, [sp, #16]
 8007eb4:	9a05      	ldr	r2, [sp, #20]
 8007eb6:	1aed      	subs	r5, r5, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	b31b      	cbz	r3, 8007f08 <_dtoa_r+0x7a0>
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80af 	beq.w	8008026 <_dtoa_r+0x8be>
 8007ec8:	2e00      	cmp	r6, #0
 8007eca:	dd13      	ble.n	8007ef4 <_dtoa_r+0x78c>
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4632      	mov	r2, r6
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fcf5 	bl	80088c0 <__pow5mult>
 8007ed6:	ee18 2a10 	vmov	r2, s16
 8007eda:	4601      	mov	r1, r0
 8007edc:	4607      	mov	r7, r0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fc44 	bl	800876c <__multiply>
 8007ee4:	ee18 1a10 	vmov	r1, s16
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fb70 	bl	80085d0 <_Bfree>
 8007ef0:	ee08 8a10 	vmov	s16, r8
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	1b9a      	subs	r2, r3, r6
 8007ef8:	d006      	beq.n	8007f08 <_dtoa_r+0x7a0>
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fcde 	bl	80088c0 <__pow5mult>
 8007f04:	ee08 0a10 	vmov	s16, r0
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fc18 	bl	8008740 <__i2b>
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	4606      	mov	r6, r0
 8007f16:	f340 8088 	ble.w	800802a <_dtoa_r+0x8c2>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fcce 	bl	80088c0 <__pow5mult>
 8007f24:	9b06      	ldr	r3, [sp, #24]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	4606      	mov	r6, r0
 8007f2a:	f340 8081 	ble.w	8008030 <_dtoa_r+0x8c8>
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	6933      	ldr	r3, [r6, #16]
 8007f34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f38:	6918      	ldr	r0, [r3, #16]
 8007f3a:	f000 fbb1 	bl	80086a0 <__hi0bits>
 8007f3e:	f1c0 0020 	rsb	r0, r0, #32
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	4418      	add	r0, r3
 8007f46:	f010 001f 	ands.w	r0, r0, #31
 8007f4a:	f000 8092 	beq.w	8008072 <_dtoa_r+0x90a>
 8007f4e:	f1c0 0320 	rsb	r3, r0, #32
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	f340 808a 	ble.w	800806c <_dtoa_r+0x904>
 8007f58:	f1c0 001c 	rsb	r0, r0, #28
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	4403      	add	r3, r0
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	4403      	add	r3, r0
 8007f66:	4405      	add	r5, r0
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd07      	ble.n	8007f80 <_dtoa_r+0x818>
 8007f70:	ee18 1a10 	vmov	r1, s16
 8007f74:	461a      	mov	r2, r3
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 fcfc 	bl	8008974 <__lshift>
 8007f7c:	ee08 0a10 	vmov	s16, r0
 8007f80:	9b05      	ldr	r3, [sp, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd05      	ble.n	8007f92 <_dtoa_r+0x82a>
 8007f86:	4631      	mov	r1, r6
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fcf2 	bl	8008974 <__lshift>
 8007f90:	4606      	mov	r6, r0
 8007f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d06e      	beq.n	8008076 <_dtoa_r+0x90e>
 8007f98:	ee18 0a10 	vmov	r0, s16
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	f000 fd59 	bl	8008a54 <__mcmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	da67      	bge.n	8008076 <_dtoa_r+0x90e>
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	ee18 1a10 	vmov	r1, s16
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fb2d 	bl	8008614 <__multadd>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	ee08 0a10 	vmov	s16, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 81b1 	beq.w	8008328 <_dtoa_r+0xbc0>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4639      	mov	r1, r7
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fb21 	bl	8008614 <__multadd>
 8007fd2:	9b02      	ldr	r3, [sp, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f300 808e 	bgt.w	80080f8 <_dtoa_r+0x990>
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dc51      	bgt.n	8008086 <_dtoa_r+0x91e>
 8007fe2:	e089      	b.n	80080f8 <_dtoa_r+0x990>
 8007fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fea:	e74b      	b.n	8007e84 <_dtoa_r+0x71c>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1e5e      	subs	r6, r3, #1
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	42b3      	cmp	r3, r6
 8007ff4:	bfbf      	itttt	lt
 8007ff6:	9b07      	ldrlt	r3, [sp, #28]
 8007ff8:	9607      	strlt	r6, [sp, #28]
 8007ffa:	1af2      	sublt	r2, r6, r3
 8007ffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ffe:	bfb6      	itet	lt
 8008000:	189b      	addlt	r3, r3, r2
 8008002:	1b9e      	subge	r6, r3, r6
 8008004:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	bfb8      	it	lt
 800800a:	2600      	movlt	r6, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	bfb7      	itett	lt
 8008010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008018:	1a9d      	sublt	r5, r3, r2
 800801a:	2300      	movlt	r3, #0
 800801c:	e734      	b.n	8007e88 <_dtoa_r+0x720>
 800801e:	9e07      	ldr	r6, [sp, #28]
 8008020:	9d04      	ldr	r5, [sp, #16]
 8008022:	9f08      	ldr	r7, [sp, #32]
 8008024:	e73b      	b.n	8007e9e <_dtoa_r+0x736>
 8008026:	9a07      	ldr	r2, [sp, #28]
 8008028:	e767      	b.n	8007efa <_dtoa_r+0x792>
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	2b01      	cmp	r3, #1
 800802e:	dc18      	bgt.n	8008062 <_dtoa_r+0x8fa>
 8008030:	f1ba 0f00 	cmp.w	sl, #0
 8008034:	d115      	bne.n	8008062 <_dtoa_r+0x8fa>
 8008036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803a:	b993      	cbnz	r3, 8008062 <_dtoa_r+0x8fa>
 800803c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	051b      	lsls	r3, r3, #20
 8008044:	b183      	cbz	r3, 8008068 <_dtoa_r+0x900>
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	3301      	adds	r3, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	3301      	adds	r3, #1
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	f04f 0801 	mov.w	r8, #1
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	f47f af6a 	bne.w	8007f32 <_dtoa_r+0x7ca>
 800805e:	2001      	movs	r0, #1
 8008060:	e76f      	b.n	8007f42 <_dtoa_r+0x7da>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	e7f6      	b.n	8008056 <_dtoa_r+0x8ee>
 8008068:	4698      	mov	r8, r3
 800806a:	e7f4      	b.n	8008056 <_dtoa_r+0x8ee>
 800806c:	f43f af7d 	beq.w	8007f6a <_dtoa_r+0x802>
 8008070:	4618      	mov	r0, r3
 8008072:	301c      	adds	r0, #28
 8008074:	e772      	b.n	8007f5c <_dtoa_r+0x7f4>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc37      	bgt.n	80080ec <_dtoa_r+0x984>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	2b02      	cmp	r3, #2
 8008080:	dd34      	ble.n	80080ec <_dtoa_r+0x984>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	b96b      	cbnz	r3, 80080a6 <_dtoa_r+0x93e>
 800808a:	4631      	mov	r1, r6
 800808c:	2205      	movs	r2, #5
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fac0 	bl	8008614 <__multadd>
 8008094:	4601      	mov	r1, r0
 8008096:	4606      	mov	r6, r0
 8008098:	ee18 0a10 	vmov	r0, s16
 800809c:	f000 fcda 	bl	8008a54 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f73f adbb 	bgt.w	8007c1c <_dtoa_r+0x4b4>
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	9d01      	ldr	r5, [sp, #4]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fa8b 	bl	80085d0 <_Bfree>
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	f43f aea4 	beq.w	8007e08 <_dtoa_r+0x6a0>
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d005      	beq.n	80080d2 <_dtoa_r+0x96a>
 80080c6:	45b8      	cmp	r8, r7
 80080c8:	d003      	beq.n	80080d2 <_dtoa_r+0x96a>
 80080ca:	4641      	mov	r1, r8
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fa7f 	bl	80085d0 <_Bfree>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fa7b 	bl	80085d0 <_Bfree>
 80080da:	e695      	b.n	8007e08 <_dtoa_r+0x6a0>
 80080dc:	2600      	movs	r6, #0
 80080de:	4637      	mov	r7, r6
 80080e0:	e7e1      	b.n	80080a6 <_dtoa_r+0x93e>
 80080e2:	9700      	str	r7, [sp, #0]
 80080e4:	4637      	mov	r7, r6
 80080e6:	e599      	b.n	8007c1c <_dtoa_r+0x4b4>
 80080e8:	40240000 	.word	0x40240000
 80080ec:	9b08      	ldr	r3, [sp, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80ca 	beq.w	8008288 <_dtoa_r+0xb20>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x9a0>
 80080fc:	4639      	mov	r1, r7
 80080fe:	462a      	mov	r2, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fc37 	bl	8008974 <__lshift>
 8008106:	4607      	mov	r7, r0
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	d05b      	beq.n	80081c6 <_dtoa_r+0xa5e>
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fa1d 	bl	8008550 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b928      	cbnz	r0, 8008126 <_dtoa_r+0x9be>
 800811a:	4b87      	ldr	r3, [pc, #540]	; (8008338 <_dtoa_r+0xbd0>)
 800811c:	4602      	mov	r2, r0
 800811e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008122:	f7ff bb3b 	b.w	800779c <_dtoa_r+0x34>
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	3202      	adds	r2, #2
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	f107 010c 	add.w	r1, r7, #12
 8008130:	300c      	adds	r0, #12
 8008132:	f7fe fdf5 	bl	8006d20 <memcpy>
 8008136:	2201      	movs	r2, #1
 8008138:	4629      	mov	r1, r5
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fc1a 	bl	8008974 <__lshift>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	f103 0901 	add.w	r9, r3, #1
 8008146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800814a:	4413      	add	r3, r2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	f00a 0301 	and.w	r3, sl, #1
 8008152:	46b8      	mov	r8, r7
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	4607      	mov	r7, r0
 8008158:	4631      	mov	r1, r6
 800815a:	ee18 0a10 	vmov	r0, s16
 800815e:	f7ff fa77 	bl	8007650 <quorem>
 8008162:	4641      	mov	r1, r8
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f000 fc71 	bl	8008a54 <__mcmp>
 8008172:	463a      	mov	r2, r7
 8008174:	9003      	str	r0, [sp, #12]
 8008176:	4631      	mov	r1, r6
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fc87 	bl	8008a8c <__mdiff>
 800817e:	68c2      	ldr	r2, [r0, #12]
 8008180:	f109 3bff 	add.w	fp, r9, #4294967295
 8008184:	4605      	mov	r5, r0
 8008186:	bb02      	cbnz	r2, 80081ca <_dtoa_r+0xa62>
 8008188:	4601      	mov	r1, r0
 800818a:	ee18 0a10 	vmov	r0, s16
 800818e:	f000 fc61 	bl	8008a54 <__mcmp>
 8008192:	4602      	mov	r2, r0
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	9207      	str	r2, [sp, #28]
 800819a:	f000 fa19 	bl	80085d0 <_Bfree>
 800819e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081a2:	ea43 0102 	orr.w	r1, r3, r2
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	430b      	orrs	r3, r1
 80081aa:	464d      	mov	r5, r9
 80081ac:	d10f      	bne.n	80081ce <_dtoa_r+0xa66>
 80081ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081b2:	d02a      	beq.n	800820a <_dtoa_r+0xaa2>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dd02      	ble.n	80081c0 <_dtoa_r+0xa58>
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081c0:	f88b a000 	strb.w	sl, [fp]
 80081c4:	e775      	b.n	80080b2 <_dtoa_r+0x94a>
 80081c6:	4638      	mov	r0, r7
 80081c8:	e7ba      	b.n	8008140 <_dtoa_r+0x9d8>
 80081ca:	2201      	movs	r2, #1
 80081cc:	e7e2      	b.n	8008194 <_dtoa_r+0xa2c>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	db04      	blt.n	80081de <_dtoa_r+0xa76>
 80081d4:	9906      	ldr	r1, [sp, #24]
 80081d6:	430b      	orrs	r3, r1
 80081d8:	9904      	ldr	r1, [sp, #16]
 80081da:	430b      	orrs	r3, r1
 80081dc:	d122      	bne.n	8008224 <_dtoa_r+0xabc>
 80081de:	2a00      	cmp	r2, #0
 80081e0:	ddee      	ble.n	80081c0 <_dtoa_r+0xa58>
 80081e2:	ee18 1a10 	vmov	r1, s16
 80081e6:	2201      	movs	r2, #1
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fbc3 	bl	8008974 <__lshift>
 80081ee:	4631      	mov	r1, r6
 80081f0:	ee08 0a10 	vmov	s16, r0
 80081f4:	f000 fc2e 	bl	8008a54 <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc03      	bgt.n	8008204 <_dtoa_r+0xa9c>
 80081fc:	d1e0      	bne.n	80081c0 <_dtoa_r+0xa58>
 80081fe:	f01a 0f01 	tst.w	sl, #1
 8008202:	d0dd      	beq.n	80081c0 <_dtoa_r+0xa58>
 8008204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008208:	d1d7      	bne.n	80081ba <_dtoa_r+0xa52>
 800820a:	2339      	movs	r3, #57	; 0x39
 800820c:	f88b 3000 	strb.w	r3, [fp]
 8008210:	462b      	mov	r3, r5
 8008212:	461d      	mov	r5, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800821a:	2a39      	cmp	r2, #57	; 0x39
 800821c:	d071      	beq.n	8008302 <_dtoa_r+0xb9a>
 800821e:	3201      	adds	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e746      	b.n	80080b2 <_dtoa_r+0x94a>
 8008224:	2a00      	cmp	r2, #0
 8008226:	dd07      	ble.n	8008238 <_dtoa_r+0xad0>
 8008228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800822c:	d0ed      	beq.n	800820a <_dtoa_r+0xaa2>
 800822e:	f10a 0301 	add.w	r3, sl, #1
 8008232:	f88b 3000 	strb.w	r3, [fp]
 8008236:	e73c      	b.n	80080b2 <_dtoa_r+0x94a>
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800823e:	4599      	cmp	r9, r3
 8008240:	d047      	beq.n	80082d2 <_dtoa_r+0xb6a>
 8008242:	ee18 1a10 	vmov	r1, s16
 8008246:	2300      	movs	r3, #0
 8008248:	220a      	movs	r2, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f9e2 	bl	8008614 <__multadd>
 8008250:	45b8      	cmp	r8, r7
 8008252:	ee08 0a10 	vmov	s16, r0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	f04f 020a 	mov.w	r2, #10
 800825e:	4641      	mov	r1, r8
 8008260:	4620      	mov	r0, r4
 8008262:	d106      	bne.n	8008272 <_dtoa_r+0xb0a>
 8008264:	f000 f9d6 	bl	8008614 <__multadd>
 8008268:	4680      	mov	r8, r0
 800826a:	4607      	mov	r7, r0
 800826c:	f109 0901 	add.w	r9, r9, #1
 8008270:	e772      	b.n	8008158 <_dtoa_r+0x9f0>
 8008272:	f000 f9cf 	bl	8008614 <__multadd>
 8008276:	4639      	mov	r1, r7
 8008278:	4680      	mov	r8, r0
 800827a:	2300      	movs	r3, #0
 800827c:	220a      	movs	r2, #10
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f9c8 	bl	8008614 <__multadd>
 8008284:	4607      	mov	r7, r0
 8008286:	e7f1      	b.n	800826c <_dtoa_r+0xb04>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	9d01      	ldr	r5, [sp, #4]
 800828e:	ee18 0a10 	vmov	r0, s16
 8008292:	4631      	mov	r1, r6
 8008294:	f7ff f9dc 	bl	8007650 <quorem>
 8008298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	f805 ab01 	strb.w	sl, [r5], #1
 80082a2:	1aea      	subs	r2, r5, r3
 80082a4:	9b02      	ldr	r3, [sp, #8]
 80082a6:	4293      	cmp	r3, r2
 80082a8:	dd09      	ble.n	80082be <_dtoa_r+0xb56>
 80082aa:	ee18 1a10 	vmov	r1, s16
 80082ae:	2300      	movs	r3, #0
 80082b0:	220a      	movs	r2, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f9ae 	bl	8008614 <__multadd>
 80082b8:	ee08 0a10 	vmov	s16, r0
 80082bc:	e7e7      	b.n	800828e <_dtoa_r+0xb26>
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfc8      	it	gt
 80082c4:	461d      	movgt	r5, r3
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	bfd8      	it	le
 80082ca:	2501      	movle	r5, #1
 80082cc:	441d      	add	r5, r3
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	2201      	movs	r2, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fb4b 	bl	8008974 <__lshift>
 80082de:	4631      	mov	r1, r6
 80082e0:	ee08 0a10 	vmov	s16, r0
 80082e4:	f000 fbb6 	bl	8008a54 <__mcmp>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dc91      	bgt.n	8008210 <_dtoa_r+0xaa8>
 80082ec:	d102      	bne.n	80082f4 <_dtoa_r+0xb8c>
 80082ee:	f01a 0f01 	tst.w	sl, #1
 80082f2:	d18d      	bne.n	8008210 <_dtoa_r+0xaa8>
 80082f4:	462b      	mov	r3, r5
 80082f6:	461d      	mov	r5, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a30      	cmp	r2, #48	; 0x30
 80082fe:	d0fa      	beq.n	80082f6 <_dtoa_r+0xb8e>
 8008300:	e6d7      	b.n	80080b2 <_dtoa_r+0x94a>
 8008302:	9a01      	ldr	r2, [sp, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d184      	bne.n	8008212 <_dtoa_r+0xaaa>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2331      	movs	r3, #49	; 0x31
 8008310:	7013      	strb	r3, [r2, #0]
 8008312:	e6ce      	b.n	80080b2 <_dtoa_r+0x94a>
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <_dtoa_r+0xbd4>)
 8008316:	f7ff ba95 	b.w	8007844 <_dtoa_r+0xdc>
 800831a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f aa6e 	bne.w	80077fe <_dtoa_r+0x96>
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <_dtoa_r+0xbd8>)
 8008324:	f7ff ba8e 	b.w	8007844 <_dtoa_r+0xdc>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dcae      	bgt.n	800828c <_dtoa_r+0xb24>
 800832e:	9b06      	ldr	r3, [sp, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	f73f aea8 	bgt.w	8008086 <_dtoa_r+0x91e>
 8008336:	e7a9      	b.n	800828c <_dtoa_r+0xb24>
 8008338:	08009a37 	.word	0x08009a37
 800833c:	08009994 	.word	0x08009994
 8008340:	080099b8 	.word	0x080099b8

08008344 <std>:
 8008344:	2300      	movs	r3, #0
 8008346:	b510      	push	{r4, lr}
 8008348:	4604      	mov	r4, r0
 800834a:	e9c0 3300 	strd	r3, r3, [r0]
 800834e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008352:	6083      	str	r3, [r0, #8]
 8008354:	8181      	strh	r1, [r0, #12]
 8008356:	6643      	str	r3, [r0, #100]	; 0x64
 8008358:	81c2      	strh	r2, [r0, #14]
 800835a:	6183      	str	r3, [r0, #24]
 800835c:	4619      	mov	r1, r3
 800835e:	2208      	movs	r2, #8
 8008360:	305c      	adds	r0, #92	; 0x5c
 8008362:	f7fe fceb 	bl	8006d3c <memset>
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <std+0x38>)
 8008368:	6263      	str	r3, [r4, #36]	; 0x24
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <std+0x3c>)
 800836c:	62a3      	str	r3, [r4, #40]	; 0x28
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <std+0x40>)
 8008370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <std+0x44>)
 8008374:	6224      	str	r4, [r4, #32]
 8008376:	6323      	str	r3, [r4, #48]	; 0x30
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	08009119 	.word	0x08009119
 8008380:	0800913b 	.word	0x0800913b
 8008384:	08009173 	.word	0x08009173
 8008388:	08009197 	.word	0x08009197

0800838c <_cleanup_r>:
 800838c:	4901      	ldr	r1, [pc, #4]	; (8008394 <_cleanup_r+0x8>)
 800838e:	f000 b8af 	b.w	80084f0 <_fwalk_reent>
 8008392:	bf00      	nop
 8008394:	080094ad 	.word	0x080094ad

08008398 <__sfmoreglue>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	2268      	movs	r2, #104	; 0x68
 800839c:	1e4d      	subs	r5, r1, #1
 800839e:	4355      	muls	r5, r2
 80083a0:	460e      	mov	r6, r1
 80083a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083a6:	f000 fcd9 	bl	8008d5c <_malloc_r>
 80083aa:	4604      	mov	r4, r0
 80083ac:	b140      	cbz	r0, 80083c0 <__sfmoreglue+0x28>
 80083ae:	2100      	movs	r1, #0
 80083b0:	e9c0 1600 	strd	r1, r6, [r0]
 80083b4:	300c      	adds	r0, #12
 80083b6:	60a0      	str	r0, [r4, #8]
 80083b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083bc:	f7fe fcbe 	bl	8006d3c <memset>
 80083c0:	4620      	mov	r0, r4
 80083c2:	bd70      	pop	{r4, r5, r6, pc}

080083c4 <__sfp_lock_acquire>:
 80083c4:	4801      	ldr	r0, [pc, #4]	; (80083cc <__sfp_lock_acquire+0x8>)
 80083c6:	f000 b8b8 	b.w	800853a <__retarget_lock_acquire_recursive>
 80083ca:	bf00      	nop
 80083cc:	20003d5d 	.word	0x20003d5d

080083d0 <__sfp_lock_release>:
 80083d0:	4801      	ldr	r0, [pc, #4]	; (80083d8 <__sfp_lock_release+0x8>)
 80083d2:	f000 b8b3 	b.w	800853c <__retarget_lock_release_recursive>
 80083d6:	bf00      	nop
 80083d8:	20003d5d 	.word	0x20003d5d

080083dc <__sinit_lock_acquire>:
 80083dc:	4801      	ldr	r0, [pc, #4]	; (80083e4 <__sinit_lock_acquire+0x8>)
 80083de:	f000 b8ac 	b.w	800853a <__retarget_lock_acquire_recursive>
 80083e2:	bf00      	nop
 80083e4:	20003d5e 	.word	0x20003d5e

080083e8 <__sinit_lock_release>:
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__sinit_lock_release+0x8>)
 80083ea:	f000 b8a7 	b.w	800853c <__retarget_lock_release_recursive>
 80083ee:	bf00      	nop
 80083f0:	20003d5e 	.word	0x20003d5e

080083f4 <__sinit>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	f7ff fff0 	bl	80083dc <__sinit_lock_acquire>
 80083fc:	69a3      	ldr	r3, [r4, #24]
 80083fe:	b11b      	cbz	r3, 8008408 <__sinit+0x14>
 8008400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008404:	f7ff bff0 	b.w	80083e8 <__sinit_lock_release>
 8008408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800840c:	6523      	str	r3, [r4, #80]	; 0x50
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <__sinit+0x68>)
 8008410:	4a13      	ldr	r2, [pc, #76]	; (8008460 <__sinit+0x6c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	62a2      	str	r2, [r4, #40]	; 0x28
 8008416:	42a3      	cmp	r3, r4
 8008418:	bf04      	itt	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	61a3      	streq	r3, [r4, #24]
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f820 	bl	8008464 <__sfp>
 8008424:	6060      	str	r0, [r4, #4]
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f81c 	bl	8008464 <__sfp>
 800842c:	60a0      	str	r0, [r4, #8]
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f818 	bl	8008464 <__sfp>
 8008434:	2200      	movs	r2, #0
 8008436:	60e0      	str	r0, [r4, #12]
 8008438:	2104      	movs	r1, #4
 800843a:	6860      	ldr	r0, [r4, #4]
 800843c:	f7ff ff82 	bl	8008344 <std>
 8008440:	68a0      	ldr	r0, [r4, #8]
 8008442:	2201      	movs	r2, #1
 8008444:	2109      	movs	r1, #9
 8008446:	f7ff ff7d 	bl	8008344 <std>
 800844a:	68e0      	ldr	r0, [r4, #12]
 800844c:	2202      	movs	r2, #2
 800844e:	2112      	movs	r1, #18
 8008450:	f7ff ff78 	bl	8008344 <std>
 8008454:	2301      	movs	r3, #1
 8008456:	61a3      	str	r3, [r4, #24]
 8008458:	e7d2      	b.n	8008400 <__sinit+0xc>
 800845a:	bf00      	nop
 800845c:	08009980 	.word	0x08009980
 8008460:	0800838d 	.word	0x0800838d

08008464 <__sfp>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	4607      	mov	r7, r0
 8008468:	f7ff ffac 	bl	80083c4 <__sfp_lock_acquire>
 800846c:	4b1e      	ldr	r3, [pc, #120]	; (80084e8 <__sfp+0x84>)
 800846e:	681e      	ldr	r6, [r3, #0]
 8008470:	69b3      	ldr	r3, [r6, #24]
 8008472:	b913      	cbnz	r3, 800847a <__sfp+0x16>
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff ffbd 	bl	80083f4 <__sinit>
 800847a:	3648      	adds	r6, #72	; 0x48
 800847c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008480:	3b01      	subs	r3, #1
 8008482:	d503      	bpl.n	800848c <__sfp+0x28>
 8008484:	6833      	ldr	r3, [r6, #0]
 8008486:	b30b      	cbz	r3, 80084cc <__sfp+0x68>
 8008488:	6836      	ldr	r6, [r6, #0]
 800848a:	e7f7      	b.n	800847c <__sfp+0x18>
 800848c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008490:	b9d5      	cbnz	r5, 80084c8 <__sfp+0x64>
 8008492:	4b16      	ldr	r3, [pc, #88]	; (80084ec <__sfp+0x88>)
 8008494:	60e3      	str	r3, [r4, #12]
 8008496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800849a:	6665      	str	r5, [r4, #100]	; 0x64
 800849c:	f000 f84c 	bl	8008538 <__retarget_lock_init_recursive>
 80084a0:	f7ff ff96 	bl	80083d0 <__sfp_lock_release>
 80084a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084ac:	6025      	str	r5, [r4, #0]
 80084ae:	61a5      	str	r5, [r4, #24]
 80084b0:	2208      	movs	r2, #8
 80084b2:	4629      	mov	r1, r5
 80084b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084b8:	f7fe fc40 	bl	8006d3c <memset>
 80084bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084c4:	4620      	mov	r0, r4
 80084c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c8:	3468      	adds	r4, #104	; 0x68
 80084ca:	e7d9      	b.n	8008480 <__sfp+0x1c>
 80084cc:	2104      	movs	r1, #4
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7ff ff62 	bl	8008398 <__sfmoreglue>
 80084d4:	4604      	mov	r4, r0
 80084d6:	6030      	str	r0, [r6, #0]
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1d5      	bne.n	8008488 <__sfp+0x24>
 80084dc:	f7ff ff78 	bl	80083d0 <__sfp_lock_release>
 80084e0:	230c      	movs	r3, #12
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	e7ee      	b.n	80084c4 <__sfp+0x60>
 80084e6:	bf00      	nop
 80084e8:	08009980 	.word	0x08009980
 80084ec:	ffff0001 	.word	0xffff0001

080084f0 <_fwalk_reent>:
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f4:	4606      	mov	r6, r0
 80084f6:	4688      	mov	r8, r1
 80084f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084fc:	2700      	movs	r7, #0
 80084fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008502:	f1b9 0901 	subs.w	r9, r9, #1
 8008506:	d505      	bpl.n	8008514 <_fwalk_reent+0x24>
 8008508:	6824      	ldr	r4, [r4, #0]
 800850a:	2c00      	cmp	r4, #0
 800850c:	d1f7      	bne.n	80084fe <_fwalk_reent+0xe>
 800850e:	4638      	mov	r0, r7
 8008510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008514:	89ab      	ldrh	r3, [r5, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d907      	bls.n	800852a <_fwalk_reent+0x3a>
 800851a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800851e:	3301      	adds	r3, #1
 8008520:	d003      	beq.n	800852a <_fwalk_reent+0x3a>
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	47c0      	blx	r8
 8008528:	4307      	orrs	r7, r0
 800852a:	3568      	adds	r5, #104	; 0x68
 800852c:	e7e9      	b.n	8008502 <_fwalk_reent+0x12>
	...

08008530 <_localeconv_r>:
 8008530:	4800      	ldr	r0, [pc, #0]	; (8008534 <_localeconv_r+0x4>)
 8008532:	4770      	bx	lr
 8008534:	20000164 	.word	0x20000164

08008538 <__retarget_lock_init_recursive>:
 8008538:	4770      	bx	lr

0800853a <__retarget_lock_acquire_recursive>:
 800853a:	4770      	bx	lr

0800853c <__retarget_lock_release_recursive>:
 800853c:	4770      	bx	lr
	...

08008540 <malloc>:
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <malloc+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f000 bc09 	b.w	8008d5c <_malloc_r>
 800854a:	bf00      	nop
 800854c:	20000010 	.word	0x20000010

08008550 <_Balloc>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008554:	4604      	mov	r4, r0
 8008556:	460d      	mov	r5, r1
 8008558:	b976      	cbnz	r6, 8008578 <_Balloc+0x28>
 800855a:	2010      	movs	r0, #16
 800855c:	f7ff fff0 	bl	8008540 <malloc>
 8008560:	4602      	mov	r2, r0
 8008562:	6260      	str	r0, [r4, #36]	; 0x24
 8008564:	b920      	cbnz	r0, 8008570 <_Balloc+0x20>
 8008566:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <_Balloc+0x78>)
 8008568:	4818      	ldr	r0, [pc, #96]	; (80085cc <_Balloc+0x7c>)
 800856a:	2166      	movs	r1, #102	; 0x66
 800856c:	f000 feea 	bl	8009344 <__assert_func>
 8008570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008574:	6006      	str	r6, [r0, #0]
 8008576:	60c6      	str	r6, [r0, #12]
 8008578:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800857a:	68f3      	ldr	r3, [r6, #12]
 800857c:	b183      	cbz	r3, 80085a0 <_Balloc+0x50>
 800857e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008586:	b9b8      	cbnz	r0, 80085b8 <_Balloc+0x68>
 8008588:	2101      	movs	r1, #1
 800858a:	fa01 f605 	lsl.w	r6, r1, r5
 800858e:	1d72      	adds	r2, r6, #5
 8008590:	0092      	lsls	r2, r2, #2
 8008592:	4620      	mov	r0, r4
 8008594:	f000 fb60 	bl	8008c58 <_calloc_r>
 8008598:	b160      	cbz	r0, 80085b4 <_Balloc+0x64>
 800859a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800859e:	e00e      	b.n	80085be <_Balloc+0x6e>
 80085a0:	2221      	movs	r2, #33	; 0x21
 80085a2:	2104      	movs	r1, #4
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fb57 	bl	8008c58 <_calloc_r>
 80085aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ac:	60f0      	str	r0, [r6, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e4      	bne.n	800857e <_Balloc+0x2e>
 80085b4:	2000      	movs	r0, #0
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	6802      	ldr	r2, [r0, #0]
 80085ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085be:	2300      	movs	r3, #0
 80085c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c4:	e7f7      	b.n	80085b6 <_Balloc+0x66>
 80085c6:	bf00      	nop
 80085c8:	080099c5 	.word	0x080099c5
 80085cc:	08009aa8 	.word	0x08009aa8

080085d0 <_Bfree>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085d4:	4605      	mov	r5, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b976      	cbnz	r6, 80085f8 <_Bfree+0x28>
 80085da:	2010      	movs	r0, #16
 80085dc:	f7ff ffb0 	bl	8008540 <malloc>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6268      	str	r0, [r5, #36]	; 0x24
 80085e4:	b920      	cbnz	r0, 80085f0 <_Bfree+0x20>
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <_Bfree+0x3c>)
 80085e8:	4809      	ldr	r0, [pc, #36]	; (8008610 <_Bfree+0x40>)
 80085ea:	218a      	movs	r1, #138	; 0x8a
 80085ec:	f000 feaa 	bl	8009344 <__assert_func>
 80085f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f4:	6006      	str	r6, [r0, #0]
 80085f6:	60c6      	str	r6, [r0, #12]
 80085f8:	b13c      	cbz	r4, 800860a <_Bfree+0x3a>
 80085fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085fc:	6862      	ldr	r2, [r4, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008604:	6021      	str	r1, [r4, #0]
 8008606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	080099c5 	.word	0x080099c5
 8008610:	08009aa8 	.word	0x08009aa8

08008614 <__multadd>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	690d      	ldr	r5, [r1, #16]
 800861a:	4607      	mov	r7, r0
 800861c:	460c      	mov	r4, r1
 800861e:	461e      	mov	r6, r3
 8008620:	f101 0c14 	add.w	ip, r1, #20
 8008624:	2000      	movs	r0, #0
 8008626:	f8dc 3000 	ldr.w	r3, [ip]
 800862a:	b299      	uxth	r1, r3
 800862c:	fb02 6101 	mla	r1, r2, r1, r6
 8008630:	0c1e      	lsrs	r6, r3, #16
 8008632:	0c0b      	lsrs	r3, r1, #16
 8008634:	fb02 3306 	mla	r3, r2, r6, r3
 8008638:	b289      	uxth	r1, r1
 800863a:	3001      	adds	r0, #1
 800863c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008640:	4285      	cmp	r5, r0
 8008642:	f84c 1b04 	str.w	r1, [ip], #4
 8008646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800864a:	dcec      	bgt.n	8008626 <__multadd+0x12>
 800864c:	b30e      	cbz	r6, 8008692 <__multadd+0x7e>
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	42ab      	cmp	r3, r5
 8008652:	dc19      	bgt.n	8008688 <__multadd+0x74>
 8008654:	6861      	ldr	r1, [r4, #4]
 8008656:	4638      	mov	r0, r7
 8008658:	3101      	adds	r1, #1
 800865a:	f7ff ff79 	bl	8008550 <_Balloc>
 800865e:	4680      	mov	r8, r0
 8008660:	b928      	cbnz	r0, 800866e <__multadd+0x5a>
 8008662:	4602      	mov	r2, r0
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <__multadd+0x84>)
 8008666:	480d      	ldr	r0, [pc, #52]	; (800869c <__multadd+0x88>)
 8008668:	21b5      	movs	r1, #181	; 0xb5
 800866a:	f000 fe6b 	bl	8009344 <__assert_func>
 800866e:	6922      	ldr	r2, [r4, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	f104 010c 	add.w	r1, r4, #12
 8008676:	0092      	lsls	r2, r2, #2
 8008678:	300c      	adds	r0, #12
 800867a:	f7fe fb51 	bl	8006d20 <memcpy>
 800867e:	4621      	mov	r1, r4
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff ffa5 	bl	80085d0 <_Bfree>
 8008686:	4644      	mov	r4, r8
 8008688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800868c:	3501      	adds	r5, #1
 800868e:	615e      	str	r6, [r3, #20]
 8008690:	6125      	str	r5, [r4, #16]
 8008692:	4620      	mov	r0, r4
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	08009a37 	.word	0x08009a37
 800869c:	08009aa8 	.word	0x08009aa8

080086a0 <__hi0bits>:
 80086a0:	0c03      	lsrs	r3, r0, #16
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	b9d3      	cbnz	r3, 80086dc <__hi0bits+0x3c>
 80086a6:	0400      	lsls	r0, r0, #16
 80086a8:	2310      	movs	r3, #16
 80086aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086ae:	bf04      	itt	eq
 80086b0:	0200      	lsleq	r0, r0, #8
 80086b2:	3308      	addeq	r3, #8
 80086b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086b8:	bf04      	itt	eq
 80086ba:	0100      	lsleq	r0, r0, #4
 80086bc:	3304      	addeq	r3, #4
 80086be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086c2:	bf04      	itt	eq
 80086c4:	0080      	lsleq	r0, r0, #2
 80086c6:	3302      	addeq	r3, #2
 80086c8:	2800      	cmp	r0, #0
 80086ca:	db05      	blt.n	80086d8 <__hi0bits+0x38>
 80086cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086d0:	f103 0301 	add.w	r3, r3, #1
 80086d4:	bf08      	it	eq
 80086d6:	2320      	moveq	r3, #32
 80086d8:	4618      	mov	r0, r3
 80086da:	4770      	bx	lr
 80086dc:	2300      	movs	r3, #0
 80086de:	e7e4      	b.n	80086aa <__hi0bits+0xa>

080086e0 <__lo0bits>:
 80086e0:	6803      	ldr	r3, [r0, #0]
 80086e2:	f013 0207 	ands.w	r2, r3, #7
 80086e6:	4601      	mov	r1, r0
 80086e8:	d00b      	beq.n	8008702 <__lo0bits+0x22>
 80086ea:	07da      	lsls	r2, r3, #31
 80086ec:	d423      	bmi.n	8008736 <__lo0bits+0x56>
 80086ee:	0798      	lsls	r0, r3, #30
 80086f0:	bf49      	itett	mi
 80086f2:	085b      	lsrmi	r3, r3, #1
 80086f4:	089b      	lsrpl	r3, r3, #2
 80086f6:	2001      	movmi	r0, #1
 80086f8:	600b      	strmi	r3, [r1, #0]
 80086fa:	bf5c      	itt	pl
 80086fc:	600b      	strpl	r3, [r1, #0]
 80086fe:	2002      	movpl	r0, #2
 8008700:	4770      	bx	lr
 8008702:	b298      	uxth	r0, r3
 8008704:	b9a8      	cbnz	r0, 8008732 <__lo0bits+0x52>
 8008706:	0c1b      	lsrs	r3, r3, #16
 8008708:	2010      	movs	r0, #16
 800870a:	b2da      	uxtb	r2, r3
 800870c:	b90a      	cbnz	r2, 8008712 <__lo0bits+0x32>
 800870e:	3008      	adds	r0, #8
 8008710:	0a1b      	lsrs	r3, r3, #8
 8008712:	071a      	lsls	r2, r3, #28
 8008714:	bf04      	itt	eq
 8008716:	091b      	lsreq	r3, r3, #4
 8008718:	3004      	addeq	r0, #4
 800871a:	079a      	lsls	r2, r3, #30
 800871c:	bf04      	itt	eq
 800871e:	089b      	lsreq	r3, r3, #2
 8008720:	3002      	addeq	r0, #2
 8008722:	07da      	lsls	r2, r3, #31
 8008724:	d403      	bmi.n	800872e <__lo0bits+0x4e>
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	f100 0001 	add.w	r0, r0, #1
 800872c:	d005      	beq.n	800873a <__lo0bits+0x5a>
 800872e:	600b      	str	r3, [r1, #0]
 8008730:	4770      	bx	lr
 8008732:	4610      	mov	r0, r2
 8008734:	e7e9      	b.n	800870a <__lo0bits+0x2a>
 8008736:	2000      	movs	r0, #0
 8008738:	4770      	bx	lr
 800873a:	2020      	movs	r0, #32
 800873c:	4770      	bx	lr
	...

08008740 <__i2b>:
 8008740:	b510      	push	{r4, lr}
 8008742:	460c      	mov	r4, r1
 8008744:	2101      	movs	r1, #1
 8008746:	f7ff ff03 	bl	8008550 <_Balloc>
 800874a:	4602      	mov	r2, r0
 800874c:	b928      	cbnz	r0, 800875a <__i2b+0x1a>
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <__i2b+0x24>)
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <__i2b+0x28>)
 8008752:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008756:	f000 fdf5 	bl	8009344 <__assert_func>
 800875a:	2301      	movs	r3, #1
 800875c:	6144      	str	r4, [r0, #20]
 800875e:	6103      	str	r3, [r0, #16]
 8008760:	bd10      	pop	{r4, pc}
 8008762:	bf00      	nop
 8008764:	08009a37 	.word	0x08009a37
 8008768:	08009aa8 	.word	0x08009aa8

0800876c <__multiply>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	4691      	mov	r9, r2
 8008772:	690a      	ldr	r2, [r1, #16]
 8008774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	bfb8      	it	lt
 800877c:	460b      	movlt	r3, r1
 800877e:	460c      	mov	r4, r1
 8008780:	bfbc      	itt	lt
 8008782:	464c      	movlt	r4, r9
 8008784:	4699      	movlt	r9, r3
 8008786:	6927      	ldr	r7, [r4, #16]
 8008788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800878c:	68a3      	ldr	r3, [r4, #8]
 800878e:	6861      	ldr	r1, [r4, #4]
 8008790:	eb07 060a 	add.w	r6, r7, sl
 8008794:	42b3      	cmp	r3, r6
 8008796:	b085      	sub	sp, #20
 8008798:	bfb8      	it	lt
 800879a:	3101      	addlt	r1, #1
 800879c:	f7ff fed8 	bl	8008550 <_Balloc>
 80087a0:	b930      	cbnz	r0, 80087b0 <__multiply+0x44>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <__multiply+0x14c>)
 80087a6:	4845      	ldr	r0, [pc, #276]	; (80088bc <__multiply+0x150>)
 80087a8:	f240 115d 	movw	r1, #349	; 0x15d
 80087ac:	f000 fdca 	bl	8009344 <__assert_func>
 80087b0:	f100 0514 	add.w	r5, r0, #20
 80087b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087b8:	462b      	mov	r3, r5
 80087ba:	2200      	movs	r2, #0
 80087bc:	4543      	cmp	r3, r8
 80087be:	d321      	bcc.n	8008804 <__multiply+0x98>
 80087c0:	f104 0314 	add.w	r3, r4, #20
 80087c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087c8:	f109 0314 	add.w	r3, r9, #20
 80087cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	1b3a      	subs	r2, r7, r4
 80087d4:	3a15      	subs	r2, #21
 80087d6:	f022 0203 	bic.w	r2, r2, #3
 80087da:	3204      	adds	r2, #4
 80087dc:	f104 0115 	add.w	r1, r4, #21
 80087e0:	428f      	cmp	r7, r1
 80087e2:	bf38      	it	cc
 80087e4:	2204      	movcc	r2, #4
 80087e6:	9201      	str	r2, [sp, #4]
 80087e8:	9a02      	ldr	r2, [sp, #8]
 80087ea:	9303      	str	r3, [sp, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d80c      	bhi.n	800880a <__multiply+0x9e>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	dd03      	ble.n	80087fc <__multiply+0x90>
 80087f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d05a      	beq.n	80088b2 <__multiply+0x146>
 80087fc:	6106      	str	r6, [r0, #16]
 80087fe:	b005      	add	sp, #20
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	f843 2b04 	str.w	r2, [r3], #4
 8008808:	e7d8      	b.n	80087bc <__multiply+0x50>
 800880a:	f8b3 a000 	ldrh.w	sl, [r3]
 800880e:	f1ba 0f00 	cmp.w	sl, #0
 8008812:	d024      	beq.n	800885e <__multiply+0xf2>
 8008814:	f104 0e14 	add.w	lr, r4, #20
 8008818:	46a9      	mov	r9, r5
 800881a:	f04f 0c00 	mov.w	ip, #0
 800881e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008822:	f8d9 1000 	ldr.w	r1, [r9]
 8008826:	fa1f fb82 	uxth.w	fp, r2
 800882a:	b289      	uxth	r1, r1
 800882c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008830:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008834:	f8d9 2000 	ldr.w	r2, [r9]
 8008838:	4461      	add	r1, ip
 800883a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800883e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008846:	b289      	uxth	r1, r1
 8008848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800884c:	4577      	cmp	r7, lr
 800884e:	f849 1b04 	str.w	r1, [r9], #4
 8008852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008856:	d8e2      	bhi.n	800881e <__multiply+0xb2>
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	f845 c002 	str.w	ip, [r5, r2]
 800885e:	9a03      	ldr	r2, [sp, #12]
 8008860:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008864:	3304      	adds	r3, #4
 8008866:	f1b9 0f00 	cmp.w	r9, #0
 800886a:	d020      	beq.n	80088ae <__multiply+0x142>
 800886c:	6829      	ldr	r1, [r5, #0]
 800886e:	f104 0c14 	add.w	ip, r4, #20
 8008872:	46ae      	mov	lr, r5
 8008874:	f04f 0a00 	mov.w	sl, #0
 8008878:	f8bc b000 	ldrh.w	fp, [ip]
 800887c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008880:	fb09 220b 	mla	r2, r9, fp, r2
 8008884:	4492      	add	sl, r2
 8008886:	b289      	uxth	r1, r1
 8008888:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800888c:	f84e 1b04 	str.w	r1, [lr], #4
 8008890:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008894:	f8be 1000 	ldrh.w	r1, [lr]
 8008898:	0c12      	lsrs	r2, r2, #16
 800889a:	fb09 1102 	mla	r1, r9, r2, r1
 800889e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088a2:	4567      	cmp	r7, ip
 80088a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088a8:	d8e6      	bhi.n	8008878 <__multiply+0x10c>
 80088aa:	9a01      	ldr	r2, [sp, #4]
 80088ac:	50a9      	str	r1, [r5, r2]
 80088ae:	3504      	adds	r5, #4
 80088b0:	e79a      	b.n	80087e8 <__multiply+0x7c>
 80088b2:	3e01      	subs	r6, #1
 80088b4:	e79c      	b.n	80087f0 <__multiply+0x84>
 80088b6:	bf00      	nop
 80088b8:	08009a37 	.word	0x08009a37
 80088bc:	08009aa8 	.word	0x08009aa8

080088c0 <__pow5mult>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4615      	mov	r5, r2
 80088c6:	f012 0203 	ands.w	r2, r2, #3
 80088ca:	4606      	mov	r6, r0
 80088cc:	460f      	mov	r7, r1
 80088ce:	d007      	beq.n	80088e0 <__pow5mult+0x20>
 80088d0:	4c25      	ldr	r4, [pc, #148]	; (8008968 <__pow5mult+0xa8>)
 80088d2:	3a01      	subs	r2, #1
 80088d4:	2300      	movs	r3, #0
 80088d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088da:	f7ff fe9b 	bl	8008614 <__multadd>
 80088de:	4607      	mov	r7, r0
 80088e0:	10ad      	asrs	r5, r5, #2
 80088e2:	d03d      	beq.n	8008960 <__pow5mult+0xa0>
 80088e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088e6:	b97c      	cbnz	r4, 8008908 <__pow5mult+0x48>
 80088e8:	2010      	movs	r0, #16
 80088ea:	f7ff fe29 	bl	8008540 <malloc>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6270      	str	r0, [r6, #36]	; 0x24
 80088f2:	b928      	cbnz	r0, 8008900 <__pow5mult+0x40>
 80088f4:	4b1d      	ldr	r3, [pc, #116]	; (800896c <__pow5mult+0xac>)
 80088f6:	481e      	ldr	r0, [pc, #120]	; (8008970 <__pow5mult+0xb0>)
 80088f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088fc:	f000 fd22 	bl	8009344 <__assert_func>
 8008900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	60c4      	str	r4, [r0, #12]
 8008908:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800890c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008910:	b94c      	cbnz	r4, 8008926 <__pow5mult+0x66>
 8008912:	f240 2171 	movw	r1, #625	; 0x271
 8008916:	4630      	mov	r0, r6
 8008918:	f7ff ff12 	bl	8008740 <__i2b>
 800891c:	2300      	movs	r3, #0
 800891e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008922:	4604      	mov	r4, r0
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	07eb      	lsls	r3, r5, #31
 800892c:	d50a      	bpl.n	8008944 <__pow5mult+0x84>
 800892e:	4639      	mov	r1, r7
 8008930:	4622      	mov	r2, r4
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff ff1a 	bl	800876c <__multiply>
 8008938:	4639      	mov	r1, r7
 800893a:	4680      	mov	r8, r0
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff fe47 	bl	80085d0 <_Bfree>
 8008942:	4647      	mov	r7, r8
 8008944:	106d      	asrs	r5, r5, #1
 8008946:	d00b      	beq.n	8008960 <__pow5mult+0xa0>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	b938      	cbnz	r0, 800895c <__pow5mult+0x9c>
 800894c:	4622      	mov	r2, r4
 800894e:	4621      	mov	r1, r4
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ff0b 	bl	800876c <__multiply>
 8008956:	6020      	str	r0, [r4, #0]
 8008958:	f8c0 9000 	str.w	r9, [r0]
 800895c:	4604      	mov	r4, r0
 800895e:	e7e4      	b.n	800892a <__pow5mult+0x6a>
 8008960:	4638      	mov	r0, r7
 8008962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008966:	bf00      	nop
 8008968:	08009bf8 	.word	0x08009bf8
 800896c:	080099c5 	.word	0x080099c5
 8008970:	08009aa8 	.word	0x08009aa8

08008974 <__lshift>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	6849      	ldr	r1, [r1, #4]
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	4607      	mov	r7, r0
 8008986:	4691      	mov	r9, r2
 8008988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800898c:	f108 0601 	add.w	r6, r8, #1
 8008990:	42b3      	cmp	r3, r6
 8008992:	db0b      	blt.n	80089ac <__lshift+0x38>
 8008994:	4638      	mov	r0, r7
 8008996:	f7ff fddb 	bl	8008550 <_Balloc>
 800899a:	4605      	mov	r5, r0
 800899c:	b948      	cbnz	r0, 80089b2 <__lshift+0x3e>
 800899e:	4602      	mov	r2, r0
 80089a0:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <__lshift+0xd8>)
 80089a2:	482b      	ldr	r0, [pc, #172]	; (8008a50 <__lshift+0xdc>)
 80089a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089a8:	f000 fccc 	bl	8009344 <__assert_func>
 80089ac:	3101      	adds	r1, #1
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	e7ee      	b.n	8008990 <__lshift+0x1c>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f100 0114 	add.w	r1, r0, #20
 80089b8:	f100 0210 	add.w	r2, r0, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	4553      	cmp	r3, sl
 80089c0:	db37      	blt.n	8008a32 <__lshift+0xbe>
 80089c2:	6920      	ldr	r0, [r4, #16]
 80089c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c8:	f104 0314 	add.w	r3, r4, #20
 80089cc:	f019 091f 	ands.w	r9, r9, #31
 80089d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089d8:	d02f      	beq.n	8008a3a <__lshift+0xc6>
 80089da:	f1c9 0e20 	rsb	lr, r9, #32
 80089de:	468a      	mov	sl, r1
 80089e0:	f04f 0c00 	mov.w	ip, #0
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	fa02 f209 	lsl.w	r2, r2, r9
 80089ea:	ea42 020c 	orr.w	r2, r2, ip
 80089ee:	f84a 2b04 	str.w	r2, [sl], #4
 80089f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f6:	4298      	cmp	r0, r3
 80089f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089fc:	d8f2      	bhi.n	80089e4 <__lshift+0x70>
 80089fe:	1b03      	subs	r3, r0, r4
 8008a00:	3b15      	subs	r3, #21
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	3304      	adds	r3, #4
 8008a08:	f104 0215 	add.w	r2, r4, #21
 8008a0c:	4290      	cmp	r0, r2
 8008a0e:	bf38      	it	cc
 8008a10:	2304      	movcc	r3, #4
 8008a12:	f841 c003 	str.w	ip, [r1, r3]
 8008a16:	f1bc 0f00 	cmp.w	ip, #0
 8008a1a:	d001      	beq.n	8008a20 <__lshift+0xac>
 8008a1c:	f108 0602 	add.w	r6, r8, #2
 8008a20:	3e01      	subs	r6, #1
 8008a22:	4638      	mov	r0, r7
 8008a24:	612e      	str	r6, [r5, #16]
 8008a26:	4621      	mov	r1, r4
 8008a28:	f7ff fdd2 	bl	80085d0 <_Bfree>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c1      	b.n	80089be <__lshift+0x4a>
 8008a3a:	3904      	subs	r1, #4
 8008a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a44:	4298      	cmp	r0, r3
 8008a46:	d8f9      	bhi.n	8008a3c <__lshift+0xc8>
 8008a48:	e7ea      	b.n	8008a20 <__lshift+0xac>
 8008a4a:	bf00      	nop
 8008a4c:	08009a37 	.word	0x08009a37
 8008a50:	08009aa8 	.word	0x08009aa8

08008a54 <__mcmp>:
 8008a54:	b530      	push	{r4, r5, lr}
 8008a56:	6902      	ldr	r2, [r0, #16]
 8008a58:	690c      	ldr	r4, [r1, #16]
 8008a5a:	1b12      	subs	r2, r2, r4
 8008a5c:	d10e      	bne.n	8008a7c <__mcmp+0x28>
 8008a5e:	f100 0314 	add.w	r3, r0, #20
 8008a62:	3114      	adds	r1, #20
 8008a64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a74:	42a5      	cmp	r5, r4
 8008a76:	d003      	beq.n	8008a80 <__mcmp+0x2c>
 8008a78:	d305      	bcc.n	8008a86 <__mcmp+0x32>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	bd30      	pop	{r4, r5, pc}
 8008a80:	4283      	cmp	r3, r0
 8008a82:	d3f3      	bcc.n	8008a6c <__mcmp+0x18>
 8008a84:	e7fa      	b.n	8008a7c <__mcmp+0x28>
 8008a86:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8a:	e7f7      	b.n	8008a7c <__mcmp+0x28>

08008a8c <__mdiff>:
 8008a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	460c      	mov	r4, r1
 8008a92:	4606      	mov	r6, r0
 8008a94:	4611      	mov	r1, r2
 8008a96:	4620      	mov	r0, r4
 8008a98:	4690      	mov	r8, r2
 8008a9a:	f7ff ffdb 	bl	8008a54 <__mcmp>
 8008a9e:	1e05      	subs	r5, r0, #0
 8008aa0:	d110      	bne.n	8008ac4 <__mdiff+0x38>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff fd53 	bl	8008550 <_Balloc>
 8008aaa:	b930      	cbnz	r0, 8008aba <__mdiff+0x2e>
 8008aac:	4b3a      	ldr	r3, [pc, #232]	; (8008b98 <__mdiff+0x10c>)
 8008aae:	4602      	mov	r2, r0
 8008ab0:	f240 2132 	movw	r1, #562	; 0x232
 8008ab4:	4839      	ldr	r0, [pc, #228]	; (8008b9c <__mdiff+0x110>)
 8008ab6:	f000 fc45 	bl	8009344 <__assert_func>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	bfa4      	itt	ge
 8008ac6:	4643      	movge	r3, r8
 8008ac8:	46a0      	movge	r8, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ad0:	bfa6      	itte	ge
 8008ad2:	461c      	movge	r4, r3
 8008ad4:	2500      	movge	r5, #0
 8008ad6:	2501      	movlt	r5, #1
 8008ad8:	f7ff fd3a 	bl	8008550 <_Balloc>
 8008adc:	b920      	cbnz	r0, 8008ae8 <__mdiff+0x5c>
 8008ade:	4b2e      	ldr	r3, [pc, #184]	; (8008b98 <__mdiff+0x10c>)
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ae6:	e7e5      	b.n	8008ab4 <__mdiff+0x28>
 8008ae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008aec:	6926      	ldr	r6, [r4, #16]
 8008aee:	60c5      	str	r5, [r0, #12]
 8008af0:	f104 0914 	add.w	r9, r4, #20
 8008af4:	f108 0514 	add.w	r5, r8, #20
 8008af8:	f100 0e14 	add.w	lr, r0, #20
 8008afc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b04:	f108 0210 	add.w	r2, r8, #16
 8008b08:	46f2      	mov	sl, lr
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b14:	fa1f f883 	uxth.w	r8, r3
 8008b18:	fa11 f18b 	uxtah	r1, r1, fp
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	eba1 0808 	sub.w	r8, r1, r8
 8008b22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b2a:	fa1f f888 	uxth.w	r8, r8
 8008b2e:	1419      	asrs	r1, r3, #16
 8008b30:	454e      	cmp	r6, r9
 8008b32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b36:	f84a 3b04 	str.w	r3, [sl], #4
 8008b3a:	d8e7      	bhi.n	8008b0c <__mdiff+0x80>
 8008b3c:	1b33      	subs	r3, r6, r4
 8008b3e:	3b15      	subs	r3, #21
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	3304      	adds	r3, #4
 8008b46:	3415      	adds	r4, #21
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	bf38      	it	cc
 8008b4c:	2304      	movcc	r3, #4
 8008b4e:	441d      	add	r5, r3
 8008b50:	4473      	add	r3, lr
 8008b52:	469e      	mov	lr, r3
 8008b54:	462e      	mov	r6, r5
 8008b56:	4566      	cmp	r6, ip
 8008b58:	d30e      	bcc.n	8008b78 <__mdiff+0xec>
 8008b5a:	f10c 0203 	add.w	r2, ip, #3
 8008b5e:	1b52      	subs	r2, r2, r5
 8008b60:	f022 0203 	bic.w	r2, r2, #3
 8008b64:	3d03      	subs	r5, #3
 8008b66:	45ac      	cmp	ip, r5
 8008b68:	bf38      	it	cc
 8008b6a:	2200      	movcc	r2, #0
 8008b6c:	441a      	add	r2, r3
 8008b6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b72:	b17b      	cbz	r3, 8008b94 <__mdiff+0x108>
 8008b74:	6107      	str	r7, [r0, #16]
 8008b76:	e7a3      	b.n	8008ac0 <__mdiff+0x34>
 8008b78:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b7c:	fa11 f288 	uxtah	r2, r1, r8
 8008b80:	1414      	asrs	r4, r2, #16
 8008b82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b86:	b292      	uxth	r2, r2
 8008b88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b8c:	f84e 2b04 	str.w	r2, [lr], #4
 8008b90:	1421      	asrs	r1, r4, #16
 8008b92:	e7e0      	b.n	8008b56 <__mdiff+0xca>
 8008b94:	3f01      	subs	r7, #1
 8008b96:	e7ea      	b.n	8008b6e <__mdiff+0xe2>
 8008b98:	08009a37 	.word	0x08009a37
 8008b9c:	08009aa8 	.word	0x08009aa8

08008ba0 <__d2b>:
 8008ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4689      	mov	r9, r1
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	ec57 6b10 	vmov	r6, r7, d0
 8008bac:	4690      	mov	r8, r2
 8008bae:	f7ff fccf 	bl	8008550 <_Balloc>
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	b930      	cbnz	r0, 8008bc4 <__d2b+0x24>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <__d2b+0xb0>)
 8008bba:	4826      	ldr	r0, [pc, #152]	; (8008c54 <__d2b+0xb4>)
 8008bbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008bc0:	f000 fbc0 	bl	8009344 <__assert_func>
 8008bc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bcc:	bb35      	cbnz	r5, 8008c1c <__d2b+0x7c>
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	d028      	beq.n	8008c26 <__d2b+0x86>
 8008bd4:	4668      	mov	r0, sp
 8008bd6:	9600      	str	r6, [sp, #0]
 8008bd8:	f7ff fd82 	bl	80086e0 <__lo0bits>
 8008bdc:	9900      	ldr	r1, [sp, #0]
 8008bde:	b300      	cbz	r0, 8008c22 <__d2b+0x82>
 8008be0:	9a01      	ldr	r2, [sp, #4]
 8008be2:	f1c0 0320 	rsb	r3, r0, #32
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	430b      	orrs	r3, r1
 8008bec:	40c2      	lsrs	r2, r0
 8008bee:	6163      	str	r3, [r4, #20]
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	61a3      	str	r3, [r4, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bf14      	ite	ne
 8008bfa:	2202      	movne	r2, #2
 8008bfc:	2201      	moveq	r2, #1
 8008bfe:	6122      	str	r2, [r4, #16]
 8008c00:	b1d5      	cbz	r5, 8008c38 <__d2b+0x98>
 8008c02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c06:	4405      	add	r5, r0
 8008c08:	f8c9 5000 	str.w	r5, [r9]
 8008c0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c10:	f8c8 0000 	str.w	r0, [r8]
 8008c14:	4620      	mov	r0, r4
 8008c16:	b003      	add	sp, #12
 8008c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c20:	e7d5      	b.n	8008bce <__d2b+0x2e>
 8008c22:	6161      	str	r1, [r4, #20]
 8008c24:	e7e5      	b.n	8008bf2 <__d2b+0x52>
 8008c26:	a801      	add	r0, sp, #4
 8008c28:	f7ff fd5a 	bl	80086e0 <__lo0bits>
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	6163      	str	r3, [r4, #20]
 8008c30:	2201      	movs	r2, #1
 8008c32:	6122      	str	r2, [r4, #16]
 8008c34:	3020      	adds	r0, #32
 8008c36:	e7e3      	b.n	8008c00 <__d2b+0x60>
 8008c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c40:	f8c9 0000 	str.w	r0, [r9]
 8008c44:	6918      	ldr	r0, [r3, #16]
 8008c46:	f7ff fd2b 	bl	80086a0 <__hi0bits>
 8008c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4e:	e7df      	b.n	8008c10 <__d2b+0x70>
 8008c50:	08009a37 	.word	0x08009a37
 8008c54:	08009aa8 	.word	0x08009aa8

08008c58 <_calloc_r>:
 8008c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5a:	fba1 2402 	umull	r2, r4, r1, r2
 8008c5e:	b94c      	cbnz	r4, 8008c74 <_calloc_r+0x1c>
 8008c60:	4611      	mov	r1, r2
 8008c62:	9201      	str	r2, [sp, #4]
 8008c64:	f000 f87a 	bl	8008d5c <_malloc_r>
 8008c68:	9a01      	ldr	r2, [sp, #4]
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	b930      	cbnz	r0, 8008c7c <_calloc_r+0x24>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	b003      	add	sp, #12
 8008c72:	bd30      	pop	{r4, r5, pc}
 8008c74:	220c      	movs	r2, #12
 8008c76:	6002      	str	r2, [r0, #0]
 8008c78:	2500      	movs	r5, #0
 8008c7a:	e7f8      	b.n	8008c6e <_calloc_r+0x16>
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f7fe f85d 	bl	8006d3c <memset>
 8008c82:	e7f4      	b.n	8008c6e <_calloc_r+0x16>

08008c84 <_free_r>:
 8008c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d044      	beq.n	8008d14 <_free_r+0x90>
 8008c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8e:	9001      	str	r0, [sp, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f1a1 0404 	sub.w	r4, r1, #4
 8008c96:	bfb8      	it	lt
 8008c98:	18e4      	addlt	r4, r4, r3
 8008c9a:	f000 fcdf 	bl	800965c <__malloc_lock>
 8008c9e:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <_free_r+0x94>)
 8008ca0:	9801      	ldr	r0, [sp, #4]
 8008ca2:	6813      	ldr	r3, [r2, #0]
 8008ca4:	b933      	cbnz	r3, 8008cb4 <_free_r+0x30>
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	6014      	str	r4, [r2, #0]
 8008caa:	b003      	add	sp, #12
 8008cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cb0:	f000 bcda 	b.w	8009668 <__malloc_unlock>
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	d908      	bls.n	8008cca <_free_r+0x46>
 8008cb8:	6825      	ldr	r5, [r4, #0]
 8008cba:	1961      	adds	r1, r4, r5
 8008cbc:	428b      	cmp	r3, r1
 8008cbe:	bf01      	itttt	eq
 8008cc0:	6819      	ldreq	r1, [r3, #0]
 8008cc2:	685b      	ldreq	r3, [r3, #4]
 8008cc4:	1949      	addeq	r1, r1, r5
 8008cc6:	6021      	streq	r1, [r4, #0]
 8008cc8:	e7ed      	b.n	8008ca6 <_free_r+0x22>
 8008cca:	461a      	mov	r2, r3
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	b10b      	cbz	r3, 8008cd4 <_free_r+0x50>
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d9fa      	bls.n	8008cca <_free_r+0x46>
 8008cd4:	6811      	ldr	r1, [r2, #0]
 8008cd6:	1855      	adds	r5, r2, r1
 8008cd8:	42a5      	cmp	r5, r4
 8008cda:	d10b      	bne.n	8008cf4 <_free_r+0x70>
 8008cdc:	6824      	ldr	r4, [r4, #0]
 8008cde:	4421      	add	r1, r4
 8008ce0:	1854      	adds	r4, r2, r1
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	d1e0      	bne.n	8008caa <_free_r+0x26>
 8008ce8:	681c      	ldr	r4, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	6053      	str	r3, [r2, #4]
 8008cee:	4421      	add	r1, r4
 8008cf0:	6011      	str	r1, [r2, #0]
 8008cf2:	e7da      	b.n	8008caa <_free_r+0x26>
 8008cf4:	d902      	bls.n	8008cfc <_free_r+0x78>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	6003      	str	r3, [r0, #0]
 8008cfa:	e7d6      	b.n	8008caa <_free_r+0x26>
 8008cfc:	6825      	ldr	r5, [r4, #0]
 8008cfe:	1961      	adds	r1, r4, r5
 8008d00:	428b      	cmp	r3, r1
 8008d02:	bf04      	itt	eq
 8008d04:	6819      	ldreq	r1, [r3, #0]
 8008d06:	685b      	ldreq	r3, [r3, #4]
 8008d08:	6063      	str	r3, [r4, #4]
 8008d0a:	bf04      	itt	eq
 8008d0c:	1949      	addeq	r1, r1, r5
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	6054      	str	r4, [r2, #4]
 8008d12:	e7ca      	b.n	8008caa <_free_r+0x26>
 8008d14:	b003      	add	sp, #12
 8008d16:	bd30      	pop	{r4, r5, pc}
 8008d18:	20003d60 	.word	0x20003d60

08008d1c <sbrk_aligned>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4e0e      	ldr	r6, [pc, #56]	; (8008d58 <sbrk_aligned+0x3c>)
 8008d20:	460c      	mov	r4, r1
 8008d22:	6831      	ldr	r1, [r6, #0]
 8008d24:	4605      	mov	r5, r0
 8008d26:	b911      	cbnz	r1, 8008d2e <sbrk_aligned+0x12>
 8008d28:	f000 f9e6 	bl	80090f8 <_sbrk_r>
 8008d2c:	6030      	str	r0, [r6, #0]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4628      	mov	r0, r5
 8008d32:	f000 f9e1 	bl	80090f8 <_sbrk_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d00a      	beq.n	8008d50 <sbrk_aligned+0x34>
 8008d3a:	1cc4      	adds	r4, r0, #3
 8008d3c:	f024 0403 	bic.w	r4, r4, #3
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d007      	beq.n	8008d54 <sbrk_aligned+0x38>
 8008d44:	1a21      	subs	r1, r4, r0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f000 f9d6 	bl	80090f8 <_sbrk_r>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d101      	bne.n	8008d54 <sbrk_aligned+0x38>
 8008d50:	f04f 34ff 	mov.w	r4, #4294967295
 8008d54:	4620      	mov	r0, r4
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	20003d64 	.word	0x20003d64

08008d5c <_malloc_r>:
 8008d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	1ccd      	adds	r5, r1, #3
 8008d62:	f025 0503 	bic.w	r5, r5, #3
 8008d66:	3508      	adds	r5, #8
 8008d68:	2d0c      	cmp	r5, #12
 8008d6a:	bf38      	it	cc
 8008d6c:	250c      	movcc	r5, #12
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	4607      	mov	r7, r0
 8008d72:	db01      	blt.n	8008d78 <_malloc_r+0x1c>
 8008d74:	42a9      	cmp	r1, r5
 8008d76:	d905      	bls.n	8008d84 <_malloc_r+0x28>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	4630      	mov	r0, r6
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	4e2e      	ldr	r6, [pc, #184]	; (8008e40 <_malloc_r+0xe4>)
 8008d86:	f000 fc69 	bl	800965c <__malloc_lock>
 8008d8a:	6833      	ldr	r3, [r6, #0]
 8008d8c:	461c      	mov	r4, r3
 8008d8e:	bb34      	cbnz	r4, 8008dde <_malloc_r+0x82>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff ffc2 	bl	8008d1c <sbrk_aligned>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	d14d      	bne.n	8008e3a <_malloc_r+0xde>
 8008d9e:	6834      	ldr	r4, [r6, #0]
 8008da0:	4626      	mov	r6, r4
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d140      	bne.n	8008e28 <_malloc_r+0xcc>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	4631      	mov	r1, r6
 8008daa:	4638      	mov	r0, r7
 8008dac:	eb04 0803 	add.w	r8, r4, r3
 8008db0:	f000 f9a2 	bl	80090f8 <_sbrk_r>
 8008db4:	4580      	cmp	r8, r0
 8008db6:	d13a      	bne.n	8008e2e <_malloc_r+0xd2>
 8008db8:	6821      	ldr	r1, [r4, #0]
 8008dba:	3503      	adds	r5, #3
 8008dbc:	1a6d      	subs	r5, r5, r1
 8008dbe:	f025 0503 	bic.w	r5, r5, #3
 8008dc2:	3508      	adds	r5, #8
 8008dc4:	2d0c      	cmp	r5, #12
 8008dc6:	bf38      	it	cc
 8008dc8:	250c      	movcc	r5, #12
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff ffa5 	bl	8008d1c <sbrk_aligned>
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d02b      	beq.n	8008e2e <_malloc_r+0xd2>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	442b      	add	r3, r5
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	e00e      	b.n	8008dfc <_malloc_r+0xa0>
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	1b52      	subs	r2, r2, r5
 8008de2:	d41e      	bmi.n	8008e22 <_malloc_r+0xc6>
 8008de4:	2a0b      	cmp	r2, #11
 8008de6:	d916      	bls.n	8008e16 <_malloc_r+0xba>
 8008de8:	1961      	adds	r1, r4, r5
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	6025      	str	r5, [r4, #0]
 8008dee:	bf18      	it	ne
 8008df0:	6059      	strne	r1, [r3, #4]
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	bf08      	it	eq
 8008df6:	6031      	streq	r1, [r6, #0]
 8008df8:	5162      	str	r2, [r4, r5]
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f104 060b 	add.w	r6, r4, #11
 8008e02:	f000 fc31 	bl	8009668 <__malloc_unlock>
 8008e06:	f026 0607 	bic.w	r6, r6, #7
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	1af2      	subs	r2, r6, r3
 8008e0e:	d0b6      	beq.n	8008d7e <_malloc_r+0x22>
 8008e10:	1b9b      	subs	r3, r3, r6
 8008e12:	50a3      	str	r3, [r4, r2]
 8008e14:	e7b3      	b.n	8008d7e <_malloc_r+0x22>
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	bf0c      	ite	eq
 8008e1c:	6032      	streq	r2, [r6, #0]
 8008e1e:	605a      	strne	r2, [r3, #4]
 8008e20:	e7ec      	b.n	8008dfc <_malloc_r+0xa0>
 8008e22:	4623      	mov	r3, r4
 8008e24:	6864      	ldr	r4, [r4, #4]
 8008e26:	e7b2      	b.n	8008d8e <_malloc_r+0x32>
 8008e28:	4634      	mov	r4, r6
 8008e2a:	6876      	ldr	r6, [r6, #4]
 8008e2c:	e7b9      	b.n	8008da2 <_malloc_r+0x46>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	4638      	mov	r0, r7
 8008e34:	f000 fc18 	bl	8009668 <__malloc_unlock>
 8008e38:	e7a1      	b.n	8008d7e <_malloc_r+0x22>
 8008e3a:	6025      	str	r5, [r4, #0]
 8008e3c:	e7de      	b.n	8008dfc <_malloc_r+0xa0>
 8008e3e:	bf00      	nop
 8008e40:	20003d60 	.word	0x20003d60

08008e44 <__sfputc_r>:
 8008e44:	6893      	ldr	r3, [r2, #8]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	b410      	push	{r4}
 8008e4c:	6093      	str	r3, [r2, #8]
 8008e4e:	da08      	bge.n	8008e62 <__sfputc_r+0x1e>
 8008e50:	6994      	ldr	r4, [r2, #24]
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	db01      	blt.n	8008e5a <__sfputc_r+0x16>
 8008e56:	290a      	cmp	r1, #10
 8008e58:	d103      	bne.n	8008e62 <__sfputc_r+0x1e>
 8008e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5e:	f000 b99f 	b.w	80091a0 <__swbuf_r>
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	1c58      	adds	r0, r3, #1
 8008e66:	6010      	str	r0, [r2, #0]
 8008e68:	7019      	strb	r1, [r3, #0]
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <__sfputs_r>:
 8008e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	18d5      	adds	r5, r2, r3
 8008e7c:	42ac      	cmp	r4, r5
 8008e7e:	d101      	bne.n	8008e84 <__sfputs_r+0x12>
 8008e80:	2000      	movs	r0, #0
 8008e82:	e007      	b.n	8008e94 <__sfputs_r+0x22>
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ffda 	bl	8008e44 <__sfputc_r>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d1f3      	bne.n	8008e7c <__sfputs_r+0xa>
 8008e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e98 <_vfiprintf_r>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	b09d      	sub	sp, #116	; 0x74
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4698      	mov	r8, r3
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	b118      	cbz	r0, 8008eb0 <_vfiprintf_r+0x18>
 8008ea8:	6983      	ldr	r3, [r0, #24]
 8008eaa:	b90b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x18>
 8008eac:	f7ff faa2 	bl	80083f4 <__sinit>
 8008eb0:	4b89      	ldr	r3, [pc, #548]	; (80090d8 <_vfiprintf_r+0x240>)
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	d11b      	bne.n	8008eee <_vfiprintf_r+0x56>
 8008eb6:	6875      	ldr	r5, [r6, #4]
 8008eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	d405      	bmi.n	8008eca <_vfiprintf_r+0x32>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	059a      	lsls	r2, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_vfiprintf_r+0x32>
 8008ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec6:	f7ff fb38 	bl	800853a <__retarget_lock_acquire_recursive>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	071b      	lsls	r3, r3, #28
 8008ece:	d501      	bpl.n	8008ed4 <_vfiprintf_r+0x3c>
 8008ed0:	692b      	ldr	r3, [r5, #16]
 8008ed2:	b9eb      	cbnz	r3, 8008f10 <_vfiprintf_r+0x78>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 f9c6 	bl	8009268 <__swsetup_r>
 8008edc:	b1c0      	cbz	r0, 8008f10 <_vfiprintf_r+0x78>
 8008ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee0:	07dc      	lsls	r4, r3, #31
 8008ee2:	d50e      	bpl.n	8008f02 <_vfiprintf_r+0x6a>
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	b01d      	add	sp, #116	; 0x74
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	4b7b      	ldr	r3, [pc, #492]	; (80090dc <_vfiprintf_r+0x244>)
 8008ef0:	429d      	cmp	r5, r3
 8008ef2:	d101      	bne.n	8008ef8 <_vfiprintf_r+0x60>
 8008ef4:	68b5      	ldr	r5, [r6, #8]
 8008ef6:	e7df      	b.n	8008eb8 <_vfiprintf_r+0x20>
 8008ef8:	4b79      	ldr	r3, [pc, #484]	; (80090e0 <_vfiprintf_r+0x248>)
 8008efa:	429d      	cmp	r5, r3
 8008efc:	bf08      	it	eq
 8008efe:	68f5      	ldreq	r5, [r6, #12]
 8008f00:	e7da      	b.n	8008eb8 <_vfiprintf_r+0x20>
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	0598      	lsls	r0, r3, #22
 8008f06:	d4ed      	bmi.n	8008ee4 <_vfiprintf_r+0x4c>
 8008f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f0a:	f7ff fb17 	bl	800853c <__retarget_lock_release_recursive>
 8008f0e:	e7e9      	b.n	8008ee4 <_vfiprintf_r+0x4c>
 8008f10:	2300      	movs	r3, #0
 8008f12:	9309      	str	r3, [sp, #36]	; 0x24
 8008f14:	2320      	movs	r3, #32
 8008f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1e:	2330      	movs	r3, #48	; 0x30
 8008f20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090e4 <_vfiprintf_r+0x24c>
 8008f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f28:	f04f 0901 	mov.w	r9, #1
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	469a      	mov	sl, r3
 8008f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f34:	b10a      	cbz	r2, 8008f3a <_vfiprintf_r+0xa2>
 8008f36:	2a25      	cmp	r2, #37	; 0x25
 8008f38:	d1f9      	bne.n	8008f2e <_vfiprintf_r+0x96>
 8008f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3e:	d00b      	beq.n	8008f58 <_vfiprintf_r+0xc0>
 8008f40:	465b      	mov	r3, fp
 8008f42:	4622      	mov	r2, r4
 8008f44:	4629      	mov	r1, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7ff ff93 	bl	8008e72 <__sfputs_r>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f000 80aa 	beq.w	80090a6 <_vfiprintf_r+0x20e>
 8008f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f54:	445a      	add	r2, fp
 8008f56:	9209      	str	r2, [sp, #36]	; 0x24
 8008f58:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80a2 	beq.w	80090a6 <_vfiprintf_r+0x20e>
 8008f62:	2300      	movs	r3, #0
 8008f64:	f04f 32ff 	mov.w	r2, #4294967295
 8008f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6c:	f10a 0a01 	add.w	sl, sl, #1
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	9307      	str	r3, [sp, #28]
 8008f74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f78:	931a      	str	r3, [sp, #104]	; 0x68
 8008f7a:	4654      	mov	r4, sl
 8008f7c:	2205      	movs	r2, #5
 8008f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f82:	4858      	ldr	r0, [pc, #352]	; (80090e4 <_vfiprintf_r+0x24c>)
 8008f84:	f7f7 f92c 	bl	80001e0 <memchr>
 8008f88:	9a04      	ldr	r2, [sp, #16]
 8008f8a:	b9d8      	cbnz	r0, 8008fc4 <_vfiprintf_r+0x12c>
 8008f8c:	06d1      	lsls	r1, r2, #27
 8008f8e:	bf44      	itt	mi
 8008f90:	2320      	movmi	r3, #32
 8008f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f96:	0713      	lsls	r3, r2, #28
 8008f98:	bf44      	itt	mi
 8008f9a:	232b      	movmi	r3, #43	; 0x2b
 8008f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa6:	d015      	beq.n	8008fd4 <_vfiprintf_r+0x13c>
 8008fa8:	9a07      	ldr	r2, [sp, #28]
 8008faa:	4654      	mov	r4, sl
 8008fac:	2000      	movs	r0, #0
 8008fae:	f04f 0c0a 	mov.w	ip, #10
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb8:	3b30      	subs	r3, #48	; 0x30
 8008fba:	2b09      	cmp	r3, #9
 8008fbc:	d94e      	bls.n	800905c <_vfiprintf_r+0x1c4>
 8008fbe:	b1b0      	cbz	r0, 8008fee <_vfiprintf_r+0x156>
 8008fc0:	9207      	str	r2, [sp, #28]
 8008fc2:	e014      	b.n	8008fee <_vfiprintf_r+0x156>
 8008fc4:	eba0 0308 	sub.w	r3, r0, r8
 8008fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	46a2      	mov	sl, r4
 8008fd2:	e7d2      	b.n	8008f7a <_vfiprintf_r+0xe2>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	1d19      	adds	r1, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	9103      	str	r1, [sp, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bfbb      	ittet	lt
 8008fe0:	425b      	neglt	r3, r3
 8008fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe6:	9307      	strge	r3, [sp, #28]
 8008fe8:	9307      	strlt	r3, [sp, #28]
 8008fea:	bfb8      	it	lt
 8008fec:	9204      	strlt	r2, [sp, #16]
 8008fee:	7823      	ldrb	r3, [r4, #0]
 8008ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff2:	d10c      	bne.n	800900e <_vfiprintf_r+0x176>
 8008ff4:	7863      	ldrb	r3, [r4, #1]
 8008ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff8:	d135      	bne.n	8009066 <_vfiprintf_r+0x1ce>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d1a      	adds	r2, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9203      	str	r2, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfb8      	it	lt
 8009006:	f04f 33ff 	movlt.w	r3, #4294967295
 800900a:	3402      	adds	r4, #2
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090f4 <_vfiprintf_r+0x25c>
 8009012:	7821      	ldrb	r1, [r4, #0]
 8009014:	2203      	movs	r2, #3
 8009016:	4650      	mov	r0, sl
 8009018:	f7f7 f8e2 	bl	80001e0 <memchr>
 800901c:	b140      	cbz	r0, 8009030 <_vfiprintf_r+0x198>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	eba0 000a 	sub.w	r0, r0, sl
 8009024:	fa03 f000 	lsl.w	r0, r3, r0
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	4303      	orrs	r3, r0
 800902c:	3401      	adds	r4, #1
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	482c      	ldr	r0, [pc, #176]	; (80090e8 <_vfiprintf_r+0x250>)
 8009036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800903a:	2206      	movs	r2, #6
 800903c:	f7f7 f8d0 	bl	80001e0 <memchr>
 8009040:	2800      	cmp	r0, #0
 8009042:	d03f      	beq.n	80090c4 <_vfiprintf_r+0x22c>
 8009044:	4b29      	ldr	r3, [pc, #164]	; (80090ec <_vfiprintf_r+0x254>)
 8009046:	bb1b      	cbnz	r3, 8009090 <_vfiprintf_r+0x1f8>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	3307      	adds	r3, #7
 800904c:	f023 0307 	bic.w	r3, r3, #7
 8009050:	3308      	adds	r3, #8
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009056:	443b      	add	r3, r7
 8009058:	9309      	str	r3, [sp, #36]	; 0x24
 800905a:	e767      	b.n	8008f2c <_vfiprintf_r+0x94>
 800905c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009060:	460c      	mov	r4, r1
 8009062:	2001      	movs	r0, #1
 8009064:	e7a5      	b.n	8008fb2 <_vfiprintf_r+0x11a>
 8009066:	2300      	movs	r3, #0
 8009068:	3401      	adds	r4, #1
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	4619      	mov	r1, r3
 800906e:	f04f 0c0a 	mov.w	ip, #10
 8009072:	4620      	mov	r0, r4
 8009074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009078:	3a30      	subs	r2, #48	; 0x30
 800907a:	2a09      	cmp	r2, #9
 800907c:	d903      	bls.n	8009086 <_vfiprintf_r+0x1ee>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0c5      	beq.n	800900e <_vfiprintf_r+0x176>
 8009082:	9105      	str	r1, [sp, #20]
 8009084:	e7c3      	b.n	800900e <_vfiprintf_r+0x176>
 8009086:	fb0c 2101 	mla	r1, ip, r1, r2
 800908a:	4604      	mov	r4, r0
 800908c:	2301      	movs	r3, #1
 800908e:	e7f0      	b.n	8009072 <_vfiprintf_r+0x1da>
 8009090:	ab03      	add	r3, sp, #12
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	462a      	mov	r2, r5
 8009096:	4b16      	ldr	r3, [pc, #88]	; (80090f0 <_vfiprintf_r+0x258>)
 8009098:	a904      	add	r1, sp, #16
 800909a:	4630      	mov	r0, r6
 800909c:	f7fd fef6 	bl	8006e8c <_printf_float>
 80090a0:	4607      	mov	r7, r0
 80090a2:	1c78      	adds	r0, r7, #1
 80090a4:	d1d6      	bne.n	8009054 <_vfiprintf_r+0x1bc>
 80090a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a8:	07d9      	lsls	r1, r3, #31
 80090aa:	d405      	bmi.n	80090b8 <_vfiprintf_r+0x220>
 80090ac:	89ab      	ldrh	r3, [r5, #12]
 80090ae:	059a      	lsls	r2, r3, #22
 80090b0:	d402      	bmi.n	80090b8 <_vfiprintf_r+0x220>
 80090b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b4:	f7ff fa42 	bl	800853c <__retarget_lock_release_recursive>
 80090b8:	89ab      	ldrh	r3, [r5, #12]
 80090ba:	065b      	lsls	r3, r3, #25
 80090bc:	f53f af12 	bmi.w	8008ee4 <_vfiprintf_r+0x4c>
 80090c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c2:	e711      	b.n	8008ee8 <_vfiprintf_r+0x50>
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <_vfiprintf_r+0x258>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7fe f980 	bl	80073d4 <_printf_i>
 80090d4:	e7e4      	b.n	80090a0 <_vfiprintf_r+0x208>
 80090d6:	bf00      	nop
 80090d8:	08009a68 	.word	0x08009a68
 80090dc:	08009a88 	.word	0x08009a88
 80090e0:	08009a48 	.word	0x08009a48
 80090e4:	08009c04 	.word	0x08009c04
 80090e8:	08009c0e 	.word	0x08009c0e
 80090ec:	08006e8d 	.word	0x08006e8d
 80090f0:	08008e73 	.word	0x08008e73
 80090f4:	08009c0a 	.word	0x08009c0a

080090f8 <_sbrk_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_sbrk_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f8 fb94 	bl	8001830 <_sbrk>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_sbrk_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_sbrk_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20003d68 	.word	0x20003d68

08009118 <__sread>:
 8009118:	b510      	push	{r4, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009120:	f000 faa8 	bl	8009674 <_read_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	bfab      	itete	ge
 8009128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800912a:	89a3      	ldrhlt	r3, [r4, #12]
 800912c:	181b      	addge	r3, r3, r0
 800912e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009132:	bfac      	ite	ge
 8009134:	6563      	strge	r3, [r4, #84]	; 0x54
 8009136:	81a3      	strhlt	r3, [r4, #12]
 8009138:	bd10      	pop	{r4, pc}

0800913a <__swrite>:
 800913a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913e:	461f      	mov	r7, r3
 8009140:	898b      	ldrh	r3, [r1, #12]
 8009142:	05db      	lsls	r3, r3, #23
 8009144:	4605      	mov	r5, r0
 8009146:	460c      	mov	r4, r1
 8009148:	4616      	mov	r6, r2
 800914a:	d505      	bpl.n	8009158 <__swrite+0x1e>
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	2302      	movs	r3, #2
 8009152:	2200      	movs	r2, #0
 8009154:	f000 f9f8 	bl	8009548 <_lseek_r>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	4628      	mov	r0, r5
 800916a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	f000 b869 	b.w	8009244 <_write_r>

08009172 <__sseek>:
 8009172:	b510      	push	{r4, lr}
 8009174:	460c      	mov	r4, r1
 8009176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917a:	f000 f9e5 	bl	8009548 <_lseek_r>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	bf15      	itete	ne
 8009184:	6560      	strne	r0, [r4, #84]	; 0x54
 8009186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800918a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800918e:	81a3      	strheq	r3, [r4, #12]
 8009190:	bf18      	it	ne
 8009192:	81a3      	strhne	r3, [r4, #12]
 8009194:	bd10      	pop	{r4, pc}

08009196 <__sclose>:
 8009196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919a:	f000 b8f1 	b.w	8009380 <_close_r>
	...

080091a0 <__swbuf_r>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	460e      	mov	r6, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	4605      	mov	r5, r0
 80091a8:	b118      	cbz	r0, 80091b2 <__swbuf_r+0x12>
 80091aa:	6983      	ldr	r3, [r0, #24]
 80091ac:	b90b      	cbnz	r3, 80091b2 <__swbuf_r+0x12>
 80091ae:	f7ff f921 	bl	80083f4 <__sinit>
 80091b2:	4b21      	ldr	r3, [pc, #132]	; (8009238 <__swbuf_r+0x98>)
 80091b4:	429c      	cmp	r4, r3
 80091b6:	d12b      	bne.n	8009210 <__swbuf_r+0x70>
 80091b8:	686c      	ldr	r4, [r5, #4]
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d52f      	bpl.n	8009224 <__swbuf_r+0x84>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b36b      	cbz	r3, 8009224 <__swbuf_r+0x84>
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	6820      	ldr	r0, [r4, #0]
 80091cc:	1ac0      	subs	r0, r0, r3
 80091ce:	6963      	ldr	r3, [r4, #20]
 80091d0:	b2f6      	uxtb	r6, r6
 80091d2:	4283      	cmp	r3, r0
 80091d4:	4637      	mov	r7, r6
 80091d6:	dc04      	bgt.n	80091e2 <__swbuf_r+0x42>
 80091d8:	4621      	mov	r1, r4
 80091da:	4628      	mov	r0, r5
 80091dc:	f000 f966 	bl	80094ac <_fflush_r>
 80091e0:	bb30      	cbnz	r0, 8009230 <__swbuf_r+0x90>
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	60a3      	str	r3, [r4, #8]
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	701e      	strb	r6, [r3, #0]
 80091f0:	6963      	ldr	r3, [r4, #20]
 80091f2:	3001      	adds	r0, #1
 80091f4:	4283      	cmp	r3, r0
 80091f6:	d004      	beq.n	8009202 <__swbuf_r+0x62>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	07db      	lsls	r3, r3, #31
 80091fc:	d506      	bpl.n	800920c <__swbuf_r+0x6c>
 80091fe:	2e0a      	cmp	r6, #10
 8009200:	d104      	bne.n	800920c <__swbuf_r+0x6c>
 8009202:	4621      	mov	r1, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f000 f951 	bl	80094ac <_fflush_r>
 800920a:	b988      	cbnz	r0, 8009230 <__swbuf_r+0x90>
 800920c:	4638      	mov	r0, r7
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <__swbuf_r+0x9c>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d101      	bne.n	800921a <__swbuf_r+0x7a>
 8009216:	68ac      	ldr	r4, [r5, #8]
 8009218:	e7cf      	b.n	80091ba <__swbuf_r+0x1a>
 800921a:	4b09      	ldr	r3, [pc, #36]	; (8009240 <__swbuf_r+0xa0>)
 800921c:	429c      	cmp	r4, r3
 800921e:	bf08      	it	eq
 8009220:	68ec      	ldreq	r4, [r5, #12]
 8009222:	e7ca      	b.n	80091ba <__swbuf_r+0x1a>
 8009224:	4621      	mov	r1, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f81e 	bl	8009268 <__swsetup_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	d0cb      	beq.n	80091c8 <__swbuf_r+0x28>
 8009230:	f04f 37ff 	mov.w	r7, #4294967295
 8009234:	e7ea      	b.n	800920c <__swbuf_r+0x6c>
 8009236:	bf00      	nop
 8009238:	08009a68 	.word	0x08009a68
 800923c:	08009a88 	.word	0x08009a88
 8009240:	08009a48 	.word	0x08009a48

08009244 <_write_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	; (8009264 <_write_r+0x20>)
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f8 fa9b 	bl	800178e <_write>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_write_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_write_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20003d68 	.word	0x20003d68

08009268 <__swsetup_r>:
 8009268:	4b32      	ldr	r3, [pc, #200]	; (8009334 <__swsetup_r+0xcc>)
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	681d      	ldr	r5, [r3, #0]
 800926e:	4606      	mov	r6, r0
 8009270:	460c      	mov	r4, r1
 8009272:	b125      	cbz	r5, 800927e <__swsetup_r+0x16>
 8009274:	69ab      	ldr	r3, [r5, #24]
 8009276:	b913      	cbnz	r3, 800927e <__swsetup_r+0x16>
 8009278:	4628      	mov	r0, r5
 800927a:	f7ff f8bb 	bl	80083f4 <__sinit>
 800927e:	4b2e      	ldr	r3, [pc, #184]	; (8009338 <__swsetup_r+0xd0>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d10f      	bne.n	80092a4 <__swsetup_r+0x3c>
 8009284:	686c      	ldr	r4, [r5, #4]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800928c:	0719      	lsls	r1, r3, #28
 800928e:	d42c      	bmi.n	80092ea <__swsetup_r+0x82>
 8009290:	06dd      	lsls	r5, r3, #27
 8009292:	d411      	bmi.n	80092b8 <__swsetup_r+0x50>
 8009294:	2309      	movs	r3, #9
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	e03e      	b.n	8009322 <__swsetup_r+0xba>
 80092a4:	4b25      	ldr	r3, [pc, #148]	; (800933c <__swsetup_r+0xd4>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	d101      	bne.n	80092ae <__swsetup_r+0x46>
 80092aa:	68ac      	ldr	r4, [r5, #8]
 80092ac:	e7eb      	b.n	8009286 <__swsetup_r+0x1e>
 80092ae:	4b24      	ldr	r3, [pc, #144]	; (8009340 <__swsetup_r+0xd8>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	bf08      	it	eq
 80092b4:	68ec      	ldreq	r4, [r5, #12]
 80092b6:	e7e6      	b.n	8009286 <__swsetup_r+0x1e>
 80092b8:	0758      	lsls	r0, r3, #29
 80092ba:	d512      	bpl.n	80092e2 <__swsetup_r+0x7a>
 80092bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092be:	b141      	cbz	r1, 80092d2 <__swsetup_r+0x6a>
 80092c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d002      	beq.n	80092ce <__swsetup_r+0x66>
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff fcdb 	bl	8008c84 <_free_r>
 80092ce:	2300      	movs	r3, #0
 80092d0:	6363      	str	r3, [r4, #52]	; 0x34
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	2300      	movs	r3, #0
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f043 0308 	orr.w	r3, r3, #8
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	b94b      	cbnz	r3, 8009302 <__swsetup_r+0x9a>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f8:	d003      	beq.n	8009302 <__swsetup_r+0x9a>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f000 f95b 	bl	80095b8 <__smakebuf_r>
 8009302:	89a0      	ldrh	r0, [r4, #12]
 8009304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009308:	f010 0301 	ands.w	r3, r0, #1
 800930c:	d00a      	beq.n	8009324 <__swsetup_r+0xbc>
 800930e:	2300      	movs	r3, #0
 8009310:	60a3      	str	r3, [r4, #8]
 8009312:	6963      	ldr	r3, [r4, #20]
 8009314:	425b      	negs	r3, r3
 8009316:	61a3      	str	r3, [r4, #24]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	b943      	cbnz	r3, 800932e <__swsetup_r+0xc6>
 800931c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009320:	d1ba      	bne.n	8009298 <__swsetup_r+0x30>
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	0781      	lsls	r1, r0, #30
 8009326:	bf58      	it	pl
 8009328:	6963      	ldrpl	r3, [r4, #20]
 800932a:	60a3      	str	r3, [r4, #8]
 800932c:	e7f4      	b.n	8009318 <__swsetup_r+0xb0>
 800932e:	2000      	movs	r0, #0
 8009330:	e7f7      	b.n	8009322 <__swsetup_r+0xba>
 8009332:	bf00      	nop
 8009334:	20000010 	.word	0x20000010
 8009338:	08009a68 	.word	0x08009a68
 800933c:	08009a88 	.word	0x08009a88
 8009340:	08009a48 	.word	0x08009a48

08009344 <__assert_func>:
 8009344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009346:	4614      	mov	r4, r2
 8009348:	461a      	mov	r2, r3
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <__assert_func+0x2c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4605      	mov	r5, r0
 8009350:	68d8      	ldr	r0, [r3, #12]
 8009352:	b14c      	cbz	r4, 8009368 <__assert_func+0x24>
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <__assert_func+0x30>)
 8009356:	9100      	str	r1, [sp, #0]
 8009358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800935c:	4906      	ldr	r1, [pc, #24]	; (8009378 <__assert_func+0x34>)
 800935e:	462b      	mov	r3, r5
 8009360:	f000 f8e0 	bl	8009524 <fiprintf>
 8009364:	f000 f9a5 	bl	80096b2 <abort>
 8009368:	4b04      	ldr	r3, [pc, #16]	; (800937c <__assert_func+0x38>)
 800936a:	461c      	mov	r4, r3
 800936c:	e7f3      	b.n	8009356 <__assert_func+0x12>
 800936e:	bf00      	nop
 8009370:	20000010 	.word	0x20000010
 8009374:	08009c15 	.word	0x08009c15
 8009378:	08009c22 	.word	0x08009c22
 800937c:	08009c50 	.word	0x08009c50

08009380 <_close_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	; (800939c <_close_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f8 fa1b 	bl	80017c6 <_close>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_close_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_close_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20003d68 	.word	0x20003d68

080093a0 <__sflush_r>:
 80093a0:	898a      	ldrh	r2, [r1, #12]
 80093a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	4605      	mov	r5, r0
 80093a8:	0710      	lsls	r0, r2, #28
 80093aa:	460c      	mov	r4, r1
 80093ac:	d458      	bmi.n	8009460 <__sflush_r+0xc0>
 80093ae:	684b      	ldr	r3, [r1, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc05      	bgt.n	80093c0 <__sflush_r+0x20>
 80093b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dc02      	bgt.n	80093c0 <__sflush_r+0x20>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	d0f9      	beq.n	80093ba <__sflush_r+0x1a>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093cc:	682f      	ldr	r7, [r5, #0]
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	d032      	beq.n	8009438 <__sflush_r+0x98>
 80093d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	075a      	lsls	r2, r3, #29
 80093d8:	d505      	bpl.n	80093e6 <__sflush_r+0x46>
 80093da:	6863      	ldr	r3, [r4, #4]
 80093dc:	1ac0      	subs	r0, r0, r3
 80093de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093e0:	b10b      	cbz	r3, 80093e6 <__sflush_r+0x46>
 80093e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093e4:	1ac0      	subs	r0, r0, r3
 80093e6:	2300      	movs	r3, #0
 80093e8:	4602      	mov	r2, r0
 80093ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ec:	6a21      	ldr	r1, [r4, #32]
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b0      	blx	r6
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	d106      	bne.n	8009406 <__sflush_r+0x66>
 80093f8:	6829      	ldr	r1, [r5, #0]
 80093fa:	291d      	cmp	r1, #29
 80093fc:	d82c      	bhi.n	8009458 <__sflush_r+0xb8>
 80093fe:	4a2a      	ldr	r2, [pc, #168]	; (80094a8 <__sflush_r+0x108>)
 8009400:	40ca      	lsrs	r2, r1
 8009402:	07d6      	lsls	r6, r2, #31
 8009404:	d528      	bpl.n	8009458 <__sflush_r+0xb8>
 8009406:	2200      	movs	r2, #0
 8009408:	6062      	str	r2, [r4, #4]
 800940a:	04d9      	lsls	r1, r3, #19
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	d504      	bpl.n	800941c <__sflush_r+0x7c>
 8009412:	1c42      	adds	r2, r0, #1
 8009414:	d101      	bne.n	800941a <__sflush_r+0x7a>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b903      	cbnz	r3, 800941c <__sflush_r+0x7c>
 800941a:	6560      	str	r0, [r4, #84]	; 0x54
 800941c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941e:	602f      	str	r7, [r5, #0]
 8009420:	2900      	cmp	r1, #0
 8009422:	d0ca      	beq.n	80093ba <__sflush_r+0x1a>
 8009424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009428:	4299      	cmp	r1, r3
 800942a:	d002      	beq.n	8009432 <__sflush_r+0x92>
 800942c:	4628      	mov	r0, r5
 800942e:	f7ff fc29 	bl	8008c84 <_free_r>
 8009432:	2000      	movs	r0, #0
 8009434:	6360      	str	r0, [r4, #52]	; 0x34
 8009436:	e7c1      	b.n	80093bc <__sflush_r+0x1c>
 8009438:	6a21      	ldr	r1, [r4, #32]
 800943a:	2301      	movs	r3, #1
 800943c:	4628      	mov	r0, r5
 800943e:	47b0      	blx	r6
 8009440:	1c41      	adds	r1, r0, #1
 8009442:	d1c7      	bne.n	80093d4 <__sflush_r+0x34>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0c4      	beq.n	80093d4 <__sflush_r+0x34>
 800944a:	2b1d      	cmp	r3, #29
 800944c:	d001      	beq.n	8009452 <__sflush_r+0xb2>
 800944e:	2b16      	cmp	r3, #22
 8009450:	d101      	bne.n	8009456 <__sflush_r+0xb6>
 8009452:	602f      	str	r7, [r5, #0]
 8009454:	e7b1      	b.n	80093ba <__sflush_r+0x1a>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	e7ad      	b.n	80093bc <__sflush_r+0x1c>
 8009460:	690f      	ldr	r7, [r1, #16]
 8009462:	2f00      	cmp	r7, #0
 8009464:	d0a9      	beq.n	80093ba <__sflush_r+0x1a>
 8009466:	0793      	lsls	r3, r2, #30
 8009468:	680e      	ldr	r6, [r1, #0]
 800946a:	bf08      	it	eq
 800946c:	694b      	ldreq	r3, [r1, #20]
 800946e:	600f      	str	r7, [r1, #0]
 8009470:	bf18      	it	ne
 8009472:	2300      	movne	r3, #0
 8009474:	eba6 0807 	sub.w	r8, r6, r7
 8009478:	608b      	str	r3, [r1, #8]
 800947a:	f1b8 0f00 	cmp.w	r8, #0
 800947e:	dd9c      	ble.n	80093ba <__sflush_r+0x1a>
 8009480:	6a21      	ldr	r1, [r4, #32]
 8009482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009484:	4643      	mov	r3, r8
 8009486:	463a      	mov	r2, r7
 8009488:	4628      	mov	r0, r5
 800948a:	47b0      	blx	r6
 800948c:	2800      	cmp	r0, #0
 800948e:	dc06      	bgt.n	800949e <__sflush_r+0xfe>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e78e      	b.n	80093bc <__sflush_r+0x1c>
 800949e:	4407      	add	r7, r0
 80094a0:	eba8 0800 	sub.w	r8, r8, r0
 80094a4:	e7e9      	b.n	800947a <__sflush_r+0xda>
 80094a6:	bf00      	nop
 80094a8:	20400001 	.word	0x20400001

080094ac <_fflush_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	690b      	ldr	r3, [r1, #16]
 80094b0:	4605      	mov	r5, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	b913      	cbnz	r3, 80094bc <_fflush_r+0x10>
 80094b6:	2500      	movs	r5, #0
 80094b8:	4628      	mov	r0, r5
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	b118      	cbz	r0, 80094c6 <_fflush_r+0x1a>
 80094be:	6983      	ldr	r3, [r0, #24]
 80094c0:	b90b      	cbnz	r3, 80094c6 <_fflush_r+0x1a>
 80094c2:	f7fe ff97 	bl	80083f4 <__sinit>
 80094c6:	4b14      	ldr	r3, [pc, #80]	; (8009518 <_fflush_r+0x6c>)
 80094c8:	429c      	cmp	r4, r3
 80094ca:	d11b      	bne.n	8009504 <_fflush_r+0x58>
 80094cc:	686c      	ldr	r4, [r5, #4]
 80094ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0ef      	beq.n	80094b6 <_fflush_r+0xa>
 80094d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094d8:	07d0      	lsls	r0, r2, #31
 80094da:	d404      	bmi.n	80094e6 <_fflush_r+0x3a>
 80094dc:	0599      	lsls	r1, r3, #22
 80094de:	d402      	bmi.n	80094e6 <_fflush_r+0x3a>
 80094e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094e2:	f7ff f82a 	bl	800853a <__retarget_lock_acquire_recursive>
 80094e6:	4628      	mov	r0, r5
 80094e8:	4621      	mov	r1, r4
 80094ea:	f7ff ff59 	bl	80093a0 <__sflush_r>
 80094ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094f0:	07da      	lsls	r2, r3, #31
 80094f2:	4605      	mov	r5, r0
 80094f4:	d4e0      	bmi.n	80094b8 <_fflush_r+0xc>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	059b      	lsls	r3, r3, #22
 80094fa:	d4dd      	bmi.n	80094b8 <_fflush_r+0xc>
 80094fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094fe:	f7ff f81d 	bl	800853c <__retarget_lock_release_recursive>
 8009502:	e7d9      	b.n	80094b8 <_fflush_r+0xc>
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <_fflush_r+0x70>)
 8009506:	429c      	cmp	r4, r3
 8009508:	d101      	bne.n	800950e <_fflush_r+0x62>
 800950a:	68ac      	ldr	r4, [r5, #8]
 800950c:	e7df      	b.n	80094ce <_fflush_r+0x22>
 800950e:	4b04      	ldr	r3, [pc, #16]	; (8009520 <_fflush_r+0x74>)
 8009510:	429c      	cmp	r4, r3
 8009512:	bf08      	it	eq
 8009514:	68ec      	ldreq	r4, [r5, #12]
 8009516:	e7da      	b.n	80094ce <_fflush_r+0x22>
 8009518:	08009a68 	.word	0x08009a68
 800951c:	08009a88 	.word	0x08009a88
 8009520:	08009a48 	.word	0x08009a48

08009524 <fiprintf>:
 8009524:	b40e      	push	{r1, r2, r3}
 8009526:	b503      	push	{r0, r1, lr}
 8009528:	4601      	mov	r1, r0
 800952a:	ab03      	add	r3, sp, #12
 800952c:	4805      	ldr	r0, [pc, #20]	; (8009544 <fiprintf+0x20>)
 800952e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009532:	6800      	ldr	r0, [r0, #0]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	f7ff fcaf 	bl	8008e98 <_vfiprintf_r>
 800953a:	b002      	add	sp, #8
 800953c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009540:	b003      	add	sp, #12
 8009542:	4770      	bx	lr
 8009544:	20000010 	.word	0x20000010

08009548 <_lseek_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	; (8009568 <_lseek_r+0x20>)
 800954c:	4604      	mov	r4, r0
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f7f8 f95c 	bl	8001814 <_lseek>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_lseek_r+0x1e>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_lseek_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20003d68 	.word	0x20003d68

0800956c <__swhatbuf_r>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	460e      	mov	r6, r1
 8009570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009574:	2900      	cmp	r1, #0
 8009576:	b096      	sub	sp, #88	; 0x58
 8009578:	4614      	mov	r4, r2
 800957a:	461d      	mov	r5, r3
 800957c:	da08      	bge.n	8009590 <__swhatbuf_r+0x24>
 800957e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	061a      	lsls	r2, r3, #24
 8009588:	d410      	bmi.n	80095ac <__swhatbuf_r+0x40>
 800958a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800958e:	e00e      	b.n	80095ae <__swhatbuf_r+0x42>
 8009590:	466a      	mov	r2, sp
 8009592:	f000 f895 	bl	80096c0 <_fstat_r>
 8009596:	2800      	cmp	r0, #0
 8009598:	dbf1      	blt.n	800957e <__swhatbuf_r+0x12>
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095a4:	425a      	negs	r2, r3
 80095a6:	415a      	adcs	r2, r3
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	e7ee      	b.n	800958a <__swhatbuf_r+0x1e>
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	2000      	movs	r0, #0
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	b016      	add	sp, #88	; 0x58
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095b8 <__smakebuf_r>:
 80095b8:	898b      	ldrh	r3, [r1, #12]
 80095ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095bc:	079d      	lsls	r5, r3, #30
 80095be:	4606      	mov	r6, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	d507      	bpl.n	80095d4 <__smakebuf_r+0x1c>
 80095c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	2301      	movs	r3, #1
 80095ce:	6163      	str	r3, [r4, #20]
 80095d0:	b002      	add	sp, #8
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	ab01      	add	r3, sp, #4
 80095d6:	466a      	mov	r2, sp
 80095d8:	f7ff ffc8 	bl	800956c <__swhatbuf_r>
 80095dc:	9900      	ldr	r1, [sp, #0]
 80095de:	4605      	mov	r5, r0
 80095e0:	4630      	mov	r0, r6
 80095e2:	f7ff fbbb 	bl	8008d5c <_malloc_r>
 80095e6:	b948      	cbnz	r0, 80095fc <__smakebuf_r+0x44>
 80095e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d4ef      	bmi.n	80095d0 <__smakebuf_r+0x18>
 80095f0:	f023 0303 	bic.w	r3, r3, #3
 80095f4:	f043 0302 	orr.w	r3, r3, #2
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	e7e3      	b.n	80095c4 <__smakebuf_r+0xc>
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <__smakebuf_r+0x7c>)
 80095fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	6020      	str	r0, [r4, #0]
 8009604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	9b00      	ldr	r3, [sp, #0]
 800960c:	6163      	str	r3, [r4, #20]
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	6120      	str	r0, [r4, #16]
 8009612:	b15b      	cbz	r3, 800962c <__smakebuf_r+0x74>
 8009614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009618:	4630      	mov	r0, r6
 800961a:	f000 f863 	bl	80096e4 <_isatty_r>
 800961e:	b128      	cbz	r0, 800962c <__smakebuf_r+0x74>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f023 0303 	bic.w	r3, r3, #3
 8009626:	f043 0301 	orr.w	r3, r3, #1
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	89a0      	ldrh	r0, [r4, #12]
 800962e:	4305      	orrs	r5, r0
 8009630:	81a5      	strh	r5, [r4, #12]
 8009632:	e7cd      	b.n	80095d0 <__smakebuf_r+0x18>
 8009634:	0800838d 	.word	0x0800838d

08009638 <__ascii_mbtowc>:
 8009638:	b082      	sub	sp, #8
 800963a:	b901      	cbnz	r1, 800963e <__ascii_mbtowc+0x6>
 800963c:	a901      	add	r1, sp, #4
 800963e:	b142      	cbz	r2, 8009652 <__ascii_mbtowc+0x1a>
 8009640:	b14b      	cbz	r3, 8009656 <__ascii_mbtowc+0x1e>
 8009642:	7813      	ldrb	r3, [r2, #0]
 8009644:	600b      	str	r3, [r1, #0]
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	1e10      	subs	r0, r2, #0
 800964a:	bf18      	it	ne
 800964c:	2001      	movne	r0, #1
 800964e:	b002      	add	sp, #8
 8009650:	4770      	bx	lr
 8009652:	4610      	mov	r0, r2
 8009654:	e7fb      	b.n	800964e <__ascii_mbtowc+0x16>
 8009656:	f06f 0001 	mvn.w	r0, #1
 800965a:	e7f8      	b.n	800964e <__ascii_mbtowc+0x16>

0800965c <__malloc_lock>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__malloc_lock+0x8>)
 800965e:	f7fe bf6c 	b.w	800853a <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	20003d5c 	.word	0x20003d5c

08009668 <__malloc_unlock>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__malloc_unlock+0x8>)
 800966a:	f7fe bf67 	b.w	800853c <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	20003d5c 	.word	0x20003d5c

08009674 <_read_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	; (8009694 <_read_r+0x20>)
 8009678:	4604      	mov	r4, r0
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	2200      	movs	r2, #0
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	f7f8 f866 	bl	8001754 <_read>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_read_r+0x1e>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_read_r+0x1e>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20003d68 	.word	0x20003d68

08009698 <__ascii_wctomb>:
 8009698:	b149      	cbz	r1, 80096ae <__ascii_wctomb+0x16>
 800969a:	2aff      	cmp	r2, #255	; 0xff
 800969c:	bf85      	ittet	hi
 800969e:	238a      	movhi	r3, #138	; 0x8a
 80096a0:	6003      	strhi	r3, [r0, #0]
 80096a2:	700a      	strbls	r2, [r1, #0]
 80096a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80096a8:	bf98      	it	ls
 80096aa:	2001      	movls	r0, #1
 80096ac:	4770      	bx	lr
 80096ae:	4608      	mov	r0, r1
 80096b0:	4770      	bx	lr

080096b2 <abort>:
 80096b2:	b508      	push	{r3, lr}
 80096b4:	2006      	movs	r0, #6
 80096b6:	f000 f84d 	bl	8009754 <raise>
 80096ba:	2001      	movs	r0, #1
 80096bc:	f7f8 f840 	bl	8001740 <_exit>

080096c0 <_fstat_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	; (80096e0 <_fstat_r+0x20>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	f7f8 f886 	bl	80017de <_fstat>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_fstat_r+0x1c>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_fstat_r+0x1c>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	20003d68 	.word	0x20003d68

080096e4 <_isatty_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_isatty_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f8 f885 	bl	80017fe <_isatty>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_isatty_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_isatty_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20003d68 	.word	0x20003d68

08009704 <_raise_r>:
 8009704:	291f      	cmp	r1, #31
 8009706:	b538      	push	{r3, r4, r5, lr}
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	d904      	bls.n	8009718 <_raise_r+0x14>
 800970e:	2316      	movs	r3, #22
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800971a:	b112      	cbz	r2, 8009722 <_raise_r+0x1e>
 800971c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009720:	b94b      	cbnz	r3, 8009736 <_raise_r+0x32>
 8009722:	4620      	mov	r0, r4
 8009724:	f000 f830 	bl	8009788 <_getpid_r>
 8009728:	462a      	mov	r2, r5
 800972a:	4601      	mov	r1, r0
 800972c:	4620      	mov	r0, r4
 800972e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009732:	f000 b817 	b.w	8009764 <_kill_r>
 8009736:	2b01      	cmp	r3, #1
 8009738:	d00a      	beq.n	8009750 <_raise_r+0x4c>
 800973a:	1c59      	adds	r1, r3, #1
 800973c:	d103      	bne.n	8009746 <_raise_r+0x42>
 800973e:	2316      	movs	r3, #22
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	2001      	movs	r0, #1
 8009744:	e7e7      	b.n	8009716 <_raise_r+0x12>
 8009746:	2400      	movs	r4, #0
 8009748:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800974c:	4628      	mov	r0, r5
 800974e:	4798      	blx	r3
 8009750:	2000      	movs	r0, #0
 8009752:	e7e0      	b.n	8009716 <_raise_r+0x12>

08009754 <raise>:
 8009754:	4b02      	ldr	r3, [pc, #8]	; (8009760 <raise+0xc>)
 8009756:	4601      	mov	r1, r0
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f7ff bfd3 	b.w	8009704 <_raise_r>
 800975e:	bf00      	nop
 8009760:	20000010 	.word	0x20000010

08009764 <_kill_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_kill_r+0x20>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f7f7 ffd5 	bl	8001720 <_kill>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d102      	bne.n	8009780 <_kill_r+0x1c>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b103      	cbz	r3, 8009780 <_kill_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd38      	pop	{r3, r4, r5, pc}
 8009782:	bf00      	nop
 8009784:	20003d68 	.word	0x20003d68

08009788 <_getpid_r>:
 8009788:	f7f7 bfc2 	b.w	8001710 <_getpid>

0800978c <_init>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr

08009798 <_fini>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr
